{
  "FilePath": "c:\\Users\\yoshi\\Documents\\Repository\\Blazor\\BlazorMLWebApp\\BlazorMLWebApp.csproj",
  "Configuration": {
    "ConfigurationName": "MVC-3.0",
    "LanguageVersion": "6.0",
    "Extensions": [
      {
        "ExtensionName": "MVC-3.0"
      }
    ]
  },
  "ProjectWorkspaceState": {
    "TagHelpers": [
      {
        "HashCode": -1009009432,
        "Kind": "Components.Component",
        "Name": "BlazorMLWebApp.Pages.FormExample",
        "AssemblyName": "BlazorMLWebApp",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FormExample"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorMLWebApp.Pages.FormExample"
        }
      },
      {
        "HashCode": 1259250867,
        "Kind": "Components.Component",
        "Name": "BlazorMLWebApp.Pages.FormExample",
        "AssemblyName": "BlazorMLWebApp",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorMLWebApp.Pages.FormExample"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorMLWebApp.Pages.FormExample",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -891944480,
        "Kind": "Components.Component",
        "Name": "BlazorMLWebApp.Pages.Counter",
        "AssemblyName": "BlazorMLWebApp",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Counter"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorMLWebApp.Pages.Counter"
        }
      },
      {
        "HashCode": 1909321791,
        "Kind": "Components.Component",
        "Name": "BlazorMLWebApp.Pages.Counter",
        "AssemblyName": "BlazorMLWebApp",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorMLWebApp.Pages.Counter"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorMLWebApp.Pages.Counter",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2024955715,
        "Kind": "Components.Component",
        "Name": "BlazorMLWebApp.Pages.FetchData",
        "AssemblyName": "BlazorMLWebApp",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FetchData"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorMLWebApp.Pages.FetchData"
        }
      },
      {
        "HashCode": 42820198,
        "Kind": "Components.Component",
        "Name": "BlazorMLWebApp.Pages.FetchData",
        "AssemblyName": "BlazorMLWebApp",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorMLWebApp.Pages.FetchData"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorMLWebApp.Pages.FetchData",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1301978993,
        "Kind": "Components.Component",
        "Name": "BlazorMLWebApp.Pages.FileUpload",
        "AssemblyName": "BlazorMLWebApp",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FileUpload"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorMLWebApp.Pages.FileUpload"
        }
      },
      {
        "HashCode": -196136909,
        "Kind": "Components.Component",
        "Name": "BlazorMLWebApp.Pages.FileUpload",
        "AssemblyName": "BlazorMLWebApp",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorMLWebApp.Pages.FileUpload"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorMLWebApp.Pages.FileUpload",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1270103259,
        "Kind": "Components.Component",
        "Name": "BlazorMLWebApp.Pages.ImageClassification",
        "AssemblyName": "BlazorMLWebApp",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ImageClassification"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorMLWebApp.Pages.ImageClassification"
        }
      },
      {
        "HashCode": -1485253677,
        "Kind": "Components.Component",
        "Name": "BlazorMLWebApp.Pages.ImageClassification",
        "AssemblyName": "BlazorMLWebApp",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorMLWebApp.Pages.ImageClassification"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorMLWebApp.Pages.ImageClassification",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 850696817,
        "Kind": "Components.Component",
        "Name": "BlazorMLWebApp.Pages.Index",
        "AssemblyName": "BlazorMLWebApp",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Index"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorMLWebApp.Pages.Index"
        }
      },
      {
        "HashCode": -1005454746,
        "Kind": "Components.Component",
        "Name": "BlazorMLWebApp.Pages.Index",
        "AssemblyName": "BlazorMLWebApp",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorMLWebApp.Pages.Index"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorMLWebApp.Pages.Index",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1521625699,
        "Kind": "Components.Component",
        "Name": "BlazorMLWebApp.App",
        "AssemblyName": "BlazorMLWebApp",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "App"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorMLWebApp.App"
        }
      },
      {
        "HashCode": 1925966192,
        "Kind": "Components.Component",
        "Name": "BlazorMLWebApp.App",
        "AssemblyName": "BlazorMLWebApp",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorMLWebApp.App"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorMLWebApp.App",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -654990539,
        "Kind": "Components.Component",
        "Name": "BlazorMLWebApp.Shared.MainLayout",
        "AssemblyName": "BlazorMLWebApp",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MainLayout"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Body",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets the content to be rendered inside the layout.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Body",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorMLWebApp.Shared.MainLayout"
        }
      },
      {
        "HashCode": -2006546202,
        "Kind": "Components.Component",
        "Name": "BlazorMLWebApp.Shared.MainLayout",
        "AssemblyName": "BlazorMLWebApp",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorMLWebApp.Shared.MainLayout"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Body",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets the content to be rendered inside the layout.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Body",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorMLWebApp.Shared.MainLayout",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -763264796,
        "Kind": "Components.ChildContent",
        "Name": "BlazorMLWebApp.Shared.MainLayout.Body",
        "AssemblyName": "BlazorMLWebApp",
        "Documentation": "\n            <summary>\n            Gets the content to be rendered inside the layout.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Body",
            "ParentTag": "MainLayout"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "BlazorMLWebApp.Shared.MainLayout.Body",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1360088887,
        "Kind": "Components.ChildContent",
        "Name": "BlazorMLWebApp.Shared.MainLayout.Body",
        "AssemblyName": "BlazorMLWebApp",
        "Documentation": "\n            <summary>\n            Gets the content to be rendered inside the layout.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Body",
            "ParentTag": "BlazorMLWebApp.Shared.MainLayout"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "BlazorMLWebApp.Shared.MainLayout.Body",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 805344369,
        "Kind": "Components.Component",
        "Name": "BlazorMLWebApp.Shared.NavMenu",
        "AssemblyName": "BlazorMLWebApp",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NavMenu"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorMLWebApp.Shared.NavMenu"
        }
      },
      {
        "HashCode": 1761619452,
        "Kind": "Components.Component",
        "Name": "BlazorMLWebApp.Shared.NavMenu",
        "AssemblyName": "BlazorMLWebApp",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BlazorMLWebApp.Shared.NavMenu"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "BlazorMLWebApp.Shared.NavMenu",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1605964898,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n             <summary>\n             Combines the behaviors of <see cref=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeView\" /> and <see cref=\"T:Microsoft.AspNetCore.Components.RouteView\" />,\n             so that it displays the page matching the specified route but only if the user\n             is authorized to see it.\n            \n             Additionally, this component supplies a cascading parameter of type <see cref=\"T:System.Threading.Tasks.Task`1\" />,\n             which makes the user's current authentication state available to descendants.\n             </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "AuthorizeRouteView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "NotAuthorized",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NotAuthorized",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Authorizing",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Authorizing",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Resource",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            The resource to which access is being controlled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Resource"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RouteData",
            "TypeName": "Microsoft.AspNetCore.Components.RouteData",
            "IsEditorRequired": true,
            "Documentation": "\n            <summary>\n            Gets or sets the route data. This determines the page that will be\n            displayed and the parameter values that will be supplied to the page.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RouteData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DefaultLayout",
            "TypeName": "System.Type",
            "Documentation": "\n            <summary>\n            Gets or sets the type of a layout to be used if the page does not\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DefaultLayout"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView"
        }
      },
      {
        "HashCode": -583413092,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n             <summary>\n             Combines the behaviors of <see cref=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeView\" /> and <see cref=\"T:Microsoft.AspNetCore.Components.RouteView\" />,\n             so that it displays the page matching the specified route but only if the user\n             is authorized to see it.\n            \n             Additionally, this component supplies a cascading parameter of type <see cref=\"T:System.Threading.Tasks.Task`1\" />,\n             which makes the user's current authentication state available to descendants.\n             </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "NotAuthorized",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NotAuthorized",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Authorizing",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Authorizing",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Resource",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            The resource to which access is being controlled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Resource"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RouteData",
            "TypeName": "Microsoft.AspNetCore.Components.RouteData",
            "IsEditorRequired": true,
            "Documentation": "\n            <summary>\n            Gets or sets the route data. This determines the page that will be\n            displayed and the parameter values that will be supplied to the page.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RouteData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DefaultLayout",
            "TypeName": "System.Type",
            "Documentation": "\n            <summary>\n            Gets or sets the type of a layout to be used if the page does not\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DefaultLayout"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -854867692,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NotAuthorized",
            "ParentTag": "AuthorizeRouteView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'NotAuthorized' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1898543746,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NotAuthorized",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'NotAuthorized' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -981853637,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Authorizing",
            "ParentTag": "AuthorizeRouteView"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1059247660,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Authorizing",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -250357612,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            Displays differing content depending on the user's authorization status.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Policy",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The policy name that determines whether the content can be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Policy"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Roles",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma delimited list of roles that are allowed to display the content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Roles"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "\n            <summary>\n            The content that will be displayed if the user is authorized.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NotAuthorized",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NotAuthorized",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Authorized",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "\n            <summary>\n            The content that will be displayed if the user is authorized.\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Authorized",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Authorizing",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Authorizing",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Resource",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            The resource to which access is being controlled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Resource"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView"
        }
      },
      {
        "HashCode": 1573948243,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            Displays differing content depending on the user's authorization status.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Policy",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The policy name that determines whether the content can be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Policy"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Roles",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma delimited list of roles that are allowed to display the content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Roles"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "\n            <summary>\n            The content that will be displayed if the user is authorized.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NotAuthorized",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NotAuthorized",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Authorized",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "\n            <summary>\n            The content that will be displayed if the user is authorized.\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Authorized",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Authorizing",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Authorizing",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Resource",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            The resource to which access is being controlled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Resource"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 847687024,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content that will be displayed if the user is authorized.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1479090265,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content that will be displayed if the user is authorized.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 434220599,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NotAuthorized",
            "ParentTag": "AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'NotAuthorized' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1918440682,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NotAuthorized",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'NotAuthorized' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 979835534,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content that will be displayed if the user is authorized.\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Authorized",
            "ParentTag": "AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Authorized' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1790184685,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content that will be displayed if the user is authorized.\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Authorized",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Authorized' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 380571246,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Authorizing",
            "ParentTag": "AuthorizeView"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1281178803,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Authorizing",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1272108331,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CascadingAuthenticationState"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The content to which the authentication state should be provided.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState"
        }
      },
      {
        "HashCode": 402252449,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The content to which the authentication state should be provided.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 15817479,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content to which the authentication state should be provided.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "CascadingAuthenticationState"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1288720520,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "\n            <summary>\n            The content to which the authentication state should be provided.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1731521599,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.CascadingValue<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            A component that provides a cascading value to all descendant components.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CascadingValue"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.CascadingValue<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            The value to be provided.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "\n             <summary>\n             Optionally gives a name to the provided value. Descendant components\n             will be able to receive the value by specifying this name.\n            \n             If no name is specified, then descendant components will receive the\n             value based the type of value they are requesting.\n             </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsFixed",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, indicates that <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> will not change. This is a\n            performance optimization that allows the framework to skip setting up\n            change notifications. Set this flag only if you will not change\n            <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> during the component's lifetime.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsFixed"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.CascadingValue<TValue>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 1338665563,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.CascadingValue<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            A component that provides a cascading value to all descendant components.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.CascadingValue"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.CascadingValue<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            The value to be provided.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "\n             <summary>\n             Optionally gives a name to the provided value. Descendant components\n             will be able to receive the value by specifying this name.\n            \n             If no name is specified, then descendant components will receive the\n             value based the type of value they are requesting.\n             </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsFixed",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, indicates that <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> will not change. This is a\n            performance optimization that allows the framework to skip setting up\n            change notifications. Set this flag only if you will not change\n            <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> during the component's lifetime.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsFixed"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.CascadingValue<TValue>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1676751795,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "CascadingValue"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -762463466,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.CascadingValue"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -230171669,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.DynamicComponent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            A component that renders another component dynamically according to its\n            <see cref=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Type\" /> parameter.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "DynamicComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Type",
            "TypeName": "System.Type",
            "IsEditorRequired": true,
            "Documentation": "\n            <summary>\n            Gets or sets the type of the component to be rendered. The supplied type must\n            implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Type"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Parameters",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a dictionary of parameters to be passed to the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Parameters"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.DynamicComponent"
        }
      },
      {
        "HashCode": -1850839935,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.DynamicComponent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            A component that renders another component dynamically according to its\n            <see cref=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Type\" /> parameter.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.DynamicComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Type",
            "TypeName": "System.Type",
            "IsEditorRequired": true,
            "Documentation": "\n            <summary>\n            Gets or sets the type of the component to be rendered. The supplied type must\n            implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Type"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Parameters",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a dictionary of parameters to be passed to the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Parameters"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.DynamicComponent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1705267614,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.LayoutView",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            Displays the specified content inside the specified layout and any further\n            nested layouts.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LayoutView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the content to display.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Layout",
            "TypeName": "System.Type",
            "Documentation": "\n            <summary>\n            Gets or sets the type of the layout in which to display the content.\n            The type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" /> and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Layout"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.LayoutView"
        }
      },
      {
        "HashCode": 972327726,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.LayoutView",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            Displays the specified content inside the specified layout and any further\n            nested layouts.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.LayoutView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the content to display.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Layout",
            "TypeName": "System.Type",
            "Documentation": "\n            <summary>\n            Gets or sets the type of the layout in which to display the content.\n            The type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" /> and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Layout"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.LayoutView",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 872702922,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.LayoutView.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            Gets or sets the content to display.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "LayoutView"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.LayoutView.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1919468124,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.LayoutView.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            Gets or sets the content to display.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.LayoutView"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.LayoutView.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -136918708,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.RouteView",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            Displays the specified page component, rendering it inside its layout\n            and any further nested layouts.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "RouteView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "RouteData",
            "TypeName": "Microsoft.AspNetCore.Components.RouteData",
            "IsEditorRequired": true,
            "Documentation": "\n            <summary>\n            Gets or sets the route data. This determines the page that will be\n            displayed and the parameter values that will be supplied to the page.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RouteData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DefaultLayout",
            "TypeName": "System.Type",
            "Documentation": "\n            <summary>\n            Gets or sets the type of a layout to be used if the page does not\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DefaultLayout"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.RouteView"
        }
      },
      {
        "HashCode": 162793801,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.RouteView",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            Displays the specified page component, rendering it inside its layout\n            and any further nested layouts.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.RouteView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "RouteData",
            "TypeName": "Microsoft.AspNetCore.Components.RouteData",
            "IsEditorRequired": true,
            "Documentation": "\n            <summary>\n            Gets or sets the route data. This determines the page that will be\n            displayed and the parameter values that will be supplied to the page.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RouteData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DefaultLayout",
            "TypeName": "System.Type",
            "Documentation": "\n            <summary>\n            Gets or sets the type of a layout to be used if the page does not\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DefaultLayout"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.RouteView",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1641666892,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            A component that supplies route data corresponding to the current navigation state.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Router"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AppAssembly",
            "TypeName": "System.Reflection.Assembly",
            "IsEditorRequired": true,
            "Documentation": "\n            <summary>\n            Gets or sets the assembly that should be searched for components matching the URI.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AppAssembly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAssemblies",
            "TypeName": "System.Collections.Generic.IEnumerable<System.Reflection.Assembly>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional assemblies that should be searched for components\n            that can match URIs.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAssemblies"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NotFound",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "IsEditorRequired": true,
            "Documentation": "\n            <summary>\n            Gets or sets the content to display when no match is found for the requested route.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NotFound",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Found",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.RouteData>",
            "IsEditorRequired": true,
            "Documentation": "\n            <summary>\n            Gets or sets the content to display when a match is found for the requested route.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Found",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Navigating",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Get or sets the content to display when asynchronous navigation is in progress.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Navigating",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnNavigateAsync",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.NavigationContext>",
            "Documentation": "\n            <summary>\n            Gets or sets a handler that should be called before navigating to a new page.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnNavigateAsync",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PreferExactMatches",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or sets a flag to indicate whether route matching should prefer exact matches\n            over wildcards.\n            <para>This property is obsolete and configuring it does nothing.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PreferExactMatches"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router"
        }
      },
      {
        "HashCode": 1238927915,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            A component that supplies route data corresponding to the current navigation state.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Routing.Router"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AppAssembly",
            "TypeName": "System.Reflection.Assembly",
            "IsEditorRequired": true,
            "Documentation": "\n            <summary>\n            Gets or sets the assembly that should be searched for components matching the URI.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AppAssembly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAssemblies",
            "TypeName": "System.Collections.Generic.IEnumerable<System.Reflection.Assembly>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional assemblies that should be searched for components\n            that can match URIs.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAssemblies"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NotFound",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "IsEditorRequired": true,
            "Documentation": "\n            <summary>\n            Gets or sets the content to display when no match is found for the requested route.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NotFound",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Found",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.RouteData>",
            "IsEditorRequired": true,
            "Documentation": "\n            <summary>\n            Gets or sets the content to display when a match is found for the requested route.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Found",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Navigating",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Get or sets the content to display when asynchronous navigation is in progress.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Navigating",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnNavigateAsync",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.NavigationContext>",
            "Documentation": "\n            <summary>\n            Gets or sets a handler that should be called before navigating to a new page.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnNavigateAsync",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PreferExactMatches",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or sets a flag to indicate whether route matching should prefer exact matches\n            over wildcards.\n            <para>This property is obsolete and configuring it does nothing.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PreferExactMatches"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1663070066,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router.NotFound",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            Gets or sets the content to display when no match is found for the requested route.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NotFound",
            "ParentTag": "Router"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router.NotFound",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -737581176,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router.NotFound",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            Gets or sets the content to display when no match is found for the requested route.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NotFound",
            "ParentTag": "Microsoft.AspNetCore.Components.Routing.Router"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router.NotFound",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1864083392,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router.Found",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            Gets or sets the content to display when a match is found for the requested route.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Found",
            "ParentTag": "Router"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Found' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router.Found",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1008425388,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router.Found",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            Gets or sets the content to display when a match is found for the requested route.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Found",
            "ParentTag": "Microsoft.AspNetCore.Components.Routing.Router"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Found' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router.Found",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1128060439,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router.Navigating",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            Get or sets the content to display when asynchronous navigation is in progress.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Navigating",
            "ParentTag": "Router"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router.Navigating",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -400974047,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router.Navigating",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "\n            <summary>\n            Get or sets the content to display when asynchronous navigation is in progress.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Navigating",
            "ParentTag": "Microsoft.AspNetCore.Components.Routing.Router"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router.Navigating",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1432029231,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator",
        "AssemblyName": "Microsoft.AspNetCore.Components.Forms",
        "Documentation": "\n            <summary>\n            Adds Data Annotations validation support to an <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "DataAnnotationsValidator"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator"
        }
      },
      {
        "HashCode": -525589006,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator",
        "AssemblyName": "Microsoft.AspNetCore.Components.Forms",
        "Documentation": "\n            <summary>\n            Adds Data Annotations validation support to an <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1368334044,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.EditForm",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Renders a form element that cascades an <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> to descendants.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "EditForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>form</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditContext",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.EditContext",
            "Documentation": "\n            <summary>\n            Supplies the edit context explicitly. If using this parameter, do not\n            also supply <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Model\" />, since the model value will be taken\n            from the <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditContext.Model\" /> property.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EditContext"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Model",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Specifies the top-level model object for the form. An edit context will\n            be constructed for this model. If using this parameter, do not also supply\n            a value for <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Model"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "\n            <summary>\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnSubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "\n             <summary>\n             A callback that will be invoked when the form is submitted.\n            \n             If using this parameter, you are responsible for triggering any validation\n             manually, e.g., by calling <see cref=\"M:Microsoft.AspNetCore.Components.Forms.EditContext.Validate\" />.\n             </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnSubmit",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnValidSubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "\n            <summary>\n            A callback that will be invoked when the form is submitted and the\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be valid.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnValidSubmit",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInvalidSubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "\n            <summary>\n            A callback that will be invoked when the form is submitted and the\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be invalid.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInvalidSubmit",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.EditForm"
        }
      },
      {
        "HashCode": 1470343274,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.EditForm",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Renders a form element that cascades an <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> to descendants.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.EditForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>form</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditContext",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.EditContext",
            "Documentation": "\n            <summary>\n            Supplies the edit context explicitly. If using this parameter, do not\n            also supply <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Model\" />, since the model value will be taken\n            from the <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditContext.Model\" /> property.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EditContext"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Model",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Specifies the top-level model object for the form. An edit context will\n            be constructed for this model. If using this parameter, do not also supply\n            a value for <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Model"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "\n            <summary>\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnSubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "\n             <summary>\n             A callback that will be invoked when the form is submitted.\n            \n             If using this parameter, you are responsible for triggering any validation\n             manually, e.g., by calling <see cref=\"M:Microsoft.AspNetCore.Components.Forms.EditContext.Validate\" />.\n             </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnSubmit",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnValidSubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "\n            <summary>\n            A callback that will be invoked when the form is submitted and the\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be valid.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnValidSubmit",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInvalidSubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "\n            <summary>\n            A callback that will be invoked when the form is submitted and the\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be invalid.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInvalidSubmit",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.EditForm",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1260644938,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "EditForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -305087994,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Forms.EditForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 125342390,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            An input component for editing <see cref=\"T:System.Boolean\" /> values.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputCheckbox"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.Boolean>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox"
        }
      },
      {
        "HashCode": -1883710833,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            An input component for editing <see cref=\"T:System.Boolean\" /> values.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.Boolean>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1856186142,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            An input component for editing date values.\n            Supported types are <see cref=\"T:System.DateTime\" /> and <see cref=\"T:System.DateTimeOffset\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputDate"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputDate<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Type",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.InputDateType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the type of HTML input to be rendered.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Type"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ParsingErrorMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -1545689641,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            An input component for editing date values.\n            Supported types are <see cref=\"T:System.DateTime\" /> and <see cref=\"T:System.DateTimeOffset\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputDate"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputDate<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Type",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.InputDateType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the type of HTML input to be rendered.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Type"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ParsingErrorMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -686251387,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputFile",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            A component that wraps the HTML file input element and supplies a <see cref=\"T:System.IO.Stream\" /> for each file's contents.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputFile"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OnChange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnChange",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputFile"
        }
      },
      {
        "HashCode": -1157562580,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputFile",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            A component that wraps the HTML file input element and supplies a <see cref=\"T:System.IO.Stream\" /> for each file's contents.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputFile"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OnChange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnChange",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputFile",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 797174735,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            An input component for editing numeric values.\n            Supported numeric types are <see cref=\"T:System.Int32\" />, <see cref=\"T:System.Int64\" />, <see cref=\"T:System.Int16\" />, <see cref=\"T:System.Single\" />, <see cref=\"T:System.Double\" />, <see cref=\"T:System.Decimal\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputNumber"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputNumber<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ParsingErrorMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 187781240,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            An input component for editing numeric values.\n            Supported numeric types are <see cref=\"T:System.Int32\" />, <see cref=\"T:System.Int64\" />, <see cref=\"T:System.Int16\" />, <see cref=\"T:System.Single\" />, <see cref=\"T:System.Double\" />, <see cref=\"T:System.Decimal\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputNumber"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputNumber<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ParsingErrorMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1336805740,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            An input component used for selecting a value from a group of choices.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputRadio"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadio<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of this input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the name of the parent input radio group.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 1885492344,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            An input component used for selecting a value from a group of choices.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputRadio"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadio<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of this input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the name of the parent input radio group.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1093524465,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Groups child <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadio`1\" /> components.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputRadioGroup"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the name of the group.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -1373343590,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Groups child <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadio`1\" /> components.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the name of the group.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1931628620,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "InputRadioGroup"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -2061413126,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 557473903,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            A dropdown selection component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputSelect"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputSelect<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the child content to be rendering inside the select element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -976809685,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            A dropdown selection component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputSelect"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputSelect<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the child content to be rendering inside the select element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1536919026,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the child content to be rendering inside the select element.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "InputSelect"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1847447880,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the child content to be rendering inside the select element.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Forms.InputSelect"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -561585681,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputText",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            An input component for editing <see cref=\"T:System.String\" /> values.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputText"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputText"
        }
      },
      {
        "HashCode": -1580907880,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputText",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            An input component for editing <see cref=\"T:System.String\" /> values.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputText"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputText",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1572205952,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            A multiline input component for editing <see cref=\"T:System.String\" /> values.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputTextArea"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputTextArea"
        }
      },
      {
        "HashCode": 387352825,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            A multiline input component for editing <see cref=\"T:System.String\" /> values.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputTextArea"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueExpression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayName"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1312788619,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Displays a list of validation messages for a specified field within a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ValidationMessage"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>div</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Specifies the field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 1989807770,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Displays a list of validation messages for a specified field within a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.ValidationMessage"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>div</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "\n            <summary>\n            Specifies the field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -594005223,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.ValidationSummary",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Displays a list of validation messages from a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ValidationSummary"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Model",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Gets or sets the model to produce the list of validation messages for.\n            When specified, this lists all errors that are associated with the model instance.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Model"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>ul</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.ValidationSummary"
        }
      },
      {
        "HashCode": -906565018,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.ValidationSummary",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Displays a list of validation messages from a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.ValidationSummary"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Model",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Gets or sets the model to produce the list of validation messages for.\n            When specified, this lists all errors that are associated with the model instance.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Model"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>ul</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.ValidationSummary",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 995230822,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.FocusOnNavigate",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            After navigating from one page to another, sets focus to an element\n            matching a CSS selector. This can be used to build an accessible\n            navigation system compatible with screen readers.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FocusOnNavigate"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "RouteData",
            "TypeName": "Microsoft.AspNetCore.Components.RouteData",
            "Documentation": "\n            <summary>\n            Gets or sets the route data. This can be obtained from an enclosing\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.Router\" /> component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RouteData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Selector",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a CSS selector describing the element to be focused after\n            navigation between pages.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Selector"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.FocusOnNavigate"
        }
      },
      {
        "HashCode": -218465136,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.FocusOnNavigate",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            After navigating from one page to another, sets focus to an element\n            matching a CSS selector. This can be used to build an accessible\n            navigation system compatible with screen readers.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Routing.FocusOnNavigate"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "RouteData",
            "TypeName": "Microsoft.AspNetCore.Components.RouteData",
            "Documentation": "\n            <summary>\n            Gets or sets the route data. This can be obtained from an enclosing\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.Router\" /> component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RouteData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Selector",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a CSS selector describing the element to be focused after\n            navigation between pages.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Selector"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.FocusOnNavigate",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 465953150,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.NavLink",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            A component that renders an anchor tag, automatically toggling its 'active'\n            class based on whether its 'href' matches the current URI.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NavLink"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ActiveClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the CSS class name applied to the NavLink when the\n            current route matches the NavLink href.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActiveClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be added to the generated\n            <c>a</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Match",
            "TypeName": "Microsoft.AspNetCore.Components.Routing.NavLinkMatch",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets a value representing the URL matching behavior.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Match"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.NavLink"
        }
      },
      {
        "HashCode": -1492840923,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.NavLink",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            A component that renders an anchor tag, automatically toggling its 'active'\n            class based on whether its 'href' matches the current URI.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Routing.NavLink"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ActiveClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the CSS class name applied to the NavLink when the\n            current route matches the NavLink href.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActiveClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            Gets or sets a collection of additional attributes that will be added to the generated\n            <c>a</c> element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Match",
            "TypeName": "Microsoft.AspNetCore.Components.Routing.NavLinkMatch",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets a value representing the URL matching behavior.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Match"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.NavLink",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 369616440,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "NavLink"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 508655134,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Routing.NavLink"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1158422948,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.HeadContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Provides content to <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> components.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeadContent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.HeadContent"
        }
      },
      {
        "HashCode": -261997222,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.HeadContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Provides content to <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> components.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Web.HeadContent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.HeadContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 535489320,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HeadContent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 151748846,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.HeadContent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -378019142,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.HeadOutlet",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Renders content provided by <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadContent\" /> components.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeadOutlet"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.HeadOutlet"
        }
      },
      {
        "HashCode": -1142013369,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.HeadOutlet",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Renders content provided by <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadContent\" /> components.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Web.HeadOutlet"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.HeadOutlet",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2054176831,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.PageTitle",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Enables rendering an HTML <c>&lt;title&gt;</c> to a <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PageTitle"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the content to be rendered as the document title.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.PageTitle"
        }
      },
      {
        "HashCode": 840374392,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.PageTitle",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Enables rendering an HTML <c>&lt;title&gt;</c> to a <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Web.PageTitle"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or sets the content to be rendered as the document title.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.PageTitle",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1019726355,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the content to be rendered as the document title.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "PageTitle"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1890708493,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the content to be rendered as the document title.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.PageTitle"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -208699182,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.ErrorBoundary",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Captures errors thrown from its child content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ErrorBoundary"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The content to be displayed when there is no error.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<System.Exception>",
            "Documentation": "\n            <summary>\n            The content to be displayed when there is an error.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaximumErrorCount",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The maximum number of errors that can be handled. If more errors are received,\n            they will be treated as fatal. Calling <see cref=\"M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.Recover\" /> resets the count.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaximumErrorCount"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary"
        }
      },
      {
        "HashCode": -1289396628,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.ErrorBoundary",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Captures errors thrown from its child content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The content to be displayed when there is no error.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<System.Exception>",
            "Documentation": "\n            <summary>\n            The content to be displayed when there is an error.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaximumErrorCount",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The maximum number of errors that can be handled. If more errors are received,\n            they will be treated as fatal. Calling <see cref=\"M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.Recover\" /> resets the count.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaximumErrorCount"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1869586253,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            The content to be displayed when there is no error.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "ErrorBoundary"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 534451606,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            The content to be displayed when there is no error.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.ErrorBoundary"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 993705214,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            The content to be displayed when there is an error.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ErrorContent",
            "ParentTag": "ErrorBoundary"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ErrorContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -25725297,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            The content to be displayed when there is an error.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ErrorContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.ErrorBoundary"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ErrorContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -941437253,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Provides functionality for rendering a virtualized list of items.\n            </summary>\n            <typeparam name=\"TItem\">The <c>context</c> type for the items being rendered.</typeparam>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>",
            "Documentation": "\n            <summary>\n            Gets or sets the template for items that have not yet been loaded in memory.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemSize",
            "TypeName": "System.Single",
            "Documentation": "\n            <summary>\n            Gets the size of each item in pixels. Defaults to 50px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemsProvider",
            "TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>",
            "Documentation": "\n            <summary>\n            Gets or sets the function providing items to the list.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemsProvider",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.ICollection<TItem>",
            "Documentation": "\n            <summary>\n            Gets or sets the fixed item source.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OverscanCount",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Gets or sets a value that determines how many additional items will be rendered\n            before and after the visible region. This help to reduce the frequency of rendering\n            during scrolling. However, higher values mean that more elements will be present\n            in the page.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OverscanCount"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 440075746,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Provides functionality for rendering a virtualized list of items.\n            </summary>\n            <typeparam name=\"TItem\">The <c>context</c> type for the items being rendered.</typeparam>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>",
            "Documentation": "\n            <summary>\n            Gets or sets the template for items that have not yet been loaded in memory.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemSize",
            "TypeName": "System.Single",
            "Documentation": "\n            <summary>\n            Gets the size of each item in pixels. Defaults to 50px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemsProvider",
            "TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>",
            "Documentation": "\n            <summary>\n            Gets or sets the function providing items to the list.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemsProvider",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.ICollection<TItem>",
            "Documentation": "\n            <summary>\n            Gets or sets the fixed item source.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OverscanCount",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Gets or sets a value that determines how many additional items will be rendered\n            before and after the visible region. This help to reduce the frequency of rendering\n            during scrolling. However, higher values mean that more elements will be present\n            in the page.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OverscanCount"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 168009544,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 22210290,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 806514618,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemContent",
            "ParentTag": "Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 578477133,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1149017279,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the template for items that have not yet been loaded in memory.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Placeholder",
            "ParentTag": "Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Placeholder' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 940486743,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "\n            <summary>\n            Gets or sets the template for items that have not yet been loaded in memory.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Placeholder",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Placeholder' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1502030702,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudBooleanInput<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBooleanInput"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudBooleanInput<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be read-only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Checked",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The state of the component\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Checked",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "StopClickPropagation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true will prevent the click from bubbling up the event tree.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "StopClickPropagation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CheckedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Fired when Checked changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CheckedChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<T, System.Boolean?>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<T>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudBooleanInput<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -1133103231,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudBooleanInput<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudBooleanInput"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudBooleanInput<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be read-only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Checked",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The state of the component\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Checked",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "StopClickPropagation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true will prevent the click from bubbling up the event tree.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "StopClickPropagation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CheckedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Fired when Checked changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CheckedChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<T, System.Boolean?>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<T>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudBooleanInput<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 781617194,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudAlert",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudAlert"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ContentAlignment",
            "TypeName": "MudBlazor.HorizontalAlignment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the position of the text to the start (Left in LTR and right in RTL).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ContentAlignment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AlertTextPosition",
            "TypeName": "MudBlazor.AlertTextPosition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the position of the text to the start (Left in LTR and right in RTL).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AlertTextPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseIconClicked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.MudAlert>",
            "Documentation": "\n            <summary>\n            The callback, when the close button has been clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseIconClicked",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Define the icon used for the close button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowCloseIcon",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Sets if the alert shows a close icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowCloseIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow. 0 for no shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, rounded corners are disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact padding will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NoIcon",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no alert icon will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NoIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Severity",
            "TypeName": "MudBlazor.Severity",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The severity of the alert. This defines the color and icon used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Severity"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom icon, leave unset to use the standard icon which depends on the Severity\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised when the alert is clicked\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudAlert"
        }
      },
      {
        "HashCode": -1753168392,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudAlert",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudAlert"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ContentAlignment",
            "TypeName": "MudBlazor.HorizontalAlignment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the position of the text to the start (Left in LTR and right in RTL).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ContentAlignment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AlertTextPosition",
            "TypeName": "MudBlazor.AlertTextPosition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the position of the text to the start (Left in LTR and right in RTL).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AlertTextPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseIconClicked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.MudAlert>",
            "Documentation": "\n            <summary>\n            The callback, when the close button has been clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseIconClicked",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Define the icon used for the close button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowCloseIcon",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Sets if the alert shows a close icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowCloseIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow. 0 for no shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, rounded corners are disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact padding will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NoIcon",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no alert icon will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NoIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Severity",
            "TypeName": "MudBlazor.Severity",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The severity of the alert. This defines the color and icon used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Severity"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom icon, leave unset to use the standard icon which depends on the Severity\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised when the alert is clicked\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudAlert",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1809947560,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudAlert.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudAlert"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudAlert.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1720058272,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudAlert.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudAlert"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudAlert.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1321869185,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudAppBar",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudAppBar"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Bottom",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, Appbar will be placed at the bottom of the screen.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Bottom"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow. 0 for no shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact padding will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableGutters",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the left and right padding is removed from from the appbar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableGutters"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Fixed",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, appbar will be Fixed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Fixed"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToolBarClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by spaces for the nested toolbar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToolBarClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudAppBar"
        }
      },
      {
        "HashCode": -390574612,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudAppBar",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudAppBar"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Bottom",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, Appbar will be placed at the bottom of the screen.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Bottom"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow. 0 for no shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact padding will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableGutters",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the left and right padding is removed from from the appbar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableGutters"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Fixed",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, appbar will be Fixed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Fixed"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToolBarClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by spaces for the nested toolbar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToolBarClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudAppBar",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 737477211,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudAppBar.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudAppBar"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudAppBar.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -622098150,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudAppBar.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudAppBar"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudAppBar.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1925255270,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudAutocomplete<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudAutocomplete"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudAutocomplete<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PopoverClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for the popover, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PopoverClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AnchorOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Set the anchor origin point to determen where the popover will open from.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AnchorOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TransformOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the transform origin point for the popover.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TransformOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Direction",
            "TypeName": "MudBlazor.Direction",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Set the anchor origin point to determen where the popover will open from.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Direction"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OffsetX",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the Autocomplete menu will open either before or after the input (left/right).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OffsetX"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OffsetY",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the Autocomplete menu will open either before or after the input (top/bottom).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OffsetY"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact vertical padding will be applied to all Autocomplete items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OpenIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Open Autocomplete Icon\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OpenIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Close Autocomplete Icon\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxHeight",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The maximum height of the Autocomplete when it is open.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToStringFunc",
            "TypeName": "System.Func<T, System.String>",
            "Documentation": "\n            <summary>\n            Defines how values are displayed in the drop-down list\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToStringFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowProgressIndicator",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Whether to show the progress indicator. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowProgressIndicator"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ProgressIndicatorColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the progress indicator. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ProgressIndicatorColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SearchFuncWithCancel",
            "TypeName": "System.Func<System.String, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>>>",
            "Documentation": "\n            <summary>\n            Func that returns a list of items matching the typed text. Provides a cancellation token that\n            is marked as cancelled when the user changes the search text or selects a value from the list. \n            This can be used to cancel expensive asynchronous work occuring within the SearchFunc itself.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SearchFuncWithCancel",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SearchFunc",
            "TypeName": "System.Func<System.String, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>>>",
            "Documentation": "\n            <summary>\n            The SearchFunc returns a list of items matching the typed text\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SearchFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxItems",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Maximum items to display, defaults to 10.\n            A null value will display all items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxItems"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinCharacters",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Minimum characters to initiate a search\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MinCharacters"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ResetValueOnEmptyText",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Reset value if user deletes the text\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ResetValueOnEmptyText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectOnClick",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, clicking the text field will select (highlight) its contents.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectOnClick"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DebounceInterval",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Debounce interval in milliseconds.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DebounceInterval"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Documentation": "\n            <summary>\n            Optional presentation template for unselected items\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemSelectedTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Documentation": "\n            <summary>\n            Optional presentation template for the selected item\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemSelectedTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemDisabledTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Documentation": "\n            <summary>\n            Optional presentation template for disabled item\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemDisabledTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MoreItemsTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Optional presentation template for when more items were returned from the Search function than the MaxItems limit\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MoreItemsTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NoItemsTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Optional presentation template for when no items were returned from the Search function\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NoItemsTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ProgressIndicatorTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Optional template for progress indicator\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ProgressIndicatorTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ProgressIndicatorInPopoverTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Optional template for showing progress indicator inside the popover\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ProgressIndicatorInPopoverTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CoerceText",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            On drop-down close override Text with selected Value. This makes it clear to the user\n            which list value is currently selected and disallows incomplete values in Text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CoerceText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CoerceValue",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If user input is not found by the search func and CoerceValue is set to true the user input\n            will be applied to the Value which allows to validate it and display an error message.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CoerceValue"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemDisabledFunc",
            "TypeName": "System.Func<T, System.Boolean>",
            "Documentation": "\n            <summary>\n            Function to be invoked when checking whether an item should be disabled or not\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemDisabledFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsOpenChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            An event triggered when the state of IsOpen has changed\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsOpenChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectValueOnTab",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the currently selected item from the drop-down (if it is open) is selected.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectValueOnTab"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClearButtonClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event for clear button. Called after text and value has been cleared.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClearButtonClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be read-only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will take up the full width of its container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Immediate",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will update the Value immediately on typing.\n            If false, the Value is updated only on Enter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Immediate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableUnderLine",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will not have an underline.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableUnderLine"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HelperText will be displayed below the text field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon that will be used if Adornment is set to Start or End.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text that will be used if Adornment is set to Start or End, the Text overrides Icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Adornment if used. By default, it is set to None.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnlyValidateIfDirty",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The validation is only triggered if the user has changed the input value at least once. By default, it is false\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnlyValidateIfDirty"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The aria-label of the adornment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnAdornmentClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event if set and Adornment used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnAdornmentClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Counter",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            If set, will display the counter, value 0 will display current count but no stop count.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Counter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxLength",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Maximum number of characters that the input will accept\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxLength"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true the input will focus automatically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Lines",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n             A multiline input (textarea) will be shown, if set to more than one line.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Lines"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n             The text to be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextUpdateSuppression",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).\n            This solves issue #1012: Textfield swallowing chars when typing rapidly\n            If you need to update the input's text while it is focused you can set this parameter to false.\n            Note: on WASM text update suppression is not active, so this parameter has no effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextUpdateSuppression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "MudBlazor.InputMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Hints at the type of data that might be entered by the user while editing the input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Pattern",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression\n            Not Supported in multline input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Pattern"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text value changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnBlur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element loses focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnBlur",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInternalInputChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element changes internally its text value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInternalInputChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyDown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyDown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyDownPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyDownPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyPress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyPress",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyPressPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyPressPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyUp",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyUp",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyUpPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyUpPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Fired when the Value property changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The value of this input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Format",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Format"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<T, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<T>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudAutocomplete<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -90412465,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudAutocomplete<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudAutocomplete"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudAutocomplete<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PopoverClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for the popover, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PopoverClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AnchorOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Set the anchor origin point to determen where the popover will open from.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AnchorOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TransformOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the transform origin point for the popover.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TransformOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Direction",
            "TypeName": "MudBlazor.Direction",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Set the anchor origin point to determen where the popover will open from.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Direction"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OffsetX",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the Autocomplete menu will open either before or after the input (left/right).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OffsetX"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OffsetY",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the Autocomplete menu will open either before or after the input (top/bottom).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OffsetY"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact vertical padding will be applied to all Autocomplete items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OpenIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Open Autocomplete Icon\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OpenIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Close Autocomplete Icon\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxHeight",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The maximum height of the Autocomplete when it is open.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToStringFunc",
            "TypeName": "System.Func<T, System.String>",
            "Documentation": "\n            <summary>\n            Defines how values are displayed in the drop-down list\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToStringFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowProgressIndicator",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Whether to show the progress indicator. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowProgressIndicator"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ProgressIndicatorColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the progress indicator. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ProgressIndicatorColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SearchFuncWithCancel",
            "TypeName": "System.Func<System.String, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>>>",
            "Documentation": "\n            <summary>\n            Func that returns a list of items matching the typed text. Provides a cancellation token that\n            is marked as cancelled when the user changes the search text or selects a value from the list. \n            This can be used to cancel expensive asynchronous work occuring within the SearchFunc itself.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SearchFuncWithCancel",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SearchFunc",
            "TypeName": "System.Func<System.String, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>>>",
            "Documentation": "\n            <summary>\n            The SearchFunc returns a list of items matching the typed text\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SearchFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxItems",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Maximum items to display, defaults to 10.\n            A null value will display all items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxItems"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinCharacters",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Minimum characters to initiate a search\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MinCharacters"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ResetValueOnEmptyText",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Reset value if user deletes the text\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ResetValueOnEmptyText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectOnClick",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, clicking the text field will select (highlight) its contents.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectOnClick"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DebounceInterval",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Debounce interval in milliseconds.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DebounceInterval"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Documentation": "\n            <summary>\n            Optional presentation template for unselected items\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemSelectedTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Documentation": "\n            <summary>\n            Optional presentation template for the selected item\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemSelectedTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemDisabledTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Documentation": "\n            <summary>\n            Optional presentation template for disabled item\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemDisabledTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MoreItemsTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Optional presentation template for when more items were returned from the Search function than the MaxItems limit\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MoreItemsTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NoItemsTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Optional presentation template for when no items were returned from the Search function\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NoItemsTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ProgressIndicatorTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Optional template for progress indicator\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ProgressIndicatorTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ProgressIndicatorInPopoverTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Optional template for showing progress indicator inside the popover\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ProgressIndicatorInPopoverTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CoerceText",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            On drop-down close override Text with selected Value. This makes it clear to the user\n            which list value is currently selected and disallows incomplete values in Text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CoerceText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CoerceValue",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If user input is not found by the search func and CoerceValue is set to true the user input\n            will be applied to the Value which allows to validate it and display an error message.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CoerceValue"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemDisabledFunc",
            "TypeName": "System.Func<T, System.Boolean>",
            "Documentation": "\n            <summary>\n            Function to be invoked when checking whether an item should be disabled or not\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemDisabledFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsOpenChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            An event triggered when the state of IsOpen has changed\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsOpenChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectValueOnTab",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the currently selected item from the drop-down (if it is open) is selected.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectValueOnTab"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClearButtonClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event for clear button. Called after text and value has been cleared.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClearButtonClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be read-only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will take up the full width of its container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Immediate",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will update the Value immediately on typing.\n            If false, the Value is updated only on Enter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Immediate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableUnderLine",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will not have an underline.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableUnderLine"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HelperText will be displayed below the text field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon that will be used if Adornment is set to Start or End.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text that will be used if Adornment is set to Start or End, the Text overrides Icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Adornment if used. By default, it is set to None.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnlyValidateIfDirty",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The validation is only triggered if the user has changed the input value at least once. By default, it is false\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnlyValidateIfDirty"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The aria-label of the adornment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnAdornmentClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event if set and Adornment used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnAdornmentClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Counter",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            If set, will display the counter, value 0 will display current count but no stop count.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Counter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxLength",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Maximum number of characters that the input will accept\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxLength"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true the input will focus automatically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Lines",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n             A multiline input (textarea) will be shown, if set to more than one line.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Lines"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n             The text to be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextUpdateSuppression",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).\n            This solves issue #1012: Textfield swallowing chars when typing rapidly\n            If you need to update the input's text while it is focused you can set this parameter to false.\n            Note: on WASM text update suppression is not active, so this parameter has no effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextUpdateSuppression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "MudBlazor.InputMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Hints at the type of data that might be entered by the user while editing the input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Pattern",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression\n            Not Supported in multline input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Pattern"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text value changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnBlur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element loses focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnBlur",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInternalInputChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element changes internally its text value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInternalInputChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyDown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyDown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyDownPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyDownPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyPress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyPress",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyPressPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyPressPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyUp",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyUp",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyUpPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyUpPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Fired when the Value property changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The value of this input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Format",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Format"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<T, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<T>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudAutocomplete<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 730973438,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudAutocomplete<T>.ItemTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Optional presentation template for unselected items\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemTemplate",
            "ParentTag": "MudAutocomplete"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudAutocomplete<T>.ItemTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 210941380,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudAutocomplete<T>.ItemTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Optional presentation template for unselected items\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemTemplate",
            "ParentTag": "MudBlazor.MudAutocomplete"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudAutocomplete<T>.ItemTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1173613543,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudAutocomplete<T>.ItemSelectedTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Optional presentation template for the selected item\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemSelectedTemplate",
            "ParentTag": "MudAutocomplete"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemSelectedTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudAutocomplete<T>.ItemSelectedTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1117848058,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudAutocomplete<T>.ItemSelectedTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Optional presentation template for the selected item\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemSelectedTemplate",
            "ParentTag": "MudBlazor.MudAutocomplete"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemSelectedTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudAutocomplete<T>.ItemSelectedTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1340503987,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudAutocomplete<T>.ItemDisabledTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Optional presentation template for disabled item\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemDisabledTemplate",
            "ParentTag": "MudAutocomplete"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemDisabledTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudAutocomplete<T>.ItemDisabledTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1041100643,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudAutocomplete<T>.ItemDisabledTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Optional presentation template for disabled item\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemDisabledTemplate",
            "ParentTag": "MudBlazor.MudAutocomplete"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemDisabledTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudAutocomplete<T>.ItemDisabledTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 695556200,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudAutocomplete<T>.MoreItemsTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Optional presentation template for when more items were returned from the Search function than the MaxItems limit\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MoreItemsTemplate",
            "ParentTag": "MudAutocomplete"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudAutocomplete<T>.MoreItemsTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1902960895,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudAutocomplete<T>.MoreItemsTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Optional presentation template for when more items were returned from the Search function than the MaxItems limit\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MoreItemsTemplate",
            "ParentTag": "MudBlazor.MudAutocomplete"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudAutocomplete<T>.MoreItemsTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 785384688,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudAutocomplete<T>.NoItemsTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Optional presentation template for when no items were returned from the Search function\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NoItemsTemplate",
            "ParentTag": "MudAutocomplete"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudAutocomplete<T>.NoItemsTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 520636287,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudAutocomplete<T>.NoItemsTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Optional presentation template for when no items were returned from the Search function\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NoItemsTemplate",
            "ParentTag": "MudBlazor.MudAutocomplete"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudAutocomplete<T>.NoItemsTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1272407723,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudAutocomplete<T>.ProgressIndicatorTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Optional template for progress indicator\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ProgressIndicatorTemplate",
            "ParentTag": "MudAutocomplete"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudAutocomplete<T>.ProgressIndicatorTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1438332584,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudAutocomplete<T>.ProgressIndicatorTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Optional template for progress indicator\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ProgressIndicatorTemplate",
            "ParentTag": "MudBlazor.MudAutocomplete"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudAutocomplete<T>.ProgressIndicatorTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1645483565,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudAutocomplete<T>.ProgressIndicatorInPopoverTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Optional template for showing progress indicator inside the popover\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ProgressIndicatorInPopoverTemplate",
            "ParentTag": "MudAutocomplete"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudAutocomplete<T>.ProgressIndicatorInPopoverTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -713118117,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudAutocomplete<T>.ProgressIndicatorInPopoverTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Optional template for showing progress indicator inside the popover\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ProgressIndicatorInPopoverTemplate",
            "ParentTag": "MudBlazor.MudAutocomplete"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudAutocomplete<T>.ProgressIndicatorInPopoverTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -269571355,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudAvatar",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudAvatar"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to 0.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Rounded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to the themes default value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Rounded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Image",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Link to image, if set a image will be displayed instead of text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Image"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Alt",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set (and Image is also set), will add an alt property to the img element\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Alt"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Size of the MudAvatar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudAvatar"
        }
      },
      {
        "HashCode": 1984575693,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudAvatar",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudAvatar"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to 0.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Rounded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to the themes default value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Rounded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Image",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Link to image, if set a image will be displayed instead of text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Image"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Alt",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set (and Image is also set), will add an alt property to the img element\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Alt"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Size of the MudAvatar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudAvatar",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -533783518,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudAvatar.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudAvatar"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudAvatar.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -115961857,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudAvatar.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudAvatar"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudAvatar.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -385879943,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudAvatarGroup",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudAvatarGroup"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Spacing",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Spacing between avatars where 0 is none and 16 max.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Spacing"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outlined",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Outlines the grouped avatars to distinguish them, useful when avatars are the same color or uses images.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outlined"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OutlineColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the color of the outline if its used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OutlineColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxElevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Elevation of the MaxAvatar the higher the number, the heavier the drop-shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxElevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxSquare",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, MaxAvatar border-radius is set to 0.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxSquare"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxRounded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, MaxAvatar will be rounded.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxRounded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Color for the MaxAvatar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Size of the MaxAvatar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxVariant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant of the MaxAvatar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxVariant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Max",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Max avatars to show before showing +x avatar, default value 0 has no max.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Max"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxAvatarClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom class/classes for MaxAvatar\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxAvatarClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudAvatarGroup"
        }
      },
      {
        "HashCode": 1787816272,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudAvatarGroup",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudAvatarGroup"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Spacing",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Spacing between avatars where 0 is none and 16 max.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Spacing"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outlined",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Outlines the grouped avatars to distinguish them, useful when avatars are the same color or uses images.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outlined"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OutlineColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the color of the outline if its used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OutlineColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxElevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Elevation of the MaxAvatar the higher the number, the heavier the drop-shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxElevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxSquare",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, MaxAvatar border-radius is set to 0.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxSquare"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxRounded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, MaxAvatar will be rounded.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxRounded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Color for the MaxAvatar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Size of the MaxAvatar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxVariant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant of the MaxAvatar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxVariant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Max",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Max avatars to show before showing +x avatar, default value 0 has no max.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Max"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxAvatarClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom class/classes for MaxAvatar\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxAvatarClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudAvatarGroup",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 622362970,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudAvatarGroup.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudAvatarGroup"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudAvatarGroup.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 383769303,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudAvatarGroup.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudAvatarGroup"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudAvatarGroup.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1451584371,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudBadge",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBadge"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Origin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The placement of the badge.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Origin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Visible",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The visibility of the badge.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Visible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the badge.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Bottom",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Aligns the badge to bottom.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Bottom"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Left",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Aligns the badge to left.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Left"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Start",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Aligns the badge to the start (Left in LTR and right in RTL).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Start"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dot",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Reduces the size of the badge and hide any of its content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dot"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Overlap",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Overlaps the childcontent on top of the content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Overlap"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Bordered",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Applies a border around the badge.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Bordered"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the Icon to use in the badge.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Max",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Max value to show when content is integer type.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Max"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Content",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Content you want inside the badge. Supported types are string and integer.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Content"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BadgeClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Badge class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BadgeClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component, the content that the badge will apply to.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudBadge"
        }
      },
      {
        "HashCode": 1660557157,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudBadge",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudBadge"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Origin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The placement of the badge.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Origin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Visible",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The visibility of the badge.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Visible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the badge.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Bottom",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Aligns the badge to bottom.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Bottom"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Left",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Aligns the badge to left.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Left"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Start",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Aligns the badge to the start (Left in LTR and right in RTL).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Start"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dot",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Reduces the size of the badge and hide any of its content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dot"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Overlap",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Overlaps the childcontent on top of the content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Overlap"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Bordered",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Applies a border around the badge.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Bordered"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the Icon to use in the badge.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Max",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Max value to show when content is integer type.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Max"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Content",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Content you want inside the badge. Supported types are string and integer.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Content"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BadgeClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Badge class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BadgeClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component, the content that the badge will apply to.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudBadge",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1553922839,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudBadge.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component, the content that the badge will apply to.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBadge"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudBadge.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1200217099,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudBadge.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component, the content that the badge will apply to.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudBadge"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudBadge.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -231145303,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudBreadcrumbs",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBreadcrumbs"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.List<MudBlazor.BreadcrumbItem>",
            "Documentation": "\n            <summary>\n            A list of breadcrumb items/links.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Items"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Separator",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies the separator between the items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Separator"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SeparatorTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Specifies a RenderFragment to use as the separator.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SeparatorTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.BreadcrumbItem>",
            "Documentation": "\n            <summary>\n            Specifies a RenderFragment to use as the items' contents.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxItems",
            "TypeName": "System.Byte?",
            "Documentation": "\n            <summary>\n            Controls when (and if) the breadcrumbs will automatically collapse.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxItems"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpanderIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom expander icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpanderIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudBreadcrumbs"
        }
      },
      {
        "HashCode": -1460557825,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudBreadcrumbs",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudBreadcrumbs"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.List<MudBlazor.BreadcrumbItem>",
            "Documentation": "\n            <summary>\n            A list of breadcrumb items/links.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Items"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Separator",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies the separator between the items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Separator"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SeparatorTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Specifies a RenderFragment to use as the separator.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SeparatorTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.BreadcrumbItem>",
            "Documentation": "\n            <summary>\n            Specifies a RenderFragment to use as the items' contents.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxItems",
            "TypeName": "System.Byte?",
            "Documentation": "\n            <summary>\n            Controls when (and if) the breadcrumbs will automatically collapse.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxItems"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpanderIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom expander icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpanderIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudBreadcrumbs",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1958958690,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudBreadcrumbs.SeparatorTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Specifies a RenderFragment to use as the separator.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "SeparatorTemplate",
            "ParentTag": "MudBreadcrumbs"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudBreadcrumbs.SeparatorTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 283972349,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudBreadcrumbs.SeparatorTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Specifies a RenderFragment to use as the separator.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "SeparatorTemplate",
            "ParentTag": "MudBlazor.MudBreadcrumbs"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudBreadcrumbs.SeparatorTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1244884334,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudBreadcrumbs.ItemTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Specifies a RenderFragment to use as the items' contents.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemTemplate",
            "ParentTag": "MudBreadcrumbs"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudBreadcrumbs.ItemTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1276935390,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudBreadcrumbs.ItemTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Specifies a RenderFragment to use as the items' contents.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemTemplate",
            "ParentTag": "MudBlazor.MudBreadcrumbs"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudBreadcrumbs.ItemTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1642690048,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudBreakpointProvider",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBreakpointProvider"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OnBreakpointChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.Breakpoint>",
            "Metadata": {
              "Common.PropertyName": "OnBreakpointChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudBreakpointProvider"
        }
      },
      {
        "HashCode": -1746951572,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudBreakpointProvider",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudBreakpointProvider"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OnBreakpointChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.Breakpoint>",
            "Metadata": {
              "Common.PropertyName": "OnBreakpointChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudBreakpointProvider",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -267021337,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudBreakpointProvider.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBreakpointProvider"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudBreakpointProvider.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1115208284,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudBreakpointProvider.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudBreakpointProvider"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudBreakpointProvider.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 615017711,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudButtonGroup",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudButtonGroup"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OverrideStyles",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the button group will override the styles of the individual buttons.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OverrideStyles"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "VerticalAlign",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the button group will be displayed vertically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VerticalAlign"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableElevation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no drop-shadow will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableElevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The size of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudButtonGroup"
        }
      },
      {
        "HashCode": 401941047,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudButtonGroup",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudButtonGroup"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OverrideStyles",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the button group will override the styles of the individual buttons.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OverrideStyles"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "VerticalAlign",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the button group will be displayed vertically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VerticalAlign"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableElevation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no drop-shadow will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableElevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The size of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudButtonGroup",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -786847198,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudButtonGroup.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudButtonGroup"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudButtonGroup.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -480222430,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudButtonGroup.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudButtonGroup"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudButtonGroup.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2140862033,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudButton",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudButton"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "StartIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon placed before the text if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "StartIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EndIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon placed after the text if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EndIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon class names, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Size of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the button will take up 100% of available width.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HtmlTag",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HTML element that will be rendered in the root by the component\n            By default, is a button\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HtmlTag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ButtonType",
            "TypeName": "MudBlazor.ButtonType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The button Type (Button, Submit, Refresh)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ButtonType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set to a URL, clicking the button will open the referenced document. Use Target to specify where\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Link",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set to a URL, clicking the button will open the referenced document. Use Target to specify where (Obsolete replaced by Href)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Link"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Target",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The target attribute specifies where to open the link, if Link is specified. Possible values: _blank | _self | _parent | _top | <i>framename</i>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Target"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the button will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableElevation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no drop-shadow will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableElevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Command",
            "TypeName": "System.Windows.Input.ICommand",
            "Documentation": "\n            <summary>\n            Command executed when the user clicks on an element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Command"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommandParameter",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Command parameter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommandParameter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudButton"
        }
      },
      {
        "HashCode": -1204502085,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudButton",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudButton"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "StartIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon placed before the text if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "StartIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EndIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon placed after the text if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EndIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon class names, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Size of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the button will take up 100% of available width.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HtmlTag",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HTML element that will be rendered in the root by the component\n            By default, is a button\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HtmlTag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ButtonType",
            "TypeName": "MudBlazor.ButtonType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The button Type (Button, Submit, Refresh)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ButtonType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set to a URL, clicking the button will open the referenced document. Use Target to specify where\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Link",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set to a URL, clicking the button will open the referenced document. Use Target to specify where (Obsolete replaced by Href)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Link"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Target",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The target attribute specifies where to open the link, if Link is specified. Possible values: _blank | _self | _parent | _top | <i>framename</i>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Target"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the button will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableElevation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no drop-shadow will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableElevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Command",
            "TypeName": "System.Windows.Input.ICommand",
            "Documentation": "\n            <summary>\n            Command executed when the user clicks on an element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Command"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommandParameter",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Command parameter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommandParameter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudButton",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -870134693,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudButton.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudButton"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudButton.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -471425974,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudButton.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudButton"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudButton.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 887585185,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudFab",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudFab"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Size of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If applied Icon will be added at the start of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "StartIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If applied Icon will be added at the start of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "StartIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EndIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If applied Icon will be added at the end of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EndIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The size of the icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If applied the text will be added to the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Title of the icon used for accessibility.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HtmlTag",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HTML element that will be rendered in the root by the component\n            By default, is a button\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HtmlTag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ButtonType",
            "TypeName": "MudBlazor.ButtonType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The button Type (Button, Submit, Refresh)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ButtonType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set to a URL, clicking the button will open the referenced document. Use Target to specify where\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Link",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set to a URL, clicking the button will open the referenced document. Use Target to specify where (Obsolete replaced by Href)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Link"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Target",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The target attribute specifies where to open the link, if Link is specified. Possible values: _blank | _self | _parent | _top | <i>framename</i>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Target"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the button will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableElevation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no drop-shadow will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableElevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Command",
            "TypeName": "System.Windows.Input.ICommand",
            "Documentation": "\n            <summary>\n            Command executed when the user clicks on an element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Command"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommandParameter",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Command parameter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommandParameter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudFab"
        }
      },
      {
        "HashCode": 1414452249,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudFab",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudFab"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Size of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If applied Icon will be added at the start of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "StartIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If applied Icon will be added at the start of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "StartIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EndIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If applied Icon will be added at the end of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EndIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The size of the icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If applied the text will be added to the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Title of the icon used for accessibility.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HtmlTag",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HTML element that will be rendered in the root by the component\n            By default, is a button\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HtmlTag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ButtonType",
            "TypeName": "MudBlazor.ButtonType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The button Type (Button, Submit, Refresh)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ButtonType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set to a URL, clicking the button will open the referenced document. Use Target to specify where\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Link",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set to a URL, clicking the button will open the referenced document. Use Target to specify where (Obsolete replaced by Href)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Link"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Target",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The target attribute specifies where to open the link, if Link is specified. Possible values: _blank | _self | _parent | _top | <i>framename</i>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Target"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the button will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableElevation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no drop-shadow will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableElevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Command",
            "TypeName": "System.Windows.Input.ICommand",
            "Documentation": "\n            <summary>\n            Command executed when the user clicks on an element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Command"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommandParameter",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Command parameter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommandParameter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudFab",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1852389121,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudIconButton",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudIconButton"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Icon that will be used in the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Title of the icon used for accessibility.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Size of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Edge",
            "TypeName": "MudBlazor.Edge",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            If set uses a negative margin.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Edge"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component, only shows if Icon is null or Empty.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HtmlTag",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HTML element that will be rendered in the root by the component\n            By default, is a button\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HtmlTag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ButtonType",
            "TypeName": "MudBlazor.ButtonType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The button Type (Button, Submit, Refresh)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ButtonType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set to a URL, clicking the button will open the referenced document. Use Target to specify where\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Link",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set to a URL, clicking the button will open the referenced document. Use Target to specify where (Obsolete replaced by Href)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Link"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Target",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The target attribute specifies where to open the link, if Link is specified. Possible values: _blank | _self | _parent | _top | <i>framename</i>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Target"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the button will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableElevation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no drop-shadow will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableElevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Command",
            "TypeName": "System.Windows.Input.ICommand",
            "Documentation": "\n            <summary>\n            Command executed when the user clicks on an element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Command"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommandParameter",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Command parameter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommandParameter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudIconButton"
        }
      },
      {
        "HashCode": 2023125443,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudIconButton",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudIconButton"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Icon that will be used in the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Title of the icon used for accessibility.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Size of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Edge",
            "TypeName": "MudBlazor.Edge",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            If set uses a negative margin.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Edge"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component, only shows if Icon is null or Empty.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HtmlTag",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HTML element that will be rendered in the root by the component\n            By default, is a button\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HtmlTag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ButtonType",
            "TypeName": "MudBlazor.ButtonType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The button Type (Button, Submit, Refresh)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ButtonType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set to a URL, clicking the button will open the referenced document. Use Target to specify where\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Link",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set to a URL, clicking the button will open the referenced document. Use Target to specify where (Obsolete replaced by Href)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Link"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Target",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The target attribute specifies where to open the link, if Link is specified. Possible values: _blank | _self | _parent | _top | <i>framename</i>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Target"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the button will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableElevation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no drop-shadow will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableElevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Command",
            "TypeName": "System.Windows.Input.ICommand",
            "Documentation": "\n            <summary>\n            Command executed when the user clicks on an element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Command"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommandParameter",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Command parameter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommandParameter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudIconButton",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1161072180,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudIconButton.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component, only shows if Icon is null or Empty.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudIconButton"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudIconButton.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 866869006,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudIconButton.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component, only shows if Icon is null or Empty.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudIconButton"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudIconButton.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 878379764,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudToggleIconButton",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudToggleIconButton"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Toggled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The toggled value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Toggled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToggledChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Fires whenever toggled is changed. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToggledChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Icon that will be used in the untoggled state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToggledIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Icon that will be used in the toggled state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToggledIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Title of the icon used for accessibility.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToggledTitle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Title used in toggled state, if different.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToggledTitle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon in the untoggled state. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToggledColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon in the toggled state. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToggledColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Size of the component in the untoggled state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToggledSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Size of the component in the toggled state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToggledSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Edge",
            "TypeName": "MudBlazor.Edge",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            If set uses a negative margin.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Edge"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the button will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudToggleIconButton"
        }
      },
      {
        "HashCode": -853799915,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudToggleIconButton",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudToggleIconButton"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Toggled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The toggled value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Toggled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToggledChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Fires whenever toggled is changed. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToggledChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Icon that will be used in the untoggled state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToggledIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Icon that will be used in the toggled state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToggledIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Title of the icon used for accessibility.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToggledTitle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Title used in toggled state, if different.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToggledTitle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon in the untoggled state. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToggledColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon in the toggled state. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToggledColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Size of the component in the untoggled state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToggledSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Size of the component in the toggled state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToggledSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Edge",
            "TypeName": "MudBlazor.Edge",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            If set uses a negative margin.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Edge"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the button will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudToggleIconButton",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1271692966,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudCard",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudCard"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow. 0 for no shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to 0.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outlined",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, card will be outlined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outlined"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudCard"
        }
      },
      {
        "HashCode": 392778162,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudCard",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudCard"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow. 0 for no shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to 0.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outlined",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, card will be outlined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outlined"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudCard",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 918767310,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCard.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudCard"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCard.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 2063722531,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCard.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudCard"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCard.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2126925271,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudCardActions",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudCardActions"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudCardActions"
        }
      },
      {
        "HashCode": -1407964499,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudCardActions",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudCardActions"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudCardActions",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1449924907,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCardActions.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudCardActions"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCardActions.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 2089916810,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCardActions.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudCardActions"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCardActions.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 890148118,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudCardContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudCardContent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudCardContent"
        }
      },
      {
        "HashCode": 411943572,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudCardContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudCardContent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudCardContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1313675299,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCardContent.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudCardContent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCardContent.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 536509937,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCardContent.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudCardContent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCardContent.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 672831273,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudCardHeader",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudCardHeader"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "CardHeaderAvatar",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            If used renders child content of the CardHeaderAvatar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CardHeaderAvatar",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CardHeaderContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            If used renders child content of the CardHeaderContent.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CardHeaderContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CardHeaderActions",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            If used renders child content of the CardHeaderActions.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CardHeaderActions",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Optional child content\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudCardHeader"
        }
      },
      {
        "HashCode": 1143165852,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudCardHeader",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudCardHeader"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "CardHeaderAvatar",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            If used renders child content of the CardHeaderAvatar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CardHeaderAvatar",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CardHeaderContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            If used renders child content of the CardHeaderContent.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CardHeaderContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CardHeaderActions",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            If used renders child content of the CardHeaderActions.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CardHeaderActions",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Optional child content\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudCardHeader",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 967162702,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCardHeader.CardHeaderAvatar",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            If used renders child content of the CardHeaderAvatar.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CardHeaderAvatar",
            "ParentTag": "MudCardHeader"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCardHeader.CardHeaderAvatar",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1069003654,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCardHeader.CardHeaderAvatar",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            If used renders child content of the CardHeaderAvatar.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CardHeaderAvatar",
            "ParentTag": "MudBlazor.MudCardHeader"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCardHeader.CardHeaderAvatar",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -886499495,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCardHeader.CardHeaderContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            If used renders child content of the CardHeaderContent.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CardHeaderContent",
            "ParentTag": "MudCardHeader"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCardHeader.CardHeaderContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1890371477,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCardHeader.CardHeaderContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            If used renders child content of the CardHeaderContent.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CardHeaderContent",
            "ParentTag": "MudBlazor.MudCardHeader"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCardHeader.CardHeaderContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1971010085,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCardHeader.CardHeaderActions",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            If used renders child content of the CardHeaderActions.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CardHeaderActions",
            "ParentTag": "MudCardHeader"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCardHeader.CardHeaderActions",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 681288805,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCardHeader.CardHeaderActions",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            If used renders child content of the CardHeaderActions.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CardHeaderActions",
            "ParentTag": "MudBlazor.MudCardHeader"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCardHeader.CardHeaderActions",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 318993317,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCardHeader.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Optional child content\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudCardHeader"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCardHeader.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1114371605,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCardHeader.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Optional child content\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudCardHeader"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCardHeader.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 649755513,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudCardMedia",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudCardMedia"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Title of the image used for accessibility.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Image",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies the path to the image.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Image"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Specifies the height of the image in px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudCardMedia"
        }
      },
      {
        "HashCode": 1497221292,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudCardMedia",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudCardMedia"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Title of the image used for accessibility.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Image",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies the path to the image.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Image"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Specifies the height of the image in px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudCardMedia",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 656689027,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudCarousel<TData>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudCarousel"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TData",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TData for the MudBlazor.MudCarousel<TData> component.",
            "Metadata": {
              "Common.PropertyName": "TData",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowArrows",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or Sets if 'Next' and 'Previous' arrows must be visible\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowArrows"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ArrowsPosition",
            "TypeName": "MudBlazor.Position",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the position of the arrows. By default, the position is the Center position\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ArrowsPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowBullets",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or Sets if bar with Bullets must be visible\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowBullets"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BulletsPosition",
            "TypeName": "MudBlazor.Position",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the position of the bullets. By default, the position is the Bottom position\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BulletsPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BulletsColor",
            "TypeName": "MudBlazor.Color?",
            "Documentation": "\n            <summary>\n            Gets or Sets the Bullets color.\n            If not set, the color is determined based on the <see cref=\"P:MudBlazor.MudCarouselItem.Color\" /> property of the active child.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BulletsColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowDelimiters",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or Sets if bottom bar with Delimiters must be visible.\n            Deprecated, use ShowBullets instead.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowDelimiters"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DelimitersColor",
            "TypeName": "MudBlazor.Color?",
            "Documentation": "\n            <summary>\n            Gets or Sets the Delimiters color.\n            If not set, the color is determined based on the <see cref=\"P:MudBlazor.MudCarouselItem.Color\" /> property of the active child.\n            Deprecated, use BulletsColor instead.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DelimitersColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoCycle",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or Sets automatic cycle on item collection.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoCycle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoCycleTime",
            "TypeName": "System.TimeSpan",
            "Documentation": "\n            <summary>\n            Gets or Sets the Auto Cycle time\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoCycleTime"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NavigationButtonsClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or Sets custom class(es) for 'Next' and 'Previous' arrows\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NavigationButtonsClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BulletsClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or Sets custom class(es) for Bullets buttons\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BulletsClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DelimitersClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or Sets custom class(es) for Delimiters buttons.\n            Deprecated, use BulletsClass instead.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DelimitersClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PreviousIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom previous navigation icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PreviousIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CheckedIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom selected bullet icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CheckedIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UncheckedIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom unselected bullet icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UncheckedIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NextIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom next navigation icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NextIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NextButtonTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or Sets the Template for the Left Arrow\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NextButtonTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PreviousButtonTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or Sets the Template for the Right Arrow\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PreviousButtonTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BulletTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<System.Boolean>",
            "Documentation": "\n            <summary>\n            Gets or Sets the Template for Bullets\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BulletTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EnableSwipeGesture",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or Sets if swipe gestures are allowed for touch devices.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EnableSwipeGesture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DelimiterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<System.Boolean>",
            "Documentation": "\n            <summary>\n            Gets or Sets the Template for Delimiters.\n            Deprecated, use BulletsTemplate instead.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DelimiterTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemsSource",
            "TypeName": "System.Collections.Generic.IEnumerable<TData>",
            "Documentation": "\n            <summary>\n            Items Collection - For databinding usage\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemsSource",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TData>",
            "Documentation": "\n            <summary>\n            Template for each Item in ItemsSource collection\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Collection of T\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndex",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Selected Item's index\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndexChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Metadata": {
              "Common.PropertyName": "SelectedIndexChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudCarousel<TData>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -1646096723,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudCarousel<TData>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudCarousel"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TData",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TData for the MudBlazor.MudCarousel<TData> component.",
            "Metadata": {
              "Common.PropertyName": "TData",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowArrows",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or Sets if 'Next' and 'Previous' arrows must be visible\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowArrows"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ArrowsPosition",
            "TypeName": "MudBlazor.Position",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the position of the arrows. By default, the position is the Center position\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ArrowsPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowBullets",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or Sets if bar with Bullets must be visible\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowBullets"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BulletsPosition",
            "TypeName": "MudBlazor.Position",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the position of the bullets. By default, the position is the Bottom position\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BulletsPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BulletsColor",
            "TypeName": "MudBlazor.Color?",
            "Documentation": "\n            <summary>\n            Gets or Sets the Bullets color.\n            If not set, the color is determined based on the <see cref=\"P:MudBlazor.MudCarouselItem.Color\" /> property of the active child.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BulletsColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowDelimiters",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or Sets if bottom bar with Delimiters must be visible.\n            Deprecated, use ShowBullets instead.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowDelimiters"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DelimitersColor",
            "TypeName": "MudBlazor.Color?",
            "Documentation": "\n            <summary>\n            Gets or Sets the Delimiters color.\n            If not set, the color is determined based on the <see cref=\"P:MudBlazor.MudCarouselItem.Color\" /> property of the active child.\n            Deprecated, use BulletsColor instead.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DelimitersColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoCycle",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or Sets automatic cycle on item collection.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoCycle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoCycleTime",
            "TypeName": "System.TimeSpan",
            "Documentation": "\n            <summary>\n            Gets or Sets the Auto Cycle time\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoCycleTime"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NavigationButtonsClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or Sets custom class(es) for 'Next' and 'Previous' arrows\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NavigationButtonsClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BulletsClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or Sets custom class(es) for Bullets buttons\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BulletsClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DelimitersClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or Sets custom class(es) for Delimiters buttons.\n            Deprecated, use BulletsClass instead.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DelimitersClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PreviousIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom previous navigation icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PreviousIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CheckedIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom selected bullet icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CheckedIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UncheckedIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom unselected bullet icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UncheckedIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NextIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom next navigation icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NextIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NextButtonTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or Sets the Template for the Left Arrow\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NextButtonTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PreviousButtonTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Gets or Sets the Template for the Right Arrow\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PreviousButtonTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BulletTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<System.Boolean>",
            "Documentation": "\n            <summary>\n            Gets or Sets the Template for Bullets\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BulletTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EnableSwipeGesture",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or Sets if swipe gestures are allowed for touch devices.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EnableSwipeGesture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DelimiterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<System.Boolean>",
            "Documentation": "\n            <summary>\n            Gets or Sets the Template for Delimiters.\n            Deprecated, use BulletsTemplate instead.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DelimiterTemplate",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemsSource",
            "TypeName": "System.Collections.Generic.IEnumerable<TData>",
            "Documentation": "\n            <summary>\n            Items Collection - For databinding usage\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemsSource",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TData>",
            "Documentation": "\n            <summary>\n            Template for each Item in ItemsSource collection\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Collection of T\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndex",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Selected Item's index\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndexChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Metadata": {
              "Common.PropertyName": "SelectedIndexChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudCarousel<TData>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1264543298,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCarousel<TData>.NextButtonTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Gets or Sets the Template for the Left Arrow\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NextButtonTemplate",
            "ParentTag": "MudCarousel"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCarousel<TData>.NextButtonTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1420975562,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCarousel<TData>.NextButtonTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Gets or Sets the Template for the Left Arrow\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NextButtonTemplate",
            "ParentTag": "MudBlazor.MudCarousel"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCarousel<TData>.NextButtonTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 593807454,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCarousel<TData>.PreviousButtonTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Gets or Sets the Template for the Right Arrow\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PreviousButtonTemplate",
            "ParentTag": "MudCarousel"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCarousel<TData>.PreviousButtonTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1091301634,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCarousel<TData>.PreviousButtonTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Gets or Sets the Template for the Right Arrow\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PreviousButtonTemplate",
            "ParentTag": "MudBlazor.MudCarousel"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCarousel<TData>.PreviousButtonTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2138360332,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCarousel<TData>.BulletTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Gets or Sets the Template for Bullets\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BulletTemplate",
            "ParentTag": "MudCarousel"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'BulletTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCarousel<TData>.BulletTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -403627996,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCarousel<TData>.BulletTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Gets or Sets the Template for Bullets\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BulletTemplate",
            "ParentTag": "MudBlazor.MudCarousel"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'BulletTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCarousel<TData>.BulletTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 509837152,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCarousel<TData>.DelimiterTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Gets or Sets the Template for Delimiters.\n            Deprecated, use BulletsTemplate instead.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "DelimiterTemplate",
            "ParentTag": "MudCarousel"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'DelimiterTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCarousel<TData>.DelimiterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1822168870,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCarousel<TData>.DelimiterTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Gets or Sets the Template for Delimiters.\n            Deprecated, use BulletsTemplate instead.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "DelimiterTemplate",
            "ParentTag": "MudBlazor.MudCarousel"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'DelimiterTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCarousel<TData>.DelimiterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2025032705,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCarousel<TData>.ItemTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Template for each Item in ItemsSource collection\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemTemplate",
            "ParentTag": "MudCarousel"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCarousel<TData>.ItemTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1007356741,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCarousel<TData>.ItemTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Template for each Item in ItemsSource collection\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemTemplate",
            "ParentTag": "MudBlazor.MudCarousel"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCarousel<TData>.ItemTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -26412447,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCarousel<TData>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Collection of T\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudCarousel"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCarousel<TData>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1913202994,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCarousel<TData>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Collection of T\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudCarousel"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCarousel<TData>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 255901583,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudCarouselItem",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudCarouselItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Transition",
            "TypeName": "MudBlazor.Transition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The transition effect of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Transition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CustomTransitionEnter",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of custom transition on entrance time\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CustomTransitionEnter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CustomTransitionExit",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of custom transition on exiting time\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CustomTransitionExit"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudCarouselItem"
        }
      },
      {
        "HashCode": 42336176,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudCarouselItem",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudCarouselItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Transition",
            "TypeName": "MudBlazor.Transition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The transition effect of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Transition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CustomTransitionEnter",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of custom transition on entrance time\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CustomTransitionEnter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CustomTransitionExit",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of custom transition on exiting time\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CustomTransitionExit"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudCarouselItem",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1988195510,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCarouselItem.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudCarouselItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCarouselItem.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -875501933,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCarouselItem.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudCarouselItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCarouselItem.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1674143398,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudCheckBox<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudCheckBox"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudCheckBox<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UnCheckedColor",
            "TypeName": "MudBlazor.Color?",
            "Documentation": "\n            <summary>\n            The base color of the component in its none active/unchecked state. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UnCheckedColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The text/label will be displayed next to the checkbox if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelPosition",
            "TypeName": "MudBlazor.LabelPosition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The position of the text/label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyboardEnabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the checkbox can be controlled with the keyboard.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyboardEnabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact padding will be applied.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Size of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CheckedIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom checked icon, leave null for default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CheckedIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UncheckedIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom unchecked icon, leave null for default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UncheckedIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IndeterminateIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom indeterminate icon, leave null for default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IndeterminateIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TriState",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Define if the checkbox can cycle again through indeterminate status.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TriState"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be read-only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Checked",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The state of the component\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Checked",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "StopClickPropagation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true will prevent the click from bubbling up the event tree.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "StopClickPropagation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CheckedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Fired when Checked changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CheckedChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<T, System.Boolean?>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<T>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudCheckBox<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -727115946,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudCheckBox<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudCheckBox"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudCheckBox<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UnCheckedColor",
            "TypeName": "MudBlazor.Color?",
            "Documentation": "\n            <summary>\n            The base color of the component in its none active/unchecked state. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UnCheckedColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The text/label will be displayed next to the checkbox if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelPosition",
            "TypeName": "MudBlazor.LabelPosition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The position of the text/label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyboardEnabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the checkbox can be controlled with the keyboard.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyboardEnabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact padding will be applied.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Size of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CheckedIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom checked icon, leave null for default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CheckedIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UncheckedIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom unchecked icon, leave null for default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UncheckedIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IndeterminateIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom indeterminate icon, leave null for default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IndeterminateIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TriState",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Define if the checkbox can cycle again through indeterminate status.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TriState"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be read-only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Checked",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The state of the component\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Checked",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "StopClickPropagation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true will prevent the click from bubbling up the event tree.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "StopClickPropagation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CheckedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Fired when Checked changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CheckedChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<T, System.Boolean?>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<T>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudCheckBox<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1326809848,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCheckBox<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudCheckBox"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCheckBox<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 889759047,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCheckBox<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudCheckBox"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCheckBox<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 196456112,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudChipSet",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudChipSet"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MultiSelection",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Allows to select more than one chip.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MultiSelection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Mandatory",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Will not allow to deselect the selected chip in single selection mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Mandatory"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AllClosable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Will make all chips closable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AllClosable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Filter",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n             Will show a check-mark for the selected components.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Filter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n             Will make all chips read only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedChip",
            "TypeName": "MudBlazor.MudChip",
            "Documentation": "\n            <summary>\n            The currently selected chip in Choice mode\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedChipChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.MudChip>",
            "Documentation": "\n            <summary>\n            Called when the selected chip changes, in Choice mode\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedChipChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedChips",
            "TypeName": "MudBlazor.MudChip[]",
            "Documentation": "\n            <summary>\n            The currently selected chips in Filter mode\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedChips"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Comparer",
            "TypeName": "System.Collections.Generic.IEqualityComparer<System.Object>",
            "Documentation": "\n            <summary>\n            The Comparer to use for comparing selected values internally.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Comparer"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedChipsChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.MudChip[]>",
            "Documentation": "\n            <summary>\n            Called when the selection changed, in Filter mode\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedChipsChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedValues",
            "TypeName": "System.Collections.Generic.ICollection<System.Object>",
            "Documentation": "\n            <summary>\n            The current selected value.\n            Note: make the list Clickable for item selection to work.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedValues"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedValuesChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.ICollection<System.Object>>",
            "Documentation": "\n            <summary>\n            Called whenever the selection changed\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedValuesChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClose",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.MudChip>",
            "Documentation": "\n            <summary>\n            Called when a Chip was deleted (by click on the close icon)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClose",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudChipSet"
        }
      },
      {
        "HashCode": -1941165021,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudChipSet",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudChipSet"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MultiSelection",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Allows to select more than one chip.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MultiSelection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Mandatory",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Will not allow to deselect the selected chip in single selection mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Mandatory"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AllClosable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Will make all chips closable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AllClosable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Filter",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n             Will show a check-mark for the selected components.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Filter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n             Will make all chips read only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedChip",
            "TypeName": "MudBlazor.MudChip",
            "Documentation": "\n            <summary>\n            The currently selected chip in Choice mode\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedChip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedChipChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.MudChip>",
            "Documentation": "\n            <summary>\n            Called when the selected chip changes, in Choice mode\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedChipChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedChips",
            "TypeName": "MudBlazor.MudChip[]",
            "Documentation": "\n            <summary>\n            The currently selected chips in Filter mode\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedChips"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Comparer",
            "TypeName": "System.Collections.Generic.IEqualityComparer<System.Object>",
            "Documentation": "\n            <summary>\n            The Comparer to use for comparing selected values internally.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Comparer"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedChipsChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.MudChip[]>",
            "Documentation": "\n            <summary>\n            Called when the selection changed, in Filter mode\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedChipsChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedValues",
            "TypeName": "System.Collections.Generic.ICollection<System.Object>",
            "Documentation": "\n            <summary>\n            The current selected value.\n            Note: make the list Clickable for item selection to work.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedValues"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedValuesChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.ICollection<System.Object>>",
            "Documentation": "\n            <summary>\n            Called whenever the selection changed\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedValuesChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClose",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.MudChip>",
            "Documentation": "\n            <summary>\n            Called when a Chip was deleted (by click on the close icon)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClose",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudChipSet",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 87569167,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudChipSet.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudChipSet"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudChipSet.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 2068105116,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudChipSet.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudChipSet"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudChipSet.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1103760133,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudChip",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudChip"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The size of the button. small is equivalent to the dense button styling.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The selected color to use when selected, only works together with ChipSet, Color.Inherit for default value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Avatar",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Avatar Icon, Overrides the regular Icon if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Avatar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AvatarClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Avatar CSS Class, appends to Chips default avatar classes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AvatarClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Removes circle edges and applies theme default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the chip will be displayed in disabled state and no events possible.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the Icon to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CheckedIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom checked icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CheckedIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Overrides the default close icon, only shown if OnClose is set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect, ripple effect is only applied to clickable chips.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Link",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set to a URL, clicking the button will open the referenced document. Use Target to specify where (Obsolete replaced by Href)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Link"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set to a URL, clicking the button will open the referenced document. Use Target to specify where\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Target",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The target attribute specifies where to open the link, if Href is specified. Possible values: _blank | _self | _parent | _top | <i>framename</i>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Target"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A string you want to associate with the chip. If the ChildContent is not set this will be shown as chip text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A value that should be managed in the SelectedValues collection.\n            Note: do not change the value during the chip's lifetime\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ForceLoad",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, force browser to redirect outside component router-space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ForceLoad"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Default",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            If true, this chip is selected by default if used in a ChipSet. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Default"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Command",
            "TypeName": "System.Windows.Input.ICommand",
            "Documentation": "\n            <summary>\n            Command executed when the user clicks on an element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Command"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommandParameter",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Command parameter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommandParameter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Chip click event, if set the chip focus, hover and click effects are applied.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClose",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.MudChip>",
            "Documentation": "\n            <summary>\n            Chip delete event, if set the delete icon will be visible.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClose",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudChip"
        }
      },
      {
        "HashCode": -2075619926,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudChip",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudChip"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The size of the button. small is equivalent to the dense button styling.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The selected color to use when selected, only works together with ChipSet, Color.Inherit for default value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Avatar",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Avatar Icon, Overrides the regular Icon if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Avatar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AvatarClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Avatar CSS Class, appends to Chips default avatar classes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AvatarClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Removes circle edges and applies theme default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the chip will be displayed in disabled state and no events possible.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the Icon to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CheckedIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom checked icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CheckedIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Overrides the default close icon, only shown if OnClose is set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect, ripple effect is only applied to clickable chips.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Link",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set to a URL, clicking the button will open the referenced document. Use Target to specify where (Obsolete replaced by Href)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Link"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set to a URL, clicking the button will open the referenced document. Use Target to specify where\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Target",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The target attribute specifies where to open the link, if Href is specified. Possible values: _blank | _self | _parent | _top | <i>framename</i>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Target"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A string you want to associate with the chip. If the ChildContent is not set this will be shown as chip text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A value that should be managed in the SelectedValues collection.\n            Note: do not change the value during the chip's lifetime\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ForceLoad",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, force browser to redirect outside component router-space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ForceLoad"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Default",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            If true, this chip is selected by default if used in a ChipSet. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Default"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Command",
            "TypeName": "System.Windows.Input.ICommand",
            "Documentation": "\n            <summary>\n            Command executed when the user clicks on an element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Command"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommandParameter",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Command parameter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommandParameter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Chip click event, if set the chip focus, hover and click effects are applied.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClose",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.MudChip>",
            "Documentation": "\n            <summary>\n            Chip delete event, if set the delete icon will be visible.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClose",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudChip",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 172331799,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudChip.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudChip"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudChip.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -295072692,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudChip.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudChip"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudChip.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1390647632,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudCollapse",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudCollapse"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Expanded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, expands the panel, otherwise collapse it. Setting this prop enables control over the panel.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Expanded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxHeight",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Explicitly sets the height for the Collapse element to override the css default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnAnimationEnd",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Metadata": {
              "Common.PropertyName": "OnAnimationEnd",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Metadata": {
              "Common.PropertyName": "ExpandedChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudCollapse"
        }
      },
      {
        "HashCode": 1901803348,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudCollapse",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudCollapse"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Expanded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, expands the panel, otherwise collapse it. Setting this prop enables control over the panel.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Expanded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxHeight",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Explicitly sets the height for the Collapse element to override the css default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnAnimationEnd",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Metadata": {
              "Common.PropertyName": "OnAnimationEnd",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Metadata": {
              "Common.PropertyName": "ExpandedChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudCollapse",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1561050032,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCollapse.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudCollapse"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCollapse.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -2107363198,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudCollapse.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudCollapse"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudCollapse.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1509937595,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudColorPicker",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudColorPicker"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "DisableAlpha",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, Alpha options will not be displayed and color output will be RGB, HSL or HEX and not RGBA, HSLA or HEXA.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableAlpha"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableColorField",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the color field will not be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableColorField"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableModeSwitch",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the switch to change color mode will not be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableModeSwitch"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableInputs",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, textfield inputs and color mode switch will not be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableInputs"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableSliders",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, hue and alpha sliders will not be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableSliders"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisablePreview",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the preview color box will not be displayed, note that the preview color functions as a button as well for collection colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisablePreview"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColorPickerMode",
            "TypeName": "MudBlazor.ColorPickerMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The initial mode (RGB, HSL or HEX) the picker should open. Defaults to RGB \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ColorPickerMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColorPickerView",
            "TypeName": "MudBlazor.ColorPickerView",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The initial view of the picker. Views can be changed if toolbar is enabled. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ColorPickerView"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UpdateBindingIfOnlyHSLChanged",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, binding changes occurred also when HSL values changed without a corresponding RGB change \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UpdateBindingIfOnlyHSLChanged"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "MudBlazor.Utilities.MudColor",
            "Documentation": "\n            <summary>\n            A two-way bindable property representing the selected value. MudColor is a utility class that can be used to get the value as RGB, HSL, hex or other value\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.Utilities.MudColor>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Palette",
            "TypeName": "System.Collections.Generic.IEnumerable<MudBlazor.Utilities.MudColor>",
            "Documentation": "\n            <summary>\n            MudColor list of predefined colors. The first five colors will show up as the quick colors on preview dot click.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Palette"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableDragEffect",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When set to true, no mouse move events in the spectrum mode will be captured, so the selector circle won't fellow the mouse. \n            Under some conditions like long latency the visual representation might not reflect the user behaviour anymore. So, it can be disabled \n            Enabled by default\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableDragEffect"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom close icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SpectrumIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom spectrum icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SpectrumIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GridIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom grid icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GridIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PaletteIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom palette icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PaletteIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ImportExportIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom import/export icont.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ImportExportIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the icon of the input text field\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the icon of the input text field\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the aria-label of the input text field icon\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerOpened",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown / dialog opens\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerOpened",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerClosed",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown / dialog closes\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerClosed",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow. 0 for no shadow set to 8 by default in inline mode and 0 in static mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to 0 this is set to true automatically in static mode but can be overridden with Rounded bool.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no date or time can be defined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Rounded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to theme default when in Static Mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Rounded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value, HelperText will be applied.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the picker will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Editable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the picker will be editable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Editable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableToolbar",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hide toolbar and show only date/time views.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableToolbar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToolBarClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for picker's ToolBar, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToolBarClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerVariant",
            "TypeName": "MudBlazor.PickerVariant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Picker container option\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerVariant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputVariant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Variant of the text input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputVariant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant of the text input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets if the icon will be att start or end, set to false to disable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Orientation",
            "TypeName": "MudBlazor.Orientation",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            What orientation to render in when in PickerVariant Static Mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Orientation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the toolbar, selected and active. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AllowKeyboardInput",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Changes the cursor appearance.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AllowKeyboardInput"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The currently selected string value (two-way bindable)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClassActions",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class that will be applied to the action buttons container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClassActions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerActions",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.MudPicker<MudBlazor.Utilities.MudColor>>",
            "Documentation": "\n            <summary>\n            Define the action buttons here\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerActions",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Mask",
            "TypeName": "MudBlazor.IMask",
            "Documentation": "\n            <summary>\n            A mask for structured input of the date (requires Editable to be true).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Mask"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AnchorOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the origin of the popover's anchor. Defaults to <see cref=\"F:MudBlazor.Origin.TopLeft\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AnchorOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TransformOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the origin of the popover's transform. Defaults to <see cref=\"F:MudBlazor.Origin.TopLeft\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TransformOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<MudBlazor.Utilities.MudColor, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<MudBlazor.Utilities.MudColor>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudColorPicker"
        }
      },
      {
        "HashCode": -1362957054,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudColorPicker",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudColorPicker"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "DisableAlpha",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, Alpha options will not be displayed and color output will be RGB, HSL or HEX and not RGBA, HSLA or HEXA.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableAlpha"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableColorField",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the color field will not be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableColorField"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableModeSwitch",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the switch to change color mode will not be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableModeSwitch"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableInputs",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, textfield inputs and color mode switch will not be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableInputs"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableSliders",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, hue and alpha sliders will not be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableSliders"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisablePreview",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the preview color box will not be displayed, note that the preview color functions as a button as well for collection colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisablePreview"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColorPickerMode",
            "TypeName": "MudBlazor.ColorPickerMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The initial mode (RGB, HSL or HEX) the picker should open. Defaults to RGB \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ColorPickerMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColorPickerView",
            "TypeName": "MudBlazor.ColorPickerView",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The initial view of the picker. Views can be changed if toolbar is enabled. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ColorPickerView"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UpdateBindingIfOnlyHSLChanged",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, binding changes occurred also when HSL values changed without a corresponding RGB change \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UpdateBindingIfOnlyHSLChanged"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "MudBlazor.Utilities.MudColor",
            "Documentation": "\n            <summary>\n            A two-way bindable property representing the selected value. MudColor is a utility class that can be used to get the value as RGB, HSL, hex or other value\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.Utilities.MudColor>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Palette",
            "TypeName": "System.Collections.Generic.IEnumerable<MudBlazor.Utilities.MudColor>",
            "Documentation": "\n            <summary>\n            MudColor list of predefined colors. The first five colors will show up as the quick colors on preview dot click.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Palette"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableDragEffect",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When set to true, no mouse move events in the spectrum mode will be captured, so the selector circle won't fellow the mouse. \n            Under some conditions like long latency the visual representation might not reflect the user behaviour anymore. So, it can be disabled \n            Enabled by default\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableDragEffect"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom close icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SpectrumIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom spectrum icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SpectrumIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GridIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom grid icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GridIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PaletteIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom palette icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PaletteIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ImportExportIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom import/export icont.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ImportExportIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the icon of the input text field\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the icon of the input text field\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the aria-label of the input text field icon\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerOpened",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown / dialog opens\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerOpened",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerClosed",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown / dialog closes\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerClosed",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow. 0 for no shadow set to 8 by default in inline mode and 0 in static mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to 0 this is set to true automatically in static mode but can be overridden with Rounded bool.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no date or time can be defined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Rounded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to theme default when in Static Mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Rounded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value, HelperText will be applied.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the picker will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Editable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the picker will be editable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Editable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableToolbar",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hide toolbar and show only date/time views.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableToolbar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToolBarClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for picker's ToolBar, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToolBarClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerVariant",
            "TypeName": "MudBlazor.PickerVariant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Picker container option\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerVariant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputVariant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Variant of the text input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputVariant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant of the text input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets if the icon will be att start or end, set to false to disable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Orientation",
            "TypeName": "MudBlazor.Orientation",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            What orientation to render in when in PickerVariant Static Mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Orientation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the toolbar, selected and active. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AllowKeyboardInput",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Changes the cursor appearance.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AllowKeyboardInput"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The currently selected string value (two-way bindable)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClassActions",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class that will be applied to the action buttons container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClassActions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerActions",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.MudPicker<MudBlazor.Utilities.MudColor>>",
            "Documentation": "\n            <summary>\n            Define the action buttons here\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerActions",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Mask",
            "TypeName": "MudBlazor.IMask",
            "Documentation": "\n            <summary>\n            A mask for structured input of the date (requires Editable to be true).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Mask"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AnchorOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the origin of the popover's anchor. Defaults to <see cref=\"F:MudBlazor.Origin.TopLeft\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AnchorOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TransformOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the origin of the popover's transform. Defaults to <see cref=\"F:MudBlazor.Origin.TopLeft\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TransformOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<MudBlazor.Utilities.MudColor, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<MudBlazor.Utilities.MudColor>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudColorPicker",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1723008377,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudColorPicker.PickerActions",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the action buttons here\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PickerActions",
            "ParentTag": "MudColorPicker"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'PickerActions' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudColorPicker.PickerActions",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -642456218,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudColorPicker.PickerActions",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the action buttons here\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PickerActions",
            "ParentTag": "MudBlazor.MudColorPicker"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'PickerActions' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudColorPicker.PickerActions",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1315906661,
        "Kind": "Components.Component",
        "Name": "MudBlazor.Column<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Column"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.Column<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "T",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Field",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies the name of the object's property bound to the column\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Field"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FieldType",
            "TypeName": "System.Type",
            "Metadata": {
              "Common.PropertyName": "FieldType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HideSmall",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "HideSmall"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterColSpan",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "FooterColSpan"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderColSpan",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "HeaderColSpan"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.HeaderContext<T>>",
            "Metadata": {
              "Common.PropertyName": "HeaderTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CellTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.CellContext<T>>",
            "Metadata": {
              "Common.PropertyName": "CellTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.FooterContext<T>>",
            "Metadata": {
              "Common.PropertyName": "FooterTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.GroupDefinition<T>>",
            "Metadata": {
              "Common.PropertyName": "GroupTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupBy",
            "TypeName": "System.Func<T, System.Object>",
            "Metadata": {
              "Common.PropertyName": "GroupBy",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "HeaderClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderClassFunc",
            "TypeName": "System.Func<T, System.String>",
            "Metadata": {
              "Common.PropertyName": "HeaderClassFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderStyle",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "HeaderStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderStyleFunc",
            "TypeName": "System.Func<T, System.String>",
            "Metadata": {
              "Common.PropertyName": "HeaderStyleFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Sortable",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Determines whether this columns data can be sorted. This overrides the Sortable parameter on the DataGrid.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Sortable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Resizable",
            "TypeName": "System.Boolean?",
            "Metadata": {
              "Common.PropertyName": "Resizable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Filterable",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Determines whether this columns data can be filtered. This overrides the Filterable parameter on the DataGrid.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Filterable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowFilterIcon",
            "TypeName": "System.Boolean?",
            "Metadata": {
              "Common.PropertyName": "ShowFilterIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hideable",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Determines whether this column can be hidden. This overrides the Hideable parameter on the DataGrid.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hideable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hidden",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Hidden"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HiddenChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Metadata": {
              "Common.PropertyName": "HiddenChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowColumnOptions",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Determines whether to show or hide column options. This overrides the ShowColumnOptions parameter on the DataGrid.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowColumnOptions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortBy",
            "TypeName": "System.Func<T, System.Object>",
            "Metadata": {
              "Common.PropertyName": "SortBy",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InitialDirection",
            "TypeName": "MudBlazor.SortDirection",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "InitialDirection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortIcon",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "SortIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Groupable",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Specifies whether the column can be grouped.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Groupable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Grouping",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Specifies whether the column is grouped.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Grouping"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "StickyLeft",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Specifies whether the column is sticky.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "StickyLeft"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "StickyRight",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "StickyRight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.FilterContext<T>>",
            "Metadata": {
              "Common.PropertyName": "FilterTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture used to represent this column and by the filtering input field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CellClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "CellClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CellClassFunc",
            "TypeName": "System.Func<T, System.String>",
            "Metadata": {
              "Common.PropertyName": "CellClassFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CellStyle",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "CellStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CellStyleFunc",
            "TypeName": "System.Func<T, System.String>",
            "Metadata": {
              "Common.PropertyName": "CellStyleFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsEditable",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "IsEditable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.CellContext<T>>",
            "Metadata": {
              "Common.PropertyName": "EditTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "FooterClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterClassFunc",
            "TypeName": "System.Func<T, System.String>",
            "Metadata": {
              "Common.PropertyName": "FooterClassFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterStyle",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "FooterStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterStyleFunc",
            "TypeName": "System.Func<T, System.String>",
            "Metadata": {
              "Common.PropertyName": "FooterStyleFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EnableFooterSelection",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "EnableFooterSelection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AggregateDefinition",
            "TypeName": "MudBlazor.AggregateDefinition<T>",
            "Metadata": {
              "Common.PropertyName": "AggregateDefinition",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.Column<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -1394024482,
        "Kind": "Components.Component",
        "Name": "MudBlazor.Column<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.Column"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.Column<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "T",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Field",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies the name of the object's property bound to the column\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Field"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FieldType",
            "TypeName": "System.Type",
            "Metadata": {
              "Common.PropertyName": "FieldType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HideSmall",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "HideSmall"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterColSpan",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "FooterColSpan"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderColSpan",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "HeaderColSpan"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.HeaderContext<T>>",
            "Metadata": {
              "Common.PropertyName": "HeaderTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CellTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.CellContext<T>>",
            "Metadata": {
              "Common.PropertyName": "CellTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.FooterContext<T>>",
            "Metadata": {
              "Common.PropertyName": "FooterTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.GroupDefinition<T>>",
            "Metadata": {
              "Common.PropertyName": "GroupTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupBy",
            "TypeName": "System.Func<T, System.Object>",
            "Metadata": {
              "Common.PropertyName": "GroupBy",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "HeaderClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderClassFunc",
            "TypeName": "System.Func<T, System.String>",
            "Metadata": {
              "Common.PropertyName": "HeaderClassFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderStyle",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "HeaderStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderStyleFunc",
            "TypeName": "System.Func<T, System.String>",
            "Metadata": {
              "Common.PropertyName": "HeaderStyleFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Sortable",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Determines whether this columns data can be sorted. This overrides the Sortable parameter on the DataGrid.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Sortable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Resizable",
            "TypeName": "System.Boolean?",
            "Metadata": {
              "Common.PropertyName": "Resizable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Filterable",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Determines whether this columns data can be filtered. This overrides the Filterable parameter on the DataGrid.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Filterable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowFilterIcon",
            "TypeName": "System.Boolean?",
            "Metadata": {
              "Common.PropertyName": "ShowFilterIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hideable",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Determines whether this column can be hidden. This overrides the Hideable parameter on the DataGrid.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hideable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hidden",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Hidden"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HiddenChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Metadata": {
              "Common.PropertyName": "HiddenChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowColumnOptions",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Determines whether to show or hide column options. This overrides the ShowColumnOptions parameter on the DataGrid.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowColumnOptions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortBy",
            "TypeName": "System.Func<T, System.Object>",
            "Metadata": {
              "Common.PropertyName": "SortBy",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InitialDirection",
            "TypeName": "MudBlazor.SortDirection",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "InitialDirection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortIcon",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "SortIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Groupable",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Specifies whether the column can be grouped.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Groupable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Grouping",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Specifies whether the column is grouped.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Grouping"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "StickyLeft",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Specifies whether the column is sticky.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "StickyLeft"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "StickyRight",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "StickyRight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.FilterContext<T>>",
            "Metadata": {
              "Common.PropertyName": "FilterTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture used to represent this column and by the filtering input field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CellClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "CellClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CellClassFunc",
            "TypeName": "System.Func<T, System.String>",
            "Metadata": {
              "Common.PropertyName": "CellClassFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CellStyle",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "CellStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CellStyleFunc",
            "TypeName": "System.Func<T, System.String>",
            "Metadata": {
              "Common.PropertyName": "CellStyleFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsEditable",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "IsEditable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.CellContext<T>>",
            "Metadata": {
              "Common.PropertyName": "EditTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "FooterClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterClassFunc",
            "TypeName": "System.Func<T, System.String>",
            "Metadata": {
              "Common.PropertyName": "FooterClassFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterStyle",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "FooterStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterStyleFunc",
            "TypeName": "System.Func<T, System.String>",
            "Metadata": {
              "Common.PropertyName": "FooterStyleFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EnableFooterSelection",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "EnableFooterSelection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AggregateDefinition",
            "TypeName": "MudBlazor.AggregateDefinition<T>",
            "Metadata": {
              "Common.PropertyName": "AggregateDefinition",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.Column<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1393869196,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Column<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Column"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Column<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1560993622,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Column<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.Column"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Column<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1595928935,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Column<T>.HeaderTemplate",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeaderTemplate",
            "ParentTag": "Column"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'HeaderTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Column<T>.HeaderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 436322350,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Column<T>.HeaderTemplate",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeaderTemplate",
            "ParentTag": "MudBlazor.Column"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'HeaderTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Column<T>.HeaderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1455561396,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Column<T>.CellTemplate",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CellTemplate",
            "ParentTag": "Column"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'CellTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Column<T>.CellTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 824856876,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Column<T>.CellTemplate",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CellTemplate",
            "ParentTag": "MudBlazor.Column"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'CellTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Column<T>.CellTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1067046558,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Column<T>.FooterTemplate",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FooterTemplate",
            "ParentTag": "Column"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'FooterTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Column<T>.FooterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1991377129,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Column<T>.FooterTemplate",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FooterTemplate",
            "ParentTag": "MudBlazor.Column"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'FooterTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Column<T>.FooterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1846501969,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Column<T>.GroupTemplate",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "GroupTemplate",
            "ParentTag": "Column"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'GroupTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Column<T>.GroupTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1306096284,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Column<T>.GroupTemplate",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "GroupTemplate",
            "ParentTag": "MudBlazor.Column"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'GroupTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Column<T>.GroupTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1491307710,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Column<T>.FilterTemplate",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FilterTemplate",
            "ParentTag": "Column"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'FilterTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Column<T>.FilterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1183716995,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Column<T>.FilterTemplate",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FilterTemplate",
            "ParentTag": "MudBlazor.Column"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'FilterTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Column<T>.FilterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2073594813,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Column<T>.EditTemplate",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "EditTemplate",
            "ParentTag": "Column"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'EditTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Column<T>.EditTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 892349471,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Column<T>.EditTemplate",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "EditTemplate",
            "ParentTag": "MudBlazor.Column"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'EditTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Column<T>.EditTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 62488343,
        "Kind": "Components.Component",
        "Name": "MudBlazor.FilterHeaderCell<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FilterHeaderCell"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.FilterHeaderCell<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Column",
            "TypeName": "MudBlazor.Column<T>",
            "Metadata": {
              "Common.PropertyName": "Column",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.FilterHeaderCell<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 558094461,
        "Kind": "Components.Component",
        "Name": "MudBlazor.FilterHeaderCell<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.FilterHeaderCell"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.FilterHeaderCell<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Column",
            "TypeName": "MudBlazor.Column<T>",
            "Metadata": {
              "Common.PropertyName": "Column",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.FilterHeaderCell<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 519476597,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.FilterHeaderCell<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "FilterHeaderCell"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.FilterHeaderCell<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1994338699,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.FilterHeaderCell<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.FilterHeaderCell"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.FilterHeaderCell<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2026630847,
        "Kind": "Components.Component",
        "Name": "MudBlazor.FooterCell<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FooterCell"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.FooterCell<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Column",
            "TypeName": "MudBlazor.Column<T>",
            "Metadata": {
              "Common.PropertyName": "Column",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CurrentItems",
            "TypeName": "System.Collections.Generic.IEnumerable<T>",
            "Metadata": {
              "Common.PropertyName": "CurrentItems",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.FooterCell<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 2130019281,
        "Kind": "Components.Component",
        "Name": "MudBlazor.FooterCell<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.FooterCell"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.FooterCell<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Column",
            "TypeName": "MudBlazor.Column<T>",
            "Metadata": {
              "Common.PropertyName": "Column",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CurrentItems",
            "TypeName": "System.Collections.Generic.IEnumerable<T>",
            "Metadata": {
              "Common.PropertyName": "CurrentItems",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.FooterCell<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1871444038,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.FooterCell<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "FooterCell"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.FooterCell<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -299421991,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.FooterCell<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.FooterCell"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.FooterCell<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 172641745,
        "Kind": "Components.Component",
        "Name": "MudBlazor.HeaderCell<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeaderCell"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.HeaderCell<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Column",
            "TypeName": "MudBlazor.Column<T>",
            "Metadata": {
              "Common.PropertyName": "Column",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortDirection",
            "TypeName": "MudBlazor.SortDirection",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "SortDirection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.HeaderCell<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -269763725,
        "Kind": "Components.Component",
        "Name": "MudBlazor.HeaderCell<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.HeaderCell"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.HeaderCell<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Column",
            "TypeName": "MudBlazor.Column<T>",
            "Metadata": {
              "Common.PropertyName": "Column",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortDirection",
            "TypeName": "MudBlazor.SortDirection",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "SortDirection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.HeaderCell<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 989208233,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.HeaderCell<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HeaderCell"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.HeaderCell<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -2038092637,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.HeaderCell<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.HeaderCell"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.HeaderCell<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1266626104,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDataGrid<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDataGrid"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudDataGrid<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedItemChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Callback is called when a row has been clicked and returns the selected item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedItemChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedItemsChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.HashSet<T>>",
            "Documentation": "\n            <summary>\n            Callback is called whenever items are selected or deselected in multi selection mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedItemsChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.DataGridRowClickEventArgs<T>>",
            "Documentation": "\n            <summary>\n            Callback is called whenever a row is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowClick",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "StartedEditingItem",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Callback is called when an item has begun to be edited. Returns the item being edited.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "StartedEditingItem",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CancelledEditingItem",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Callback is called when the process of editing an item has been cancelled. Returns the item which was previously in edit mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CancelledEditingItem",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommittedItemChanges",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Callback is called when the changes to an item are committed. Returns the item whose changes were committed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommittedItemChanges",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortMode",
            "TypeName": "MudBlazor.SortMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Controls whether data in the DataGrid can be sorted. This is overridable by each column.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SortMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Filterable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Controls whether data in the DataGrid can be filtered. This is overridable by each column.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Filterable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hideable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Controls whether columns in the DataGrid can be hidden. This is overridable by each column.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hideable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowColumnOptions",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Controls whether to hide or show the column options. This is overridable by each column.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowColumnOptions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Breakpoint",
            "TypeName": "MudBlazor.Breakpoint",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            At what breakpoint the table should switch to mobile layout. Takes None, Xs, Sm, Md, Lg and Xl the default behavior is breaking on Xs.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Breakpoint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow. 0 for no shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true to disable rounded corners\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outlined",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, table will be outlined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outlined"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Bordered",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, table's cells will have left/right borders.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Bordered"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColGroup",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Specifies a group of one or more columns in a table for formatting.\n            Ex:\n            table\n                colgroup\n                   col span=\"2\" style=\"background-color:red\"\n                   col style=\"background-color:yellow\"\n                 colgroup\n                 header\n                 body\n            table\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ColGroup",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true for rows with a narrow height\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hover",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true to see rows hover on mouse-over.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hover"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Striped",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, striped table rows will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Striped"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FixedHeader",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When true, the header will stay in place when the table is scrolled. Note: set Height to make the table scrollable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FixedHeader"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FixedFooter",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When true, the footer will be visible is not scrolled to the bottom. Note: set Height to make the table scrollable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FixedFooter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowFilterIcons",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "ShowFilterIcons"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterMode",
            "TypeName": "MudBlazor.DataGridFilterMode",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "FilterMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterCaseSensitivity",
            "TypeName": "MudBlazor.DataGridFilterCaseSensitivity",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "FilterCaseSensitivity"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<System.Collections.Generic.List<MudBlazor.FilterDefinition<T>>>",
            "Metadata": {
              "Common.PropertyName": "FilterTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterDefinitions",
            "TypeName": "System.Collections.Generic.List<MudBlazor.FilterDefinition<T>>",
            "Documentation": "\n            <summary>\n            The list of FilterDefinitions that have been added to the data grid. FilterDefinitions are managed by the data\n            grid automatically when using the built in filter UI. You can also programmatically manage these definitions\n            through this collection.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FilterDefinitions",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortDefinitions",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, MudBlazor.SortDefinition<T>>",
            "Documentation": "\n            <summary>\n            The list of SortDefinitions that have been added to the data grid. SortDefinitions are managed by the data\n            grid automatically when using the built in filter UI. You can also programmatically manage these definitions\n            through this collection.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SortDefinitions",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Virtualize",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the results are displayed in a Virtualize component, allowing a boost in rendering speed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Virtualize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OverscanCount",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Gets or sets a value that determines how many additional items will be rendered\n            before and after the visible region. This help to reduce the frequency of rendering\n            during scrolling. However, higher values mean that more elements will be present\n            in the page.\n            Only used for virtualization.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OverscanCount"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class for the table rows. Note, many CSS settings are overridden by MudTd though\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowStyle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS styles for the table rows. Note, many CSS settings are overridden by MudTd though\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowClassFunc",
            "TypeName": "System.Func<T, System.Int32, System.String>",
            "Documentation": "\n            <summary>\n            Returns the class that will get joined with RowClass. Takes the current item and row index.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowClassFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowStyleFunc",
            "TypeName": "System.Func<T, System.Int32, System.String>",
            "Documentation": "\n            <summary>\n            Returns the class that will get joined with RowClass. Takes the current item and row index.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowStyleFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MultiSelection",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set to true to enable selection of multiple rows.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MultiSelection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditMode",
            "TypeName": "MudBlazor.DataGridEditMode?",
            "Documentation": "\n            <summary>\n            When the grid is not read only, you can specify what type of editing mode to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EditMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditTrigger",
            "TypeName": "MudBlazor.DataGridEditTrigger?",
            "Documentation": "\n            <summary>\n            Allows you to specify the action that will trigger an edit when the EditMode is Form.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EditTrigger"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditDialogOptions",
            "TypeName": "MudBlazor.DialogOptions",
            "Documentation": "\n            <summary>\n            Fine tune the edit dialog.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EditDialogOptions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.IEnumerable<T>",
            "Documentation": "\n             <summary>\n             The data to display in the table. MudTable will render one row per item\n             </summary>\n            \n        ",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Loading",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show a loading animation, if true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Loading"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CanCancelEdit",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Define if Cancel button is present or not for inline editing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CanCancelEdit"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LoadingProgressColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the loading progress if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LoadingProgressColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToolBarContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Optional. Add any kind of toolbar to this render fragment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToolBarContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HorizontalScrollbar",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Defines if the table has a horizontal scrollbar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HorizontalScrollbar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColumnResizeMode",
            "TypeName": "MudBlazor.ResizeMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Defines if columns of the grid can be resized.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ColumnResizeMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Add a class to the thead tag\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Setting a height will allow to scroll the table. If not set, it will try to grow in height. You can set this to any CSS value that the\n            attribute 'height' accepts, i.e. 500px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Add a class to the tfoot tag\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "QuickFilter",
            "TypeName": "System.Func<T, System.Boolean>",
            "Documentation": "\n            <summary>\n            A function that returns whether or not an item should be displayed in the table. You can use this to implement your own search function.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "QuickFilter",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Header",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Allows adding a custom header beyond that specified in the Column component. Add HeaderCell\n            components to add a custom header.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Header",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Columns",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The Columns that make up the data grid. Add Column components to this RenderFragment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Columns",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture used to represent numeric columns and his filtering input fields.\n            Each column can override this DataGrid Culture.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildRowContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.CellContext<T>>",
            "Documentation": "\n            <summary>\n            Row Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildRowContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NoRecordsContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Defines the table body content when there are no matching records found\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NoRecordsContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LoadingContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Defines the table body content  the table has no rows and is loading\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LoadingContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PagerContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Add MudTablePager here to enable breaking the rows in to multiple pages.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PagerContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ServerData",
            "TypeName": "System.Func<MudBlazor.GridState<T>, System.Threading.Tasks.Task<MudBlazor.GridData<T>>>",
            "Documentation": "\n            <summary>\n            Supply an async function which (re)loads filtered, paginated and sorted data from server.\n            Table will await this func and update based on the returned TableData.\n            Used only with ServerData\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ServerData",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowsPerPage",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            If the table has more items than this number, it will break the rows into pages of said size.\n            Note: requires a MudTablePager in PagerContent.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowsPerPage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CurrentPage",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The page index of the currently displayed page (Zero based). Usually called by MudTablePager.\n            Note: requires a MudTablePager in PagerContent.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CurrentPage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Locks Inline Edit mode, if true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedItems",
            "TypeName": "System.Collections.Generic.HashSet<T>",
            "Documentation": "\n            <summary>\n            If MultiSelection is true, this returns the currently selected items. You can bind this property and the initial content of the HashSet you bind it to will cause these rows to be selected initially.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedItems",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedItem",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            Returns the item which was last clicked on in single selection mode (that is, if MultiSelection is false)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedItem",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Groupable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Determines whether grouping of columns is allowed in the data grid.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Groupable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupExpanded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If set, a grouped column will be expanded by default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GroupExpanded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class for the groups.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GroupClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupStyle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS styles for the groups.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GroupStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowMenuIcon",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When true, displays the built-in menu icon in the header of the data grid.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowMenuIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDataGrid<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 1633771155,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDataGrid<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDataGrid"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudDataGrid<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedItemChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Callback is called when a row has been clicked and returns the selected item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedItemChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedItemsChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.HashSet<T>>",
            "Documentation": "\n            <summary>\n            Callback is called whenever items are selected or deselected in multi selection mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedItemsChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.DataGridRowClickEventArgs<T>>",
            "Documentation": "\n            <summary>\n            Callback is called whenever a row is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowClick",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "StartedEditingItem",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Callback is called when an item has begun to be edited. Returns the item being edited.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "StartedEditingItem",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CancelledEditingItem",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Callback is called when the process of editing an item has been cancelled. Returns the item which was previously in edit mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CancelledEditingItem",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommittedItemChanges",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Callback is called when the changes to an item are committed. Returns the item whose changes were committed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommittedItemChanges",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortMode",
            "TypeName": "MudBlazor.SortMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Controls whether data in the DataGrid can be sorted. This is overridable by each column.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SortMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Filterable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Controls whether data in the DataGrid can be filtered. This is overridable by each column.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Filterable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hideable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Controls whether columns in the DataGrid can be hidden. This is overridable by each column.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hideable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowColumnOptions",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Controls whether to hide or show the column options. This is overridable by each column.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowColumnOptions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Breakpoint",
            "TypeName": "MudBlazor.Breakpoint",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            At what breakpoint the table should switch to mobile layout. Takes None, Xs, Sm, Md, Lg and Xl the default behavior is breaking on Xs.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Breakpoint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow. 0 for no shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true to disable rounded corners\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outlined",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, table will be outlined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outlined"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Bordered",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, table's cells will have left/right borders.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Bordered"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColGroup",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Specifies a group of one or more columns in a table for formatting.\n            Ex:\n            table\n                colgroup\n                   col span=\"2\" style=\"background-color:red\"\n                   col style=\"background-color:yellow\"\n                 colgroup\n                 header\n                 body\n            table\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ColGroup",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true for rows with a narrow height\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hover",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true to see rows hover on mouse-over.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hover"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Striped",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, striped table rows will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Striped"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FixedHeader",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When true, the header will stay in place when the table is scrolled. Note: set Height to make the table scrollable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FixedHeader"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FixedFooter",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When true, the footer will be visible is not scrolled to the bottom. Note: set Height to make the table scrollable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FixedFooter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowFilterIcons",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "ShowFilterIcons"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterMode",
            "TypeName": "MudBlazor.DataGridFilterMode",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "FilterMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterCaseSensitivity",
            "TypeName": "MudBlazor.DataGridFilterCaseSensitivity",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "FilterCaseSensitivity"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<System.Collections.Generic.List<MudBlazor.FilterDefinition<T>>>",
            "Metadata": {
              "Common.PropertyName": "FilterTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FilterDefinitions",
            "TypeName": "System.Collections.Generic.List<MudBlazor.FilterDefinition<T>>",
            "Documentation": "\n            <summary>\n            The list of FilterDefinitions that have been added to the data grid. FilterDefinitions are managed by the data\n            grid automatically when using the built in filter UI. You can also programmatically manage these definitions\n            through this collection.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FilterDefinitions",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortDefinitions",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, MudBlazor.SortDefinition<T>>",
            "Documentation": "\n            <summary>\n            The list of SortDefinitions that have been added to the data grid. SortDefinitions are managed by the data\n            grid automatically when using the built in filter UI. You can also programmatically manage these definitions\n            through this collection.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SortDefinitions",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Virtualize",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the results are displayed in a Virtualize component, allowing a boost in rendering speed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Virtualize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OverscanCount",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Gets or sets a value that determines how many additional items will be rendered\n            before and after the visible region. This help to reduce the frequency of rendering\n            during scrolling. However, higher values mean that more elements will be present\n            in the page.\n            Only used for virtualization.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OverscanCount"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class for the table rows. Note, many CSS settings are overridden by MudTd though\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowStyle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS styles for the table rows. Note, many CSS settings are overridden by MudTd though\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowClassFunc",
            "TypeName": "System.Func<T, System.Int32, System.String>",
            "Documentation": "\n            <summary>\n            Returns the class that will get joined with RowClass. Takes the current item and row index.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowClassFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowStyleFunc",
            "TypeName": "System.Func<T, System.Int32, System.String>",
            "Documentation": "\n            <summary>\n            Returns the class that will get joined with RowClass. Takes the current item and row index.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowStyleFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MultiSelection",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set to true to enable selection of multiple rows.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MultiSelection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditMode",
            "TypeName": "MudBlazor.DataGridEditMode?",
            "Documentation": "\n            <summary>\n            When the grid is not read only, you can specify what type of editing mode to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EditMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditTrigger",
            "TypeName": "MudBlazor.DataGridEditTrigger?",
            "Documentation": "\n            <summary>\n            Allows you to specify the action that will trigger an edit when the EditMode is Form.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EditTrigger"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditDialogOptions",
            "TypeName": "MudBlazor.DialogOptions",
            "Documentation": "\n            <summary>\n            Fine tune the edit dialog.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EditDialogOptions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.IEnumerable<T>",
            "Documentation": "\n             <summary>\n             The data to display in the table. MudTable will render one row per item\n             </summary>\n            \n        ",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Loading",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show a loading animation, if true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Loading"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CanCancelEdit",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Define if Cancel button is present or not for inline editing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CanCancelEdit"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LoadingProgressColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the loading progress if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LoadingProgressColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToolBarContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Optional. Add any kind of toolbar to this render fragment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToolBarContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HorizontalScrollbar",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Defines if the table has a horizontal scrollbar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HorizontalScrollbar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColumnResizeMode",
            "TypeName": "MudBlazor.ResizeMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Defines if columns of the grid can be resized.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ColumnResizeMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Add a class to the thead tag\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Setting a height will allow to scroll the table. If not set, it will try to grow in height. You can set this to any CSS value that the\n            attribute 'height' accepts, i.e. 500px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Add a class to the tfoot tag\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "QuickFilter",
            "TypeName": "System.Func<T, System.Boolean>",
            "Documentation": "\n            <summary>\n            A function that returns whether or not an item should be displayed in the table. You can use this to implement your own search function.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "QuickFilter",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Header",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Allows adding a custom header beyond that specified in the Column component. Add HeaderCell\n            components to add a custom header.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Header",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Columns",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The Columns that make up the data grid. Add Column components to this RenderFragment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Columns",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture used to represent numeric columns and his filtering input fields.\n            Each column can override this DataGrid Culture.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildRowContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.CellContext<T>>",
            "Documentation": "\n            <summary>\n            Row Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildRowContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NoRecordsContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Defines the table body content when there are no matching records found\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NoRecordsContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LoadingContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Defines the table body content  the table has no rows and is loading\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LoadingContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PagerContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Add MudTablePager here to enable breaking the rows in to multiple pages.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PagerContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ServerData",
            "TypeName": "System.Func<MudBlazor.GridState<T>, System.Threading.Tasks.Task<MudBlazor.GridData<T>>>",
            "Documentation": "\n            <summary>\n            Supply an async function which (re)loads filtered, paginated and sorted data from server.\n            Table will await this func and update based on the returned TableData.\n            Used only with ServerData\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ServerData",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowsPerPage",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            If the table has more items than this number, it will break the rows into pages of said size.\n            Note: requires a MudTablePager in PagerContent.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowsPerPage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CurrentPage",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The page index of the currently displayed page (Zero based). Usually called by MudTablePager.\n            Note: requires a MudTablePager in PagerContent.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CurrentPage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Locks Inline Edit mode, if true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedItems",
            "TypeName": "System.Collections.Generic.HashSet<T>",
            "Documentation": "\n            <summary>\n            If MultiSelection is true, this returns the currently selected items. You can bind this property and the initial content of the HashSet you bind it to will cause these rows to be selected initially.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedItems",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedItem",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            Returns the item which was last clicked on in single selection mode (that is, if MultiSelection is false)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedItem",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Groupable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Determines whether grouping of columns is allowed in the data grid.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Groupable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupExpanded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If set, a grouped column will be expanded by default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GroupExpanded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class for the groups.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GroupClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupStyle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS styles for the groups.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GroupStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowMenuIcon",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When true, displays the built-in menu icon in the header of the data grid.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowMenuIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDataGrid<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -209966419,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDataGrid<T>.ColGroup",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Specifies a group of one or more columns in a table for formatting.\n            Ex:\n            table\n                colgroup\n                   col span=\"2\" style=\"background-color:red\"\n                   col style=\"background-color:yellow\"\n                 colgroup\n                 header\n                 body\n            table\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ColGroup",
            "ParentTag": "MudDataGrid"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDataGrid<T>.ColGroup",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -621119191,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDataGrid<T>.ColGroup",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Specifies a group of one or more columns in a table for formatting.\n            Ex:\n            table\n                colgroup\n                   col span=\"2\" style=\"background-color:red\"\n                   col style=\"background-color:yellow\"\n                 colgroup\n                 header\n                 body\n            table\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ColGroup",
            "ParentTag": "MudBlazor.MudDataGrid"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDataGrid<T>.ColGroup",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 467972809,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDataGrid<T>.FilterTemplate",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FilterTemplate",
            "ParentTag": "MudDataGrid"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'FilterTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDataGrid<T>.FilterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1707163051,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDataGrid<T>.FilterTemplate",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FilterTemplate",
            "ParentTag": "MudBlazor.MudDataGrid"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'FilterTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDataGrid<T>.FilterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1744098780,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDataGrid<T>.ToolBarContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Optional. Add any kind of toolbar to this render fragment.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ToolBarContent",
            "ParentTag": "MudDataGrid"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDataGrid<T>.ToolBarContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 364852932,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDataGrid<T>.ToolBarContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Optional. Add any kind of toolbar to this render fragment.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ToolBarContent",
            "ParentTag": "MudBlazor.MudDataGrid"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDataGrid<T>.ToolBarContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1137229914,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDataGrid<T>.Header",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Allows adding a custom header beyond that specified in the Column component. Add HeaderCell\n            components to add a custom header.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Header",
            "ParentTag": "MudDataGrid"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDataGrid<T>.Header",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 93926007,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDataGrid<T>.Header",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Allows adding a custom header beyond that specified in the Column component. Add HeaderCell\n            components to add a custom header.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Header",
            "ParentTag": "MudBlazor.MudDataGrid"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDataGrid<T>.Header",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -598126238,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDataGrid<T>.Columns",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            The Columns that make up the data grid. Add Column components to this RenderFragment.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Columns",
            "ParentTag": "MudDataGrid"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDataGrid<T>.Columns",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -629221786,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDataGrid<T>.Columns",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            The Columns that make up the data grid. Add Column components to this RenderFragment.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Columns",
            "ParentTag": "MudBlazor.MudDataGrid"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDataGrid<T>.Columns",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 807336633,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDataGrid<T>.ChildRowContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Row Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildRowContent",
            "ParentTag": "MudDataGrid"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildRowContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDataGrid<T>.ChildRowContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1941482038,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDataGrid<T>.ChildRowContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Row Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildRowContent",
            "ParentTag": "MudBlazor.MudDataGrid"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildRowContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDataGrid<T>.ChildRowContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1487928981,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDataGrid<T>.NoRecordsContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Defines the table body content when there are no matching records found\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NoRecordsContent",
            "ParentTag": "MudDataGrid"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDataGrid<T>.NoRecordsContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -177025083,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDataGrid<T>.NoRecordsContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Defines the table body content when there are no matching records found\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NoRecordsContent",
            "ParentTag": "MudBlazor.MudDataGrid"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDataGrid<T>.NoRecordsContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1346461435,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDataGrid<T>.LoadingContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Defines the table body content  the table has no rows and is loading\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LoadingContent",
            "ParentTag": "MudDataGrid"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDataGrid<T>.LoadingContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1513792746,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDataGrid<T>.LoadingContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Defines the table body content  the table has no rows and is loading\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LoadingContent",
            "ParentTag": "MudBlazor.MudDataGrid"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDataGrid<T>.LoadingContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1448311436,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDataGrid<T>.PagerContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Add MudTablePager here to enable breaking the rows in to multiple pages.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PagerContent",
            "ParentTag": "MudDataGrid"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDataGrid<T>.PagerContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -2103265397,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDataGrid<T>.PagerContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Add MudTablePager here to enable breaking the rows in to multiple pages.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PagerContent",
            "ParentTag": "MudBlazor.MudDataGrid"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDataGrid<T>.PagerContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -704154320,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDataGridPager<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDataGridPager"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudDataGridPager<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRowsPerPage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true to hide the part of the pager which allows to change the page size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRowsPerPage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true to disable user interaction with the backward/forward buttons\n            and the part of the pager which allows to change the page size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PageSizeOptions",
            "TypeName": "System.Int32[]",
            "Documentation": "\n            <summary>\n            Define a list of available page size options for the user to choose from\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PageSizeOptions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InfoFormat",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Format string for the display of the current page, which you can localize to your language. Available variables are:\n            {first_item}, {last_item} and {all_items} which will replaced with the indices of the page's first and last item, as well as the total number of items.\n            Default: \"{first_item}-{last_item} of {all_items}\" which is transformed into \"0-25 of 77\". \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InfoFormat"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowsPerPageString",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The localizable \"Rows per page:\" text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowsPerPageString"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDataGridPager<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 220776119,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDataGridPager<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDataGridPager"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudDataGridPager<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRowsPerPage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true to hide the part of the pager which allows to change the page size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRowsPerPage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true to disable user interaction with the backward/forward buttons\n            and the part of the pager which allows to change the page size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PageSizeOptions",
            "TypeName": "System.Int32[]",
            "Documentation": "\n            <summary>\n            Define a list of available page size options for the user to choose from\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PageSizeOptions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InfoFormat",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Format string for the display of the current page, which you can localize to your language. Available variables are:\n            {first_item}, {last_item} and {all_items} which will replaced with the indices of the page's first and last item, as well as the total number of items.\n            Default: \"{first_item}-{last_item} of {all_items}\" which is transformed into \"0-25 of 77\". \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InfoFormat"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowsPerPageString",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The localizable \"Rows per page:\" text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowsPerPageString"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDataGridPager<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -510243362,
        "Kind": "Components.Component",
        "Name": "MudBlazor.Row",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Row"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.Row"
        }
      },
      {
        "HashCode": -1963354136,
        "Kind": "Components.Component",
        "Name": "MudBlazor.Row",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.Row"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.Row",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 857594426,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Row.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Row"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Row.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -992240751,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Row.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.Row"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Row.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1295675468,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDatePicker",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDatePicker"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "DateChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.DateTime?>",
            "Documentation": "\n            <summary>\n            Fired when the DateFormat changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DateChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Date",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            The currently selected date (two-way bindable). If null, then nothing was selected.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Date"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxDate",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            Max selectable date.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxDate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinDate",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            Min selectable date.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MinDate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OpenTo",
            "TypeName": "MudBlazor.OpenTo",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            First view to show in the MudDatePicker.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OpenTo"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DateFormat",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            String Format for selected date view\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DateFormat"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FirstDayOfWeek",
            "TypeName": "System.DayOfWeek?",
            "Documentation": "\n            <summary>\n            Defines on which day the week starts. Depends on the value of Culture. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FirstDayOfWeek"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerMonth",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            The current month of the date picker (two-way bindable). This changes when the user browses through the calender.\n            The month is represented as a DateTime which is always the first day of that month. You can also set this to define which month is initially shown. If not set, the current month is shown.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerMonth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerMonthChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.DateTime?>",
            "Documentation": "\n            <summary>\n            Fired when the date changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerMonthChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClosingDelay",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Sets the amount of time in milliseconds to wait before closing the picker. This helps the user see that the date was selected before the popover disappears.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClosingDelay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayMonths",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Number of months to display in the calendar\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayMonths"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxMonthColumns",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Maximum number of months in one row\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxMonthColumns"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "StartMonth",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            Start month when opening the picker. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "StartMonth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowWeekNumbers",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Display week numbers according to the Culture parameter. If no culture is defined, CultureInfo.CurrentCulture will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowWeekNumbers"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TitleDateFormat",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Format of the selected date in the title. By default, this is \"ddd, dd MMM\" which abbreviates day and month names. \n            For instance, display the long names like this \"dddd, dd. MMMM\". \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TitleDateFormat"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoClose",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If AutoClose is set to true and PickerActions are defined, selecting a day will close the MudDatePicker.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoClose"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsDateDisabledFunc",
            "TypeName": "System.Func<System.DateTime, System.Boolean>",
            "Documentation": "\n            <summary>\n            Function to determine whether a date is disabled\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsDateDisabledFunc",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalDateClassesFunc",
            "TypeName": "System.Func<System.DateTime, System.String>",
            "Documentation": "\n            <summary>\n            Function to conditionally apply new classes to specific days\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalDateClassesFunc",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PreviousIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom previous icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PreviousIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NextIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom next icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NextIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FixYear",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Set a predefined fix year - no year can be selected\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FixYear"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FixMonth",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Set a predefined fix month - no month can be selected\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FixMonth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FixDay",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Set a predefined fix day - no day can be selected\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FixDay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the icon of the input text field\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the icon of the input text field\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the aria-label of the input text field icon\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerOpened",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown / dialog opens\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerOpened",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerClosed",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown / dialog closes\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerClosed",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow. 0 for no shadow set to 8 by default in inline mode and 0 in static mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to 0 this is set to true automatically in static mode but can be overridden with Rounded bool.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no date or time can be defined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Rounded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to theme default when in Static Mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Rounded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value, HelperText will be applied.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the picker will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Editable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the picker will be editable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Editable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableToolbar",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hide toolbar and show only date/time views.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableToolbar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToolBarClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for picker's ToolBar, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToolBarClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerVariant",
            "TypeName": "MudBlazor.PickerVariant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Picker container option\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerVariant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputVariant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Variant of the text input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputVariant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant of the text input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets if the icon will be att start or end, set to false to disable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Orientation",
            "TypeName": "MudBlazor.Orientation",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            What orientation to render in when in PickerVariant Static Mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Orientation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the toolbar, selected and active. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AllowKeyboardInput",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Changes the cursor appearance.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AllowKeyboardInput"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The currently selected string value (two-way bindable)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClassActions",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class that will be applied to the action buttons container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClassActions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerActions",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.MudPicker<System.DateTime?>>",
            "Documentation": "\n            <summary>\n            Define the action buttons here\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerActions",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Mask",
            "TypeName": "MudBlazor.IMask",
            "Documentation": "\n            <summary>\n            A mask for structured input of the date (requires Editable to be true).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Mask"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AnchorOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the origin of the popover's anchor. Defaults to <see cref=\"F:MudBlazor.Origin.TopLeft\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AnchorOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TransformOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the origin of the popover's transform. Defaults to <see cref=\"F:MudBlazor.Origin.TopLeft\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TransformOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<System.DateTime?, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.DateTime?>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDatePicker"
        }
      },
      {
        "HashCode": 1729395737,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDatePicker",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDatePicker"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "DateChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.DateTime?>",
            "Documentation": "\n            <summary>\n            Fired when the DateFormat changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DateChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Date",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            The currently selected date (two-way bindable). If null, then nothing was selected.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Date"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxDate",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            Max selectable date.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxDate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinDate",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            Min selectable date.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MinDate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OpenTo",
            "TypeName": "MudBlazor.OpenTo",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            First view to show in the MudDatePicker.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OpenTo"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DateFormat",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            String Format for selected date view\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DateFormat"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FirstDayOfWeek",
            "TypeName": "System.DayOfWeek?",
            "Documentation": "\n            <summary>\n            Defines on which day the week starts. Depends on the value of Culture. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FirstDayOfWeek"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerMonth",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            The current month of the date picker (two-way bindable). This changes when the user browses through the calender.\n            The month is represented as a DateTime which is always the first day of that month. You can also set this to define which month is initially shown. If not set, the current month is shown.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerMonth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerMonthChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.DateTime?>",
            "Documentation": "\n            <summary>\n            Fired when the date changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerMonthChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClosingDelay",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Sets the amount of time in milliseconds to wait before closing the picker. This helps the user see that the date was selected before the popover disappears.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClosingDelay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayMonths",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Number of months to display in the calendar\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayMonths"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxMonthColumns",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Maximum number of months in one row\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxMonthColumns"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "StartMonth",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            Start month when opening the picker. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "StartMonth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowWeekNumbers",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Display week numbers according to the Culture parameter. If no culture is defined, CultureInfo.CurrentCulture will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowWeekNumbers"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TitleDateFormat",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Format of the selected date in the title. By default, this is \"ddd, dd MMM\" which abbreviates day and month names. \n            For instance, display the long names like this \"dddd, dd. MMMM\". \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TitleDateFormat"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoClose",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If AutoClose is set to true and PickerActions are defined, selecting a day will close the MudDatePicker.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoClose"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsDateDisabledFunc",
            "TypeName": "System.Func<System.DateTime, System.Boolean>",
            "Documentation": "\n            <summary>\n            Function to determine whether a date is disabled\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsDateDisabledFunc",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalDateClassesFunc",
            "TypeName": "System.Func<System.DateTime, System.String>",
            "Documentation": "\n            <summary>\n            Function to conditionally apply new classes to specific days\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalDateClassesFunc",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PreviousIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom previous icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PreviousIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NextIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom next icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NextIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FixYear",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Set a predefined fix year - no year can be selected\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FixYear"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FixMonth",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Set a predefined fix month - no month can be selected\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FixMonth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FixDay",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Set a predefined fix day - no day can be selected\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FixDay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the icon of the input text field\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the icon of the input text field\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the aria-label of the input text field icon\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerOpened",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown / dialog opens\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerOpened",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerClosed",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown / dialog closes\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerClosed",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow. 0 for no shadow set to 8 by default in inline mode and 0 in static mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to 0 this is set to true automatically in static mode but can be overridden with Rounded bool.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no date or time can be defined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Rounded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to theme default when in Static Mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Rounded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value, HelperText will be applied.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the picker will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Editable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the picker will be editable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Editable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableToolbar",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hide toolbar and show only date/time views.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableToolbar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToolBarClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for picker's ToolBar, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToolBarClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerVariant",
            "TypeName": "MudBlazor.PickerVariant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Picker container option\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerVariant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputVariant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Variant of the text input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputVariant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant of the text input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets if the icon will be att start or end, set to false to disable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Orientation",
            "TypeName": "MudBlazor.Orientation",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            What orientation to render in when in PickerVariant Static Mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Orientation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the toolbar, selected and active. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AllowKeyboardInput",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Changes the cursor appearance.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AllowKeyboardInput"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The currently selected string value (two-way bindable)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClassActions",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class that will be applied to the action buttons container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClassActions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerActions",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.MudPicker<System.DateTime?>>",
            "Documentation": "\n            <summary>\n            Define the action buttons here\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerActions",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Mask",
            "TypeName": "MudBlazor.IMask",
            "Documentation": "\n            <summary>\n            A mask for structured input of the date (requires Editable to be true).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Mask"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AnchorOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the origin of the popover's anchor. Defaults to <see cref=\"F:MudBlazor.Origin.TopLeft\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AnchorOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TransformOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the origin of the popover's transform. Defaults to <see cref=\"F:MudBlazor.Origin.TopLeft\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TransformOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<System.DateTime?, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.DateTime?>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDatePicker",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -838855306,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDatePicker.PickerActions",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the action buttons here\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PickerActions",
            "ParentTag": "MudDatePicker"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'PickerActions' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDatePicker.PickerActions",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -579964296,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDatePicker.PickerActions",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the action buttons here\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PickerActions",
            "ParentTag": "MudBlazor.MudDatePicker"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'PickerActions' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDatePicker.PickerActions",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2077466538,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDateRangePicker",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDateRangePicker"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "DateRangeChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.DateRange>",
            "Documentation": "\n            <summary>\n            Fired when the DateFormat changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DateRangeChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DateRange",
            "TypeName": "MudBlazor.DateRange",
            "Documentation": "\n            <summary>\n            The currently selected range (two-way bindable). If null, then nothing was selected.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DateRange"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxDate",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            Max selectable date.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxDate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinDate",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            Min selectable date.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MinDate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OpenTo",
            "TypeName": "MudBlazor.OpenTo",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            First view to show in the MudDatePicker.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OpenTo"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DateFormat",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            String Format for selected date view\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DateFormat"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FirstDayOfWeek",
            "TypeName": "System.DayOfWeek?",
            "Documentation": "\n            <summary>\n            Defines on which day the week starts. Depends on the value of Culture. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FirstDayOfWeek"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerMonth",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            The current month of the date picker (two-way bindable). This changes when the user browses through the calender.\n            The month is represented as a DateTime which is always the first day of that month. You can also set this to define which month is initially shown. If not set, the current month is shown.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerMonth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerMonthChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.DateTime?>",
            "Documentation": "\n            <summary>\n            Fired when the date changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerMonthChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClosingDelay",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Sets the amount of time in milliseconds to wait before closing the picker. This helps the user see that the date was selected before the popover disappears.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClosingDelay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayMonths",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Number of months to display in the calendar\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayMonths"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxMonthColumns",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Maximum number of months in one row\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxMonthColumns"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "StartMonth",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            Start month when opening the picker. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "StartMonth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowWeekNumbers",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Display week numbers according to the Culture parameter. If no culture is defined, CultureInfo.CurrentCulture will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowWeekNumbers"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TitleDateFormat",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Format of the selected date in the title. By default, this is \"ddd, dd MMM\" which abbreviates day and month names. \n            For instance, display the long names like this \"dddd, dd. MMMM\". \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TitleDateFormat"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoClose",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If AutoClose is set to true and PickerActions are defined, selecting a day will close the MudDatePicker.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoClose"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsDateDisabledFunc",
            "TypeName": "System.Func<System.DateTime, System.Boolean>",
            "Documentation": "\n            <summary>\n            Function to determine whether a date is disabled\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsDateDisabledFunc",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalDateClassesFunc",
            "TypeName": "System.Func<System.DateTime, System.String>",
            "Documentation": "\n            <summary>\n            Function to conditionally apply new classes to specific days\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalDateClassesFunc",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PreviousIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom previous icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PreviousIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NextIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom next icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NextIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FixYear",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Set a predefined fix year - no year can be selected\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FixYear"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FixMonth",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Set a predefined fix month - no month can be selected\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FixMonth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FixDay",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Set a predefined fix day - no day can be selected\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FixDay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the icon of the input text field\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the icon of the input text field\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the aria-label of the input text field icon\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerOpened",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown / dialog opens\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerOpened",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerClosed",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown / dialog closes\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerClosed",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow. 0 for no shadow set to 8 by default in inline mode and 0 in static mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to 0 this is set to true automatically in static mode but can be overridden with Rounded bool.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no date or time can be defined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Rounded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to theme default when in Static Mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Rounded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value, HelperText will be applied.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the picker will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Editable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the picker will be editable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Editable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableToolbar",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hide toolbar and show only date/time views.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableToolbar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToolBarClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for picker's ToolBar, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToolBarClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerVariant",
            "TypeName": "MudBlazor.PickerVariant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Picker container option\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerVariant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputVariant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Variant of the text input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputVariant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant of the text input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets if the icon will be att start or end, set to false to disable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Orientation",
            "TypeName": "MudBlazor.Orientation",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            What orientation to render in when in PickerVariant Static Mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Orientation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the toolbar, selected and active. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AllowKeyboardInput",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Changes the cursor appearance.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AllowKeyboardInput"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The currently selected string value (two-way bindable)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClassActions",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class that will be applied to the action buttons container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClassActions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerActions",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.MudPicker<System.DateTime?>>",
            "Documentation": "\n            <summary>\n            Define the action buttons here\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerActions",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Mask",
            "TypeName": "MudBlazor.IMask",
            "Documentation": "\n            <summary>\n            A mask for structured input of the date (requires Editable to be true).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Mask"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AnchorOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the origin of the popover's anchor. Defaults to <see cref=\"F:MudBlazor.Origin.TopLeft\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AnchorOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TransformOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the origin of the popover's transform. Defaults to <see cref=\"F:MudBlazor.Origin.TopLeft\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TransformOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<System.DateTime?, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.DateTime?>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDateRangePicker"
        }
      },
      {
        "HashCode": 180571237,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDateRangePicker",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDateRangePicker"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "DateRangeChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.DateRange>",
            "Documentation": "\n            <summary>\n            Fired when the DateFormat changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DateRangeChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DateRange",
            "TypeName": "MudBlazor.DateRange",
            "Documentation": "\n            <summary>\n            The currently selected range (two-way bindable). If null, then nothing was selected.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DateRange"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxDate",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            Max selectable date.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxDate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinDate",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            Min selectable date.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MinDate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OpenTo",
            "TypeName": "MudBlazor.OpenTo",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            First view to show in the MudDatePicker.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OpenTo"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DateFormat",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            String Format for selected date view\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DateFormat"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FirstDayOfWeek",
            "TypeName": "System.DayOfWeek?",
            "Documentation": "\n            <summary>\n            Defines on which day the week starts. Depends on the value of Culture. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FirstDayOfWeek"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerMonth",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            The current month of the date picker (two-way bindable). This changes when the user browses through the calender.\n            The month is represented as a DateTime which is always the first day of that month. You can also set this to define which month is initially shown. If not set, the current month is shown.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerMonth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerMonthChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.DateTime?>",
            "Documentation": "\n            <summary>\n            Fired when the date changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerMonthChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClosingDelay",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Sets the amount of time in milliseconds to wait before closing the picker. This helps the user see that the date was selected before the popover disappears.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClosingDelay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayMonths",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Number of months to display in the calendar\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisplayMonths"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxMonthColumns",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Maximum number of months in one row\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxMonthColumns"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "StartMonth",
            "TypeName": "System.DateTime?",
            "Documentation": "\n            <summary>\n            Start month when opening the picker. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "StartMonth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowWeekNumbers",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Display week numbers according to the Culture parameter. If no culture is defined, CultureInfo.CurrentCulture will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowWeekNumbers"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TitleDateFormat",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Format of the selected date in the title. By default, this is \"ddd, dd MMM\" which abbreviates day and month names. \n            For instance, display the long names like this \"dddd, dd. MMMM\". \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TitleDateFormat"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoClose",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If AutoClose is set to true and PickerActions are defined, selecting a day will close the MudDatePicker.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoClose"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsDateDisabledFunc",
            "TypeName": "System.Func<System.DateTime, System.Boolean>",
            "Documentation": "\n            <summary>\n            Function to determine whether a date is disabled\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsDateDisabledFunc",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalDateClassesFunc",
            "TypeName": "System.Func<System.DateTime, System.String>",
            "Documentation": "\n            <summary>\n            Function to conditionally apply new classes to specific days\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdditionalDateClassesFunc",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PreviousIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom previous icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PreviousIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NextIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom next icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NextIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FixYear",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Set a predefined fix year - no year can be selected\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FixYear"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FixMonth",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Set a predefined fix month - no month can be selected\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FixMonth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FixDay",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Set a predefined fix day - no day can be selected\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FixDay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the icon of the input text field\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the icon of the input text field\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the aria-label of the input text field icon\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerOpened",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown / dialog opens\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerOpened",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerClosed",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown / dialog closes\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerClosed",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow. 0 for no shadow set to 8 by default in inline mode and 0 in static mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to 0 this is set to true automatically in static mode but can be overridden with Rounded bool.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no date or time can be defined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Rounded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to theme default when in Static Mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Rounded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value, HelperText will be applied.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the picker will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Editable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the picker will be editable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Editable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableToolbar",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hide toolbar and show only date/time views.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableToolbar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToolBarClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for picker's ToolBar, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToolBarClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerVariant",
            "TypeName": "MudBlazor.PickerVariant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Picker container option\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerVariant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputVariant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Variant of the text input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputVariant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant of the text input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets if the icon will be att start or end, set to false to disable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Orientation",
            "TypeName": "MudBlazor.Orientation",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            What orientation to render in when in PickerVariant Static Mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Orientation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the toolbar, selected and active. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AllowKeyboardInput",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Changes the cursor appearance.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AllowKeyboardInput"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The currently selected string value (two-way bindable)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClassActions",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class that will be applied to the action buttons container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClassActions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerActions",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.MudPicker<System.DateTime?>>",
            "Documentation": "\n            <summary>\n            Define the action buttons here\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerActions",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Mask",
            "TypeName": "MudBlazor.IMask",
            "Documentation": "\n            <summary>\n            A mask for structured input of the date (requires Editable to be true).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Mask"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AnchorOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the origin of the popover's anchor. Defaults to <see cref=\"F:MudBlazor.Origin.TopLeft\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AnchorOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TransformOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the origin of the popover's transform. Defaults to <see cref=\"F:MudBlazor.Origin.TopLeft\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TransformOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<System.DateTime?, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.DateTime?>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDateRangePicker",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1029513371,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDateRangePicker.PickerActions",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the action buttons here\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PickerActions",
            "ParentTag": "MudDateRangePicker"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'PickerActions' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDateRangePicker.PickerActions",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 941938174,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDateRangePicker.PickerActions",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the action buttons here\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PickerActions",
            "ParentTag": "MudBlazor.MudDateRangePicker"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'PickerActions' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDateRangePicker.PickerActions",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 255186570,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDialog",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDialog"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TitleContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Define the dialog title as a renderfragment (overrides Title)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TitleContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DialogContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Define the dialog body here\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DialogContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DialogActions",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Define the action buttons here\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DialogActions",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Options",
            "TypeName": "MudBlazor.DialogOptions",
            "Documentation": "\n            <summary>\n            Default options to pass to Show(), if none are explicitly provided.\n            Typically useful on inline dialogs.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Options"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnBackdropClick",
            "TypeName": "System.Action",
            "Metadata": {
              "Common.PropertyName": "OnBackdropClick",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableSidePadding",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            No padding at the sides\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableSidePadding"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClassContent",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class that will be applied to the dialog content\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClassContent"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClassActions",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class that will be applied to the action buttons container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClassActions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ContentStyle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS styles to be applied to the dialog content\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ContentStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsVisible",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Bind this two-way to show and close an inlined dialog. Has no effect on opened dialogs\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsVisible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsVisibleChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Raised when the inline dialog's display status changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsVisibleChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DefaultFocus",
            "TypeName": "MudBlazor.DefaultFocus",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Define the dialog title as a renderfragment (overrides Title)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DefaultFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDialog"
        }
      },
      {
        "HashCode": -859994593,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDialog",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDialog"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TitleContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Define the dialog title as a renderfragment (overrides Title)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TitleContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DialogContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Define the dialog body here\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DialogContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DialogActions",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Define the action buttons here\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DialogActions",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Options",
            "TypeName": "MudBlazor.DialogOptions",
            "Documentation": "\n            <summary>\n            Default options to pass to Show(), if none are explicitly provided.\n            Typically useful on inline dialogs.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Options"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnBackdropClick",
            "TypeName": "System.Action",
            "Metadata": {
              "Common.PropertyName": "OnBackdropClick",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableSidePadding",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            No padding at the sides\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableSidePadding"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClassContent",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class that will be applied to the dialog content\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClassContent"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClassActions",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class that will be applied to the action buttons container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClassActions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ContentStyle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS styles to be applied to the dialog content\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ContentStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsVisible",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Bind this two-way to show and close an inlined dialog. Has no effect on opened dialogs\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsVisible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsVisibleChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Raised when the inline dialog's display status changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsVisibleChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DefaultFocus",
            "TypeName": "MudBlazor.DefaultFocus",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Define the dialog title as a renderfragment (overrides Title)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DefaultFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDialog",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 464375015,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDialog.TitleContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the dialog title as a renderfragment (overrides Title)\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "TitleContent",
            "ParentTag": "MudDialog"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDialog.TitleContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1630872351,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDialog.TitleContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the dialog title as a renderfragment (overrides Title)\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "TitleContent",
            "ParentTag": "MudBlazor.MudDialog"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDialog.TitleContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1389874709,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDialog.DialogContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the dialog body here\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "DialogContent",
            "ParentTag": "MudDialog"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDialog.DialogContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 2129707405,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDialog.DialogContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the dialog body here\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "DialogContent",
            "ParentTag": "MudBlazor.MudDialog"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDialog.DialogContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1160775053,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDialog.DialogActions",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the action buttons here\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "DialogActions",
            "ParentTag": "MudDialog"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDialog.DialogActions",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1189856283,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDialog.DialogActions",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the action buttons here\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "DialogActions",
            "ParentTag": "MudBlazor.MudDialog"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDialog.DialogActions",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1981071824,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDialogInstance",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDialogInstance"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Options",
            "TypeName": "MudBlazor.DialogOptions",
            "Metadata": {
              "Common.PropertyName": "Options"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TitleContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "TitleContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Content",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "Content",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.Guid",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom close icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDialogInstance"
        }
      },
      {
        "HashCode": 774557437,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDialogInstance",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDialogInstance"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Options",
            "TypeName": "MudBlazor.DialogOptions",
            "Metadata": {
              "Common.PropertyName": "Options"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TitleContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "TitleContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Content",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "Content",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Id",
            "TypeName": "System.Guid",
            "Metadata": {
              "Common.PropertyName": "Id"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom close icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDialogInstance",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -923890793,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDialogInstance.TitleContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "TitleContent",
            "ParentTag": "MudDialogInstance"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDialogInstance.TitleContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1733016702,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDialogInstance.TitleContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "TitleContent",
            "ParentTag": "MudBlazor.MudDialogInstance"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDialogInstance.TitleContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 715051821,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDialogInstance.Content",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Content",
            "ParentTag": "MudDialogInstance"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDialogInstance.Content",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -199764953,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDialogInstance.Content",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Content",
            "ParentTag": "MudBlazor.MudDialogInstance"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDialogInstance.Content",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -171082708,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDialogProvider",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDialogProvider"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "NoHeader",
            "TypeName": "System.Boolean?",
            "Metadata": {
              "Common.PropertyName": "NoHeader"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseButton",
            "TypeName": "System.Boolean?",
            "Metadata": {
              "Common.PropertyName": "CloseButton"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableBackdropClick",
            "TypeName": "System.Boolean?",
            "Metadata": {
              "Common.PropertyName": "DisableBackdropClick"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseOnEscapeKey",
            "TypeName": "System.Boolean?",
            "Metadata": {
              "Common.PropertyName": "CloseOnEscapeKey"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean?",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Position",
            "TypeName": "MudBlazor.DialogPosition?",
            "Metadata": {
              "Common.PropertyName": "Position"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxWidth",
            "TypeName": "MudBlazor.MaxWidth?",
            "Metadata": {
              "Common.PropertyName": "MaxWidth"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDialogProvider"
        }
      },
      {
        "HashCode": 1577067747,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDialogProvider",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDialogProvider"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "NoHeader",
            "TypeName": "System.Boolean?",
            "Metadata": {
              "Common.PropertyName": "NoHeader"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseButton",
            "TypeName": "System.Boolean?",
            "Metadata": {
              "Common.PropertyName": "CloseButton"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableBackdropClick",
            "TypeName": "System.Boolean?",
            "Metadata": {
              "Common.PropertyName": "DisableBackdropClick"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseOnEscapeKey",
            "TypeName": "System.Boolean?",
            "Metadata": {
              "Common.PropertyName": "CloseOnEscapeKey"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean?",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Position",
            "TypeName": "MudBlazor.DialogPosition?",
            "Metadata": {
              "Common.PropertyName": "Position"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxWidth",
            "TypeName": "MudBlazor.MaxWidth?",
            "Metadata": {
              "Common.PropertyName": "MaxWidth"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDialogProvider",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1086224374,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDrawer",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDrawer"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Fixed",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, drawer position will be fixed. (CSS position: fixed;)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Fixed"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow. 0 for no shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Anchor",
            "TypeName": "MudBlazor.Anchor",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Side from which the drawer will appear.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Anchor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.DrawerVariant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant of the drawer. It specifies how the drawer will be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableOverlay",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show overlay for responsive and temporary drawers.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableOverlay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PreserveOpenState",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Preserve open state for responsive drawer when window resized above <see cref=\"P:MudBlazor.MudDrawer.Breakpoint\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PreserveOpenState"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OpenMiniOnHover",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Open drawer automatically on mouse enter when <see cref=\"P:MudBlazor.MudDrawer.Variant\" /> parameter is set to <see cref=\"F:MudBlazor.DrawerVariant.Mini\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OpenMiniOnHover"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Breakpoint",
            "TypeName": "MudBlazor.Breakpoint",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Switching point for responsive drawers\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Breakpoint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Open",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Sets the opened state on the drawer. Can be used with two-way binding to close itself on navigation.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Open"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OpenChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Metadata": {
              "Common.PropertyName": "OpenChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Width",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Width of left/right drawer. Only for non-fixed drawers.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Width"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MiniWidth",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Width of left/right drawer. Only for non-fixed drawers.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MiniWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Height of top/bottom temporary drawer\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClipMode",
            "TypeName": "MudBlazor.DrawerClipMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Specify how the drawer should behave inside a MudLayout. It affects the position relative to <b>MudAppbar</b>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClipMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDrawer"
        }
      },
      {
        "HashCode": 1902783131,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDrawer",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDrawer"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Fixed",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, drawer position will be fixed. (CSS position: fixed;)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Fixed"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow. 0 for no shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Anchor",
            "TypeName": "MudBlazor.Anchor",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Side from which the drawer will appear.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Anchor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.DrawerVariant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant of the drawer. It specifies how the drawer will be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableOverlay",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show overlay for responsive and temporary drawers.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableOverlay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PreserveOpenState",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Preserve open state for responsive drawer when window resized above <see cref=\"P:MudBlazor.MudDrawer.Breakpoint\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PreserveOpenState"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OpenMiniOnHover",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Open drawer automatically on mouse enter when <see cref=\"P:MudBlazor.MudDrawer.Variant\" /> parameter is set to <see cref=\"F:MudBlazor.DrawerVariant.Mini\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OpenMiniOnHover"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Breakpoint",
            "TypeName": "MudBlazor.Breakpoint",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Switching point for responsive drawers\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Breakpoint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Open",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Sets the opened state on the drawer. Can be used with two-way binding to close itself on navigation.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Open"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OpenChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Metadata": {
              "Common.PropertyName": "OpenChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Width",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Width of left/right drawer. Only for non-fixed drawers.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Width"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MiniWidth",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Width of left/right drawer. Only for non-fixed drawers.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MiniWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Height of top/bottom temporary drawer\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClipMode",
            "TypeName": "MudBlazor.DrawerClipMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Specify how the drawer should behave inside a MudLayout. It affects the position relative to <b>MudAppbar</b>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClipMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDrawer",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1000577560,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDrawer.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudDrawer"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDrawer.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -125210758,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDrawer.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudDrawer"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDrawer.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 986417311,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDrawerContainer",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDrawerContainer"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDrawerContainer"
        }
      },
      {
        "HashCode": 1871798213,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDrawerContainer",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDrawerContainer"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDrawerContainer",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1395754970,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDrawerContainer.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudDrawerContainer"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDrawerContainer.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1183830581,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDrawerContainer.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudDrawerContainer"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDrawerContainer.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 699837515,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDropContainer<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            The container of a drag and drop zones\n            </summary>\n            <typeparam name=\"T\">Datetype of items</typeparam>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDropContainer"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudDropContainer<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component. This should include the drop zones\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.IEnumerable<T>",
            "Documentation": "\n            <summary>\n            The items that can be drag and dropped within the container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemRenderer",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Documentation": "\n            <summary>\n            The render fragment (template) that should be used to render the items within a drop zone\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemRenderer",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemsSelector",
            "TypeName": "System.Func<T, System.String, System.Boolean>",
            "Documentation": "\n            <summary>\n            The method is used to determinate if an item can be dropped within a drop zone\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemsSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemDropped",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.MudItemDropInfo<T>>",
            "Documentation": "\n            <summary>\n            Callback that indicates that an item has been dropped on a drop zone. Should be used to update the \"status\" of the data item\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemDropped",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CanDrop",
            "TypeName": "System.Func<T, System.String, System.Boolean>",
            "Documentation": "\n            <summary>\n            The method is used to determinate if an item can be dropped within a drop zone\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CanDrop",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CanDropClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The CSS class(es), that is applied to drop zones that are a valid target for drag and drop transaction\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CanDropClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NoDropClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The CSS class(es), that is applied to drop zones that are NOT valid target for drag and drop transaction\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NoDropClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ApplyDropClassesOnDragStarted",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, drop classes CanDropClass <see cref=\"P:MudBlazor.MudDropContainer`1.CanDropClass\" />  or NoDropClass <see cref=\"P:MudBlazor.MudDropContainer`1.NoDropClass\" /> or applied as soon, as a transaction has started\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ApplyDropClassesOnDragStarted"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemIsDisabled",
            "TypeName": "System.Func<T, System.Boolean>",
            "Documentation": "\n            <summary>\n            The method is used to determinate if an item should be disabled for dragging. Defaults to allow all items\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemIsDisabled",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisabledClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If a drop item is disabled (determinate by <see cref=\"P:MudBlazor.MudDropContainer`1.ItemIsDisabled\" />). This class is applied to the element\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisabledClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DraggingClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            An additional class that is applied to the drop zone where a drag operation started\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DraggingClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemDraggingClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            An additional class that is applied to an drop item, when it is dragged\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemDraggingClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDropContainer<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 1079662121,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDropContainer<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            The container of a drag and drop zones\n            </summary>\n            <typeparam name=\"T\">Datetype of items</typeparam>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDropContainer"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudDropContainer<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component. This should include the drop zones\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.IEnumerable<T>",
            "Documentation": "\n            <summary>\n            The items that can be drag and dropped within the container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemRenderer",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Documentation": "\n            <summary>\n            The render fragment (template) that should be used to render the items within a drop zone\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemRenderer",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemsSelector",
            "TypeName": "System.Func<T, System.String, System.Boolean>",
            "Documentation": "\n            <summary>\n            The method is used to determinate if an item can be dropped within a drop zone\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemsSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemDropped",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.MudItemDropInfo<T>>",
            "Documentation": "\n            <summary>\n            Callback that indicates that an item has been dropped on a drop zone. Should be used to update the \"status\" of the data item\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemDropped",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CanDrop",
            "TypeName": "System.Func<T, System.String, System.Boolean>",
            "Documentation": "\n            <summary>\n            The method is used to determinate if an item can be dropped within a drop zone\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CanDrop",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CanDropClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The CSS class(es), that is applied to drop zones that are a valid target for drag and drop transaction\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CanDropClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NoDropClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The CSS class(es), that is applied to drop zones that are NOT valid target for drag and drop transaction\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NoDropClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ApplyDropClassesOnDragStarted",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, drop classes CanDropClass <see cref=\"P:MudBlazor.MudDropContainer`1.CanDropClass\" />  or NoDropClass <see cref=\"P:MudBlazor.MudDropContainer`1.NoDropClass\" /> or applied as soon, as a transaction has started\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ApplyDropClassesOnDragStarted"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemIsDisabled",
            "TypeName": "System.Func<T, System.Boolean>",
            "Documentation": "\n            <summary>\n            The method is used to determinate if an item should be disabled for dragging. Defaults to allow all items\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemIsDisabled",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisabledClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If a drop item is disabled (determinate by <see cref=\"P:MudBlazor.MudDropContainer`1.ItemIsDisabled\" />). This class is applied to the element\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisabledClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DraggingClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            An additional class that is applied to the drop zone where a drag operation started\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DraggingClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemDraggingClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            An additional class that is applied to an drop item, when it is dragged\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemDraggingClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDropContainer<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1415023377,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDropContainer<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component. This should include the drop zones\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudDropContainer"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDropContainer<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1556177704,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDropContainer<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component. This should include the drop zones\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudDropContainer"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDropContainer<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1310435975,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDropContainer<T>.ItemRenderer",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            The render fragment (template) that should be used to render the items within a drop zone\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemRenderer",
            "ParentTag": "MudDropContainer"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemRenderer' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDropContainer<T>.ItemRenderer",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -556929576,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDropContainer<T>.ItemRenderer",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            The render fragment (template) that should be used to render the items within a drop zone\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemRenderer",
            "ParentTag": "MudBlazor.MudDropContainer"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemRenderer' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDropContainer<T>.ItemRenderer",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1572398973,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDropZone<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDropZone"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudDropZone<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Identifier",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The unique identifier of this drop zone. It is used within transaction to \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Identifier"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemRenderer",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Documentation": "\n            <summary>\n            The render fragment (template) that should be used to render the items within a drop zone. Overrides value provided by drop container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemRenderer",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemsSelector",
            "TypeName": "System.Func<T, System.Boolean>",
            "Documentation": "\n            <summary>\n            The method is used to determinate if an item can be dropped within a drop zone. Overrides value provided by drop container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemsSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CanDrop",
            "TypeName": "System.Func<T, System.Boolean>",
            "Documentation": "\n            <summary>\n            The method is used to determinate if an item can be dropped within a drop zone. Overrides value provided by drop container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CanDrop",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CanDropClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The CSS class(es), that is applied to drop zones that are a valid target for drag and drop transaction. Overrides value provided by drop container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CanDropClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NoDropClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The CSS class(es), that is applied to drop zones that are NOT valid target for drag and drop transaction. Overrides value provided by drop container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NoDropClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ApplyDropClassesOnDragStarted",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            If true, drop classes CanDropClass <see cref=\"P:MudBlazor.MudDropZone`1.CanDropClass\" />  or NoDropClass <see cref=\"P:MudBlazor.MudDropZone`1.NoDropClass\" /> or applied as soon, as a transaction has started. Overrides value provided by drop container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ApplyDropClassesOnDragStarted"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemIsDisabled",
            "TypeName": "System.Func<T, System.Boolean>",
            "Documentation": "\n            <summary>\n            The method is used to determinate if an item should be disabled for dragging. Defaults to allow all items. Overrides value provided by drop container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemIsDisabled",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisabledClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If a drop item is disabled (determinate by <see cref=\"P:MudBlazor.MudDropZone`1.ItemIsDisabled\" />). This class is applied to the element. Overrides value provided by drop container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisabledClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DraggingClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            An additional class that is applied to the drop zone where a drag operation started\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DraggingClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemDraggingClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            An additional class that is applied to an drop item, when it is dragged\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemDraggingClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AllowReorder",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "AllowReorder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnlyZone",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, will only act as a dropable zone and not render any items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnlyZone"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDropZone<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 1456224773,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDropZone<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDropZone"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudDropZone<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Identifier",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The unique identifier of this drop zone. It is used within transaction to \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Identifier"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemRenderer",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Documentation": "\n            <summary>\n            The render fragment (template) that should be used to render the items within a drop zone. Overrides value provided by drop container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemRenderer",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemsSelector",
            "TypeName": "System.Func<T, System.Boolean>",
            "Documentation": "\n            <summary>\n            The method is used to determinate if an item can be dropped within a drop zone. Overrides value provided by drop container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemsSelector",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CanDrop",
            "TypeName": "System.Func<T, System.Boolean>",
            "Documentation": "\n            <summary>\n            The method is used to determinate if an item can be dropped within a drop zone. Overrides value provided by drop container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CanDrop",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CanDropClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The CSS class(es), that is applied to drop zones that are a valid target for drag and drop transaction. Overrides value provided by drop container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CanDropClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NoDropClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The CSS class(es), that is applied to drop zones that are NOT valid target for drag and drop transaction. Overrides value provided by drop container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NoDropClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ApplyDropClassesOnDragStarted",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            If true, drop classes CanDropClass <see cref=\"P:MudBlazor.MudDropZone`1.CanDropClass\" />  or NoDropClass <see cref=\"P:MudBlazor.MudDropZone`1.NoDropClass\" /> or applied as soon, as a transaction has started. Overrides value provided by drop container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ApplyDropClassesOnDragStarted"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemIsDisabled",
            "TypeName": "System.Func<T, System.Boolean>",
            "Documentation": "\n            <summary>\n            The method is used to determinate if an item should be disabled for dragging. Defaults to allow all items. Overrides value provided by drop container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemIsDisabled",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisabledClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If a drop item is disabled (determinate by <see cref=\"P:MudBlazor.MudDropZone`1.ItemIsDisabled\" />). This class is applied to the element. Overrides value provided by drop container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisabledClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DraggingClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            An additional class that is applied to the drop zone where a drag operation started\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DraggingClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemDraggingClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            An additional class that is applied to an drop item, when it is dragged\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemDraggingClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AllowReorder",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "AllowReorder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnlyZone",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, will only act as a dropable zone and not render any items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnlyZone"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDropZone<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -658065882,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDropZone<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudDropZone"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDropZone<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 999755587,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDropZone<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudDropZone"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDropZone<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1760448346,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDropZone<T>.ItemRenderer",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            The render fragment (template) that should be used to render the items within a drop zone. Overrides value provided by drop container\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemRenderer",
            "ParentTag": "MudDropZone"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemRenderer' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDropZone<T>.ItemRenderer",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1965926817,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDropZone<T>.ItemRenderer",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            The render fragment (template) that should be used to render the items within a drop zone. Overrides value provided by drop container\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemRenderer",
            "ParentTag": "MudBlazor.MudDropZone"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemRenderer' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDropZone<T>.ItemRenderer",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 667265734,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDynamicDropItem<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDynamicDropItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudDynamicDropItem<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ZoneIdentifier",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The zone identifier of the corresponding drop zone\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ZoneIdentifier"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Item",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            the data item that is represneted by this item\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Item",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DraggingClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            An additional class that is applied to this element when a drag operation is in progress\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DraggingClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnDragStarted",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            An event callback set fires, when a drag operation has been started\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnDragStarted",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnDragEnded",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            An event callback set fires, when a drag operation has been eneded. This included also a cancelled transaction\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnDragEnded",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When true, the item can't be dragged. defaults to false\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisabledClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The class that is applied when disabled <see cref=\"P:MudBlazor.MudDynamicDropItem`1.Disabled\" /> is set to true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisabledClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Index",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "Index"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HideContent",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "HideContent"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDynamicDropItem<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -249957607,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDynamicDropItem<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDynamicDropItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudDynamicDropItem<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ZoneIdentifier",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The zone identifier of the corresponding drop zone\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ZoneIdentifier"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Item",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            the data item that is represneted by this item\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Item",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DraggingClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            An additional class that is applied to this element when a drag operation is in progress\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DraggingClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnDragStarted",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            An event callback set fires, when a drag operation has been started\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnDragStarted",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnDragEnded",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            An event callback set fires, when a drag operation has been eneded. This included also a cancelled transaction\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnDragEnded",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When true, the item can't be dragged. defaults to false\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisabledClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The class that is applied when disabled <see cref=\"P:MudBlazor.MudDynamicDropItem`1.Disabled\" /> is set to true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisabledClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Index",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "Index"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HideContent",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "HideContent"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDynamicDropItem<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 788747719,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDynamicDropItem<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudDynamicDropItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDynamicDropItem<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1936796116,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDynamicDropItem<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudDynamicDropItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDynamicDropItem<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -605699037,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudElement",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Primitive component which allows rendering any HTML element we want\n            through the HtmlTag property\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudElement"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HtmlTag",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HTML element that will be rendered in the root by the component\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HtmlTag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Ref",
            "TypeName": "Microsoft.AspNetCore.Components.ElementReference?",
            "Documentation": "\n            <summary>\n            The ElementReference to bind to.\n            Use like @bind-Ref=\"myRef\"\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Ref"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RefChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ElementReference>",
            "Metadata": {
              "Common.PropertyName": "RefChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudElement"
        }
      },
      {
        "HashCode": -1067961534,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudElement",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Primitive component which allows rendering any HTML element we want\n            through the HtmlTag property\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudElement"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HtmlTag",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HTML element that will be rendered in the root by the component\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HtmlTag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Ref",
            "TypeName": "Microsoft.AspNetCore.Components.ElementReference?",
            "Documentation": "\n            <summary>\n            The ElementReference to bind to.\n            Use like @bind-Ref=\"myRef\"\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Ref"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RefChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ElementReference>",
            "Metadata": {
              "Common.PropertyName": "RefChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudElement",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 492026827,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudElement.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudElement"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudElement.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -2050596109,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudElement.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudElement"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudElement.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1461016698,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudExpansionPanel",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudExpansionPanel"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "MaxHeight",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Explicitly sets the height for the Collapse element to override the css default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TitleContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            RenderFragment to be displayed in the expansion panel which will override header text if defined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TitleContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The text to be displayed in the expansion panel.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HideIcon",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, expand icon will not show\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HideIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom hide icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, removes vertical padding from childcontent.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableGutters",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the left and right padding is removed from childcontent.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableGutters"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsExpandedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Raised when IsExpanded changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsExpandedChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsExpanded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Expansion state of the panel (two-way bindable)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsExpanded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsInitiallyExpanded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Sets the initial expansion state. Do not use in combination with IsExpanded.\n            Combine with MultiExpansion to have more than one panel start open.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsInitiallyExpanded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the component will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudExpansionPanel"
        }
      },
      {
        "HashCode": 1333776459,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudExpansionPanel",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudExpansionPanel"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "MaxHeight",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Explicitly sets the height for the Collapse element to override the css default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TitleContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            RenderFragment to be displayed in the expansion panel which will override header text if defined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TitleContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The text to be displayed in the expansion panel.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HideIcon",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, expand icon will not show\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HideIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom hide icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, removes vertical padding from childcontent.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableGutters",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the left and right padding is removed from childcontent.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableGutters"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsExpandedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Raised when IsExpanded changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsExpandedChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsExpanded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Expansion state of the panel (two-way bindable)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsExpanded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsInitiallyExpanded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Sets the initial expansion state. Do not use in combination with IsExpanded.\n            Combine with MultiExpansion to have more than one panel start open.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsInitiallyExpanded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the component will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudExpansionPanel",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1145231150,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudExpansionPanel.TitleContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            RenderFragment to be displayed in the expansion panel which will override header text if defined.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "TitleContent",
            "ParentTag": "MudExpansionPanel"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudExpansionPanel.TitleContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1689051315,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudExpansionPanel.TitleContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            RenderFragment to be displayed in the expansion panel which will override header text if defined.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "TitleContent",
            "ParentTag": "MudBlazor.MudExpansionPanel"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudExpansionPanel.TitleContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -354803064,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudExpansionPanel.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudExpansionPanel"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudExpansionPanel.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 719527057,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudExpansionPanel.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudExpansionPanel"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudExpansionPanel.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -300144926,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudExpansionPanels",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudExpansionPanels"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to 0.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MultiExpansion",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, multiple panels can be expanded at the same time.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MultiExpansion"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow. 0 for no shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, removes vertical padding from all panels' childcontent.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableGutters",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the left and right padding is removed from all panels' childcontent.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableGutters"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableBorders",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the borders around each panel will be removed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableBorders"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudExpansionPanels"
        }
      },
      {
        "HashCode": 1627560831,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudExpansionPanels",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudExpansionPanels"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to 0.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MultiExpansion",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, multiple panels can be expanded at the same time.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MultiExpansion"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow. 0 for no shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, removes vertical padding from all panels' childcontent.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableGutters",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the left and right padding is removed from all panels' childcontent.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableGutters"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableBorders",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the borders around each panel will be removed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableBorders"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudExpansionPanels",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1386801684,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudExpansionPanels.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudExpansionPanels"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudExpansionPanels.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -616427639,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudExpansionPanels.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudExpansionPanels"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudExpansionPanels.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1890266876,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudField",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudField"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HelperText will be displayed below the text field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the field will take up the full width of its container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the field has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant can be Text, Filled or Outlined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon that will be used if Adornment is set to Start or End.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text that will be used if Adornment is set to Start or End, the Text overrides Icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Adornment if used. By default, it is set to None.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnAdornmentClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event if set and Adornment used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnAdornmentClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InnerPadding",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the inner contents padding is removed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InnerPadding"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableUnderLine",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the field will not have an underline.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableUnderLine"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudField"
        }
      },
      {
        "HashCode": -2062760803,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudField",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudField"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HelperText will be displayed below the text field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the field will take up the full width of its container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the field has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant can be Text, Filled or Outlined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon that will be used if Adornment is set to Start or End.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text that will be used if Adornment is set to Start or End, the Text overrides Icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Adornment if used. By default, it is set to None.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnAdornmentClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event if set and Adornment used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnAdornmentClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InnerPadding",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the inner contents padding is removed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InnerPadding"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableUnderLine",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the field will not have an underline.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableUnderLine"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudField",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -39726786,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudField.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudField"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudField.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1882486411,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudField.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudField"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudField.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -106835187,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudFocusTrap",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudFocusTrap"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the focus will no longer loop inside the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DefaultFocus",
            "TypeName": "MudBlazor.DefaultFocus",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Defines on which element to set the focus when the component is created or enabled.\n            When DefaultFocus.Element is used, the focus will be set to the FocusTrap itself, so the user will have to press TAB key once to focus the first tabbable element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DefaultFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudFocusTrap"
        }
      },
      {
        "HashCode": -70057559,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudFocusTrap",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudFocusTrap"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the focus will no longer loop inside the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DefaultFocus",
            "TypeName": "MudBlazor.DefaultFocus",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Defines on which element to set the focus when the component is created or enabled.\n            When DefaultFocus.Element is used, the focus will be set to the FocusTrap itself, so the user will have to press TAB key once to focus the first tabbable element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DefaultFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudFocusTrap",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1916432957,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudFocusTrap.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudFocusTrap"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudFocusTrap.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -211435730,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudFocusTrap.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudFocusTrap"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudFocusTrap.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1816695602,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudForm",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsValid",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Validation status. True if the form is valid and without errors. This parameter is two-way bindable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsValid"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsTouched",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            True if any field of the field was touched. This parameter is readonly.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsTouched"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValidationDelay",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Validation debounce delay in milliseconds. This can help improve rendering performance of forms with real-time validation of inputs\n            i.e. when textfields have Immediate=\"true\".\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValidationDelay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SuppressRenderingOnValidation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When true, the form will not re-render its child contents on validation updates (i.e. when IsValid changes).\n            This is an optimization which can be necessary especially for larger forms on older devices.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SuppressRenderingOnValidation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SuppressImplicitSubmission",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When true, will not cause a page refresh on Enter if any input has focus.\n            </summary>\n            <remarks>\n            https://www.w3.org/TR/2018/SPSD-html5-20180327/forms.html#implicit-submission\n            Usually this is not wanted, as it can cause a page refresh in the middle of editing a form. \n            When the form is in a dialog this will cause the dialog to close. So by default we suppress it.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "SuppressImplicitSubmission"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsValidChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Raised when IsValid changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsValidChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsTouchedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Raised when IsTouched changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsTouchedChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FieldChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.Utilities.FormFieldChangedEventArgs>",
            "Documentation": "\n            <summary>\n            Raised when a contained IFormComponent changes its value\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FieldChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A default validation func or a validation attribute to use for form controls that don't have one.\n            Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OverrideFieldValidation",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            If a field already has a validation, override it with <see cref=\"P:MudBlazor.MudForm.Validation\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OverrideFieldValidation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Errors",
            "TypeName": "System.String[]",
            "Documentation": "\n            <summary>\n            Validation error messages.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Errors"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorsChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String[]>",
            "Metadata": {
              "Common.PropertyName": "ErrorsChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Model",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Specifies the top-level model object for the form. Used with Fluent Validation\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Model"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudForm"
        }
      },
      {
        "HashCode": -1763369794,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudForm",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsValid",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Validation status. True if the form is valid and without errors. This parameter is two-way bindable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsValid"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsTouched",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            True if any field of the field was touched. This parameter is readonly.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsTouched"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValidationDelay",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Validation debounce delay in milliseconds. This can help improve rendering performance of forms with real-time validation of inputs\n            i.e. when textfields have Immediate=\"true\".\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValidationDelay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SuppressRenderingOnValidation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When true, the form will not re-render its child contents on validation updates (i.e. when IsValid changes).\n            This is an optimization which can be necessary especially for larger forms on older devices.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SuppressRenderingOnValidation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SuppressImplicitSubmission",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When true, will not cause a page refresh on Enter if any input has focus.\n            </summary>\n            <remarks>\n            https://www.w3.org/TR/2018/SPSD-html5-20180327/forms.html#implicit-submission\n            Usually this is not wanted, as it can cause a page refresh in the middle of editing a form. \n            When the form is in a dialog this will cause the dialog to close. So by default we suppress it.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "SuppressImplicitSubmission"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsValidChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Raised when IsValid changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsValidChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsTouchedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Raised when IsTouched changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsTouchedChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FieldChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.Utilities.FormFieldChangedEventArgs>",
            "Documentation": "\n            <summary>\n            Raised when a contained IFormComponent changes its value\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FieldChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A default validation func or a validation attribute to use for form controls that don't have one.\n            Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OverrideFieldValidation",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            If a field already has a validation, override it with <see cref=\"P:MudBlazor.MudForm.Validation\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OverrideFieldValidation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Errors",
            "TypeName": "System.String[]",
            "Documentation": "\n            <summary>\n            Validation error messages.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Errors"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorsChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String[]>",
            "Metadata": {
              "Common.PropertyName": "ErrorsChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Model",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Specifies the top-level model object for the form. Used with Fluent Validation\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Model"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudForm",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1485986650,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudForm.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudForm"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudForm.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 884707183,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudForm.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudForm"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudForm.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 931826963,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudHidden",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudHidden"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Breakpoint",
            "TypeName": "MudBlazor.Breakpoint",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The screen size(s) depending on which the ChildContent should not be rendered (or should be, if Invert is true)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Breakpoint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Invert",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Inverts the Breakpoint, so that the ChildContent is only rendered when the breakpoint matches the screen size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Invert"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsHidden",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            True if the component is not visible (two-way bindable)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsHidden"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsHiddenChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Fires when the breakpoint changes visibility of the component\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsHiddenChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudHidden"
        }
      },
      {
        "HashCode": -1253242149,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudHidden",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudHidden"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Breakpoint",
            "TypeName": "MudBlazor.Breakpoint",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The screen size(s) depending on which the ChildContent should not be rendered (or should be, if Invert is true)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Breakpoint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Invert",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Inverts the Breakpoint, so that the ChildContent is only rendered when the breakpoint matches the screen size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Invert"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsHidden",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            True if the component is not visible (two-way bindable)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsHidden"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsHiddenChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Fires when the breakpoint changes visibility of the component\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsHiddenChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudHidden",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 111418087,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudHidden.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudHidden"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudHidden.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -2096355058,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudHidden.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudHidden"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudHidden.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1655648375,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudHighlighter",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudHighlighter"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The whole text in which a fragment will be highlighted\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HighlightedText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The fragment of text to be highlighted\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HighlightedText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HighlightedTexts",
            "TypeName": "System.Collections.Generic.IEnumerable<System.String>",
            "Documentation": "\n            <summary>\n            The fragments of text to be highlighted\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HighlightedTexts"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CaseSensitive",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Whether or not the highlighted text is case sensitive\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CaseSensitive"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UntilNextBoundary",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, highlights the text until the next regex boundary\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UntilNextBoundary"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudHighlighter"
        }
      },
      {
        "HashCode": -1210965609,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudHighlighter",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudHighlighter"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The whole text in which a fragment will be highlighted\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HighlightedText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The fragment of text to be highlighted\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HighlightedText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HighlightedTexts",
            "TypeName": "System.Collections.Generic.IEnumerable<System.String>",
            "Documentation": "\n            <summary>\n            The fragments of text to be highlighted\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HighlightedTexts"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CaseSensitive",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Whether or not the highlighted text is case sensitive\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CaseSensitive"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UntilNextBoundary",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, highlights the text until the next regex boundary\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UntilNextBoundary"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudHighlighter",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1321187473,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudIcon",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudIcon"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon to be used can either be svg paths for font icons.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Title of the icon used for accessibility.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Size of the icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ViewBox",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The viewbox size of an svg element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ViewBox"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudIcon"
        }
      },
      {
        "HashCode": -1657729121,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudIcon",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudIcon"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon to be used can either be svg paths for font icons.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Title of the icon used for accessibility.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Size of the icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ViewBox",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The viewbox size of an svg element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ViewBox"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudIcon",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1669156847,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudIcon.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudIcon"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudIcon.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1769309833,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudIcon.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudIcon"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudIcon.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1732203823,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudImage",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudImage"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Fluid",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Applies the fluid class so the image scales with the parent width.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Fluid"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Src",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies the path to the image.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Src"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Alt",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies an alternate text for the image.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Alt"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Specifies the height of the image in px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Width",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Specifies the width of the image in px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Width"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ObjectFit",
            "TypeName": "MudBlazor.ObjectFit",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Controls how the image should be resized.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ObjectFit"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ObjectPosition",
            "TypeName": "MudBlazor.ObjectPosition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Controls how the image should positioned within its container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ObjectPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudImage"
        }
      },
      {
        "HashCode": -1791329683,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudImage",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudImage"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Fluid",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Applies the fluid class so the image scales with the parent width.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Fluid"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Src",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies the path to the image.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Src"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Alt",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies an alternate text for the image.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Alt"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Specifies the height of the image in px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Width",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Specifies the width of the image in px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Width"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ObjectFit",
            "TypeName": "MudBlazor.ObjectFit",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Controls how the image should be resized.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ObjectFit"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ObjectPosition",
            "TypeName": "MudBlazor.ObjectPosition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Controls how the image should positioned within its container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ObjectPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudImage",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -977599374,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudInputControl",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudInputControl"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Should be the Input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, will apply mud-input-required class to the output div\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HelperText will be displayed below the text field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CounterText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The current character counter, displayed below the text field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CounterText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will take up the full width of its container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant can be Text, Filled or Outlined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ForId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label \"for\" attribute will be added.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ForId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudInputControl"
        }
      },
      {
        "HashCode": -1842158797,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudInputControl",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudInputControl"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Should be the Input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, will apply mud-input-required class to the output div\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HelperText will be displayed below the text field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CounterText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The current character counter, displayed below the text field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CounterText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will take up the full width of its container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant can be Text, Filled or Outlined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ForId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label \"for\" attribute will be added.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ForId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudInputControl",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1226114977,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudInputControl.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudInputControl"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudInputControl.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 537289340,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudInputControl.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudInputControl"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudInputControl.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2037387416,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudInputControl.InputContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Should be the Input\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputContent",
            "ParentTag": "MudInputControl"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudInputControl.InputContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1903337112,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudInputControl.InputContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Should be the Input\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputContent",
            "ParentTag": "MudBlazor.MudInputControl"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudInputControl.InputContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1525333779,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudInput<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudInput"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudInput<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputType",
            "TypeName": "MudBlazor.InputType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Type of the input element. It should be a valid HTML5 input type.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            ChildContent of the MudInput will only be displayed if InputType.Hidden and if its not null.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnIncrement",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Invokes the callback when the Up arrow button is clicked when the input is set to <see cref=\"F:MudBlazor.InputType.Number\" />.\n            Note: use the optimized control <see cref=\"T:MudBlazor.MudNumericField`1\" /> if you need to deal with numbers.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnIncrement",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnDecrement",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Invokes the callback when the Down arrow button is clicked when the input is set to <see cref=\"F:MudBlazor.InputType.Number\" />.\n            Note: use the optimized control <see cref=\"T:MudBlazor.MudNumericField`1\" /> if you need to deal with numbers.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnDecrement",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HideSpinButtons",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hides the spin buttons for <see cref=\"T:MudBlazor.MudNumericField`1\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HideSpinButtons"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClearButtonClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event for clear button. Called after text and value has been cleared.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClearButtonClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnMouseWheel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs>",
            "Documentation": "\n            <summary>\n            Mouse wheel event for input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnMouseWheel",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClearIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom clear icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClearIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NumericUpIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom numeric up icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NumericUpIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NumericDownIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom numeric down icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NumericDownIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be read-only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will take up the full width of its container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Immediate",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will update the Value immediately on typing.\n            If false, the Value is updated only on Enter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Immediate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableUnderLine",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will not have an underline.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableUnderLine"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HelperText will be displayed below the text field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon that will be used if Adornment is set to Start or End.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text that will be used if Adornment is set to Start or End, the Text overrides Icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Adornment if used. By default, it is set to None.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnlyValidateIfDirty",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The validation is only triggered if the user has changed the input value at least once. By default, it is false\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnlyValidateIfDirty"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The aria-label of the adornment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnAdornmentClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event if set and Adornment used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnAdornmentClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Counter",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            If set, will display the counter, value 0 will display current count but no stop count.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Counter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxLength",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Maximum number of characters that the input will accept\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxLength"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true the input will focus automatically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Lines",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n             A multiline input (textarea) will be shown, if set to more than one line.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Lines"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n             The text to be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextUpdateSuppression",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).\n            This solves issue #1012: Textfield swallowing chars when typing rapidly\n            If you need to update the input's text while it is focused you can set this parameter to false.\n            Note: on WASM text update suppression is not active, so this parameter has no effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextUpdateSuppression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "MudBlazor.InputMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Hints at the type of data that might be entered by the user while editing the input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Pattern",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression\n            Not Supported in multline input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Pattern"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text value changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnBlur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element loses focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnBlur",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInternalInputChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element changes internally its text value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInternalInputChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyDown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyDown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyDownPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyDownPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyPress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyPress",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyPressPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyPressPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyUp",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyUp",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyUpPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyUpPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Fired when the Value property changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The value of this input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Format",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Format"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<T, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<T>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudInput<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -1536295908,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudInput<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudInput"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudInput<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputType",
            "TypeName": "MudBlazor.InputType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Type of the input element. It should be a valid HTML5 input type.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            ChildContent of the MudInput will only be displayed if InputType.Hidden and if its not null.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnIncrement",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Invokes the callback when the Up arrow button is clicked when the input is set to <see cref=\"F:MudBlazor.InputType.Number\" />.\n            Note: use the optimized control <see cref=\"T:MudBlazor.MudNumericField`1\" /> if you need to deal with numbers.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnIncrement",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnDecrement",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Invokes the callback when the Down arrow button is clicked when the input is set to <see cref=\"F:MudBlazor.InputType.Number\" />.\n            Note: use the optimized control <see cref=\"T:MudBlazor.MudNumericField`1\" /> if you need to deal with numbers.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnDecrement",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HideSpinButtons",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hides the spin buttons for <see cref=\"T:MudBlazor.MudNumericField`1\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HideSpinButtons"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClearButtonClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event for clear button. Called after text and value has been cleared.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClearButtonClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnMouseWheel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs>",
            "Documentation": "\n            <summary>\n            Mouse wheel event for input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnMouseWheel",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClearIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom clear icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClearIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NumericUpIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom numeric up icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NumericUpIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NumericDownIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom numeric down icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NumericDownIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be read-only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will take up the full width of its container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Immediate",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will update the Value immediately on typing.\n            If false, the Value is updated only on Enter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Immediate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableUnderLine",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will not have an underline.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableUnderLine"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HelperText will be displayed below the text field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon that will be used if Adornment is set to Start or End.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text that will be used if Adornment is set to Start or End, the Text overrides Icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Adornment if used. By default, it is set to None.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnlyValidateIfDirty",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The validation is only triggered if the user has changed the input value at least once. By default, it is false\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnlyValidateIfDirty"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The aria-label of the adornment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnAdornmentClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event if set and Adornment used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnAdornmentClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Counter",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            If set, will display the counter, value 0 will display current count but no stop count.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Counter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxLength",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Maximum number of characters that the input will accept\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxLength"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true the input will focus automatically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Lines",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n             A multiline input (textarea) will be shown, if set to more than one line.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Lines"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n             The text to be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextUpdateSuppression",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).\n            This solves issue #1012: Textfield swallowing chars when typing rapidly\n            If you need to update the input's text while it is focused you can set this parameter to false.\n            Note: on WASM text update suppression is not active, so this parameter has no effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextUpdateSuppression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "MudBlazor.InputMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Hints at the type of data that might be entered by the user while editing the input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Pattern",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression\n            Not Supported in multline input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Pattern"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text value changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnBlur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element loses focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnBlur",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInternalInputChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element changes internally its text value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInternalInputChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyDown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyDown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyDownPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyDownPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyPress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyPress",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyPressPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyPressPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyUp",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyUp",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyUpPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyUpPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Fired when the Value property changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The value of this input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Format",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Format"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<T, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<T>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudInput<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 682035170,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudInput<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            ChildContent of the MudInput will only be displayed if InputType.Hidden and if its not null.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudInput"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudInput<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1389512906,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudInput<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            ChildContent of the MudInput will only be displayed if InputType.Hidden and if its not null.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudInput"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudInput<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1799359023,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudInputString",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudInputString"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "InputType",
            "TypeName": "MudBlazor.InputType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Type of the input element. It should be a valid HTML5 input type.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            ChildContent of the MudInput will only be displayed if InputType.Hidden and if its not null.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnIncrement",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Invokes the callback when the Up arrow button is clicked when the input is set to <see cref=\"F:MudBlazor.InputType.Number\" />.\n            Note: use the optimized control <see cref=\"T:MudBlazor.MudNumericField`1\" /> if you need to deal with numbers.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnIncrement",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnDecrement",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Invokes the callback when the Down arrow button is clicked when the input is set to <see cref=\"F:MudBlazor.InputType.Number\" />.\n            Note: use the optimized control <see cref=\"T:MudBlazor.MudNumericField`1\" /> if you need to deal with numbers.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnDecrement",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HideSpinButtons",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hides the spin buttons for <see cref=\"T:MudBlazor.MudNumericField`1\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HideSpinButtons"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClearButtonClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event for clear button. Called after text and value has been cleared.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClearButtonClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnMouseWheel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs>",
            "Documentation": "\n            <summary>\n            Mouse wheel event for input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnMouseWheel",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClearIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom clear icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClearIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NumericUpIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom numeric up icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NumericUpIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NumericDownIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom numeric down icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NumericDownIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be read-only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will take up the full width of its container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Immediate",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will update the Value immediately on typing.\n            If false, the Value is updated only on Enter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Immediate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableUnderLine",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will not have an underline.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableUnderLine"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HelperText will be displayed below the text field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon that will be used if Adornment is set to Start or End.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text that will be used if Adornment is set to Start or End, the Text overrides Icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Adornment if used. By default, it is set to None.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnlyValidateIfDirty",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The validation is only triggered if the user has changed the input value at least once. By default, it is false\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnlyValidateIfDirty"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The aria-label of the adornment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnAdornmentClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event if set and Adornment used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnAdornmentClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Counter",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            If set, will display the counter, value 0 will display current count but no stop count.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Counter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxLength",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Maximum number of characters that the input will accept\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxLength"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true the input will focus automatically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Lines",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n             A multiline input (textarea) will be shown, if set to more than one line.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Lines"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n             The text to be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextUpdateSuppression",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).\n            This solves issue #1012: Textfield swallowing chars when typing rapidly\n            If you need to update the input's text while it is focused you can set this parameter to false.\n            Note: on WASM text update suppression is not active, so this parameter has no effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextUpdateSuppression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "MudBlazor.InputMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Hints at the type of data that might be entered by the user while editing the input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Pattern",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression\n            Not Supported in multline input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Pattern"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text value changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnBlur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element loses focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnBlur",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInternalInputChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element changes internally its text value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInternalInputChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyDown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyDown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyDownPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyDownPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyPress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyPress",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyPressPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyPressPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyUp",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyUp",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyUpPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyUpPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the Value property changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The value of this input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Format",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Format"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<System.String, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudInputString"
        }
      },
      {
        "HashCode": 1860164272,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudInputString",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudInputString"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "InputType",
            "TypeName": "MudBlazor.InputType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Type of the input element. It should be a valid HTML5 input type.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            ChildContent of the MudInput will only be displayed if InputType.Hidden and if its not null.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnIncrement",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Invokes the callback when the Up arrow button is clicked when the input is set to <see cref=\"F:MudBlazor.InputType.Number\" />.\n            Note: use the optimized control <see cref=\"T:MudBlazor.MudNumericField`1\" /> if you need to deal with numbers.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnIncrement",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnDecrement",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Invokes the callback when the Down arrow button is clicked when the input is set to <see cref=\"F:MudBlazor.InputType.Number\" />.\n            Note: use the optimized control <see cref=\"T:MudBlazor.MudNumericField`1\" /> if you need to deal with numbers.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnDecrement",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HideSpinButtons",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hides the spin buttons for <see cref=\"T:MudBlazor.MudNumericField`1\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HideSpinButtons"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClearButtonClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event for clear button. Called after text and value has been cleared.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClearButtonClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnMouseWheel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs>",
            "Documentation": "\n            <summary>\n            Mouse wheel event for input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnMouseWheel",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClearIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom clear icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClearIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NumericUpIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom numeric up icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NumericUpIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NumericDownIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom numeric down icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NumericDownIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be read-only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will take up the full width of its container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Immediate",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will update the Value immediately on typing.\n            If false, the Value is updated only on Enter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Immediate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableUnderLine",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will not have an underline.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableUnderLine"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HelperText will be displayed below the text field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon that will be used if Adornment is set to Start or End.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text that will be used if Adornment is set to Start or End, the Text overrides Icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Adornment if used. By default, it is set to None.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnlyValidateIfDirty",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The validation is only triggered if the user has changed the input value at least once. By default, it is false\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnlyValidateIfDirty"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The aria-label of the adornment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnAdornmentClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event if set and Adornment used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnAdornmentClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Counter",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            If set, will display the counter, value 0 will display current count but no stop count.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Counter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxLength",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Maximum number of characters that the input will accept\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxLength"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true the input will focus automatically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Lines",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n             A multiline input (textarea) will be shown, if set to more than one line.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Lines"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n             The text to be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextUpdateSuppression",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).\n            This solves issue #1012: Textfield swallowing chars when typing rapidly\n            If you need to update the input's text while it is focused you can set this parameter to false.\n            Note: on WASM text update suppression is not active, so this parameter has no effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextUpdateSuppression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "MudBlazor.InputMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Hints at the type of data that might be entered by the user while editing the input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Pattern",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression\n            Not Supported in multline input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Pattern"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text value changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnBlur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element loses focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnBlur",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInternalInputChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element changes internally its text value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInternalInputChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyDown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyDown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyDownPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyDownPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyPress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyPress",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyPressPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyPressPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyUp",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyUp",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyUpPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyUpPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the Value property changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The value of this input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Format",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Format"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<System.String, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudInputString",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -980060542,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudInputString.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            ChildContent of the MudInput will only be displayed if InputType.Hidden and if its not null.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudInputString"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudInputString.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -387755995,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudInputString.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            ChildContent of the MudInput will only be displayed if InputType.Hidden and if its not null.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudInputString"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudInputString.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2133297969,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudInputLabel",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudInputLabel"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ForId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n             Will set the for attribute for WCAG accessiblility\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ForId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudInputLabel"
        }
      },
      {
        "HashCode": -155619729,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudInputLabel",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudInputLabel"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ForId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n             Will set the for attribute for WCAG accessiblility\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ForId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudInputLabel",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -716485478,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudInputLabel.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudInputLabel"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudInputLabel.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1037350056,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudInputLabel.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudInputLabel"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudInputLabel.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -855483294,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudRangeInput<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudRangeInput"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudRangeInput<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputType",
            "TypeName": "MudBlazor.InputType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Type of the input element. It should be a valid HTML5 input type.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PlaceholderStart",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the start input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PlaceholderStart"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PlaceholderEnd",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the end input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PlaceholderEnd"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            ChildContent of the MudInput will only be displayed if InputType.Hidden and if its not null.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SeparatorIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom separator icon, leave null for default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SeparatorIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be read-only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will take up the full width of its container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Immediate",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will update the Value immediately on typing.\n            If false, the Value is updated only on Enter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Immediate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableUnderLine",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will not have an underline.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableUnderLine"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HelperText will be displayed below the text field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon that will be used if Adornment is set to Start or End.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text that will be used if Adornment is set to Start or End, the Text overrides Icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Adornment if used. By default, it is set to None.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnlyValidateIfDirty",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The validation is only triggered if the user has changed the input value at least once. By default, it is false\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnlyValidateIfDirty"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The aria-label of the adornment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnAdornmentClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event if set and Adornment used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnAdornmentClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Counter",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            If set, will display the counter, value 0 will display current count but no stop count.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Counter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxLength",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Maximum number of characters that the input will accept\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxLength"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true the input will focus automatically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Lines",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n             A multiline input (textarea) will be shown, if set to more than one line.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Lines"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n             The text to be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextUpdateSuppression",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).\n            This solves issue #1012: Textfield swallowing chars when typing rapidly\n            If you need to update the input's text while it is focused you can set this parameter to false.\n            Note: on WASM text update suppression is not active, so this parameter has no effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextUpdateSuppression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "MudBlazor.InputMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Hints at the type of data that might be entered by the user while editing the input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Pattern",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression\n            Not Supported in multline input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Pattern"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text value changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnBlur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element loses focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnBlur",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInternalInputChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element changes internally its text value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInternalInputChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyDown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyDown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyDownPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyDownPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyPress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyPress",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyPressPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyPressPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyUp",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyUp",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyUpPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyUpPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.Range<T>>",
            "Documentation": "\n            <summary>\n            Fired when the Value property changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "MudBlazor.Range<T>",
            "Documentation": "\n            <summary>\n            The value of this input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Format",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Format"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<MudBlazor.Range<T>, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<MudBlazor.Range<T>>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudRangeInput<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -341971743,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudRangeInput<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudRangeInput"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudRangeInput<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputType",
            "TypeName": "MudBlazor.InputType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Type of the input element. It should be a valid HTML5 input type.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PlaceholderStart",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the start input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PlaceholderStart"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PlaceholderEnd",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the end input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PlaceholderEnd"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            ChildContent of the MudInput will only be displayed if InputType.Hidden and if its not null.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SeparatorIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom separator icon, leave null for default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SeparatorIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be read-only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will take up the full width of its container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Immediate",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will update the Value immediately on typing.\n            If false, the Value is updated only on Enter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Immediate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableUnderLine",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will not have an underline.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableUnderLine"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HelperText will be displayed below the text field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon that will be used if Adornment is set to Start or End.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text that will be used if Adornment is set to Start or End, the Text overrides Icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Adornment if used. By default, it is set to None.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnlyValidateIfDirty",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The validation is only triggered if the user has changed the input value at least once. By default, it is false\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnlyValidateIfDirty"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The aria-label of the adornment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnAdornmentClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event if set and Adornment used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnAdornmentClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Counter",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            If set, will display the counter, value 0 will display current count but no stop count.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Counter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxLength",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Maximum number of characters that the input will accept\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxLength"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true the input will focus automatically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Lines",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n             A multiline input (textarea) will be shown, if set to more than one line.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Lines"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n             The text to be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextUpdateSuppression",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).\n            This solves issue #1012: Textfield swallowing chars when typing rapidly\n            If you need to update the input's text while it is focused you can set this parameter to false.\n            Note: on WASM text update suppression is not active, so this parameter has no effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextUpdateSuppression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "MudBlazor.InputMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Hints at the type of data that might be entered by the user while editing the input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Pattern",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression\n            Not Supported in multline input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Pattern"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text value changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnBlur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element loses focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnBlur",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInternalInputChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element changes internally its text value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInternalInputChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyDown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyDown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyDownPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyDownPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyPress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyPress",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyPressPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyPressPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyUp",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyUp",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyUpPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyUpPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.Range<T>>",
            "Documentation": "\n            <summary>\n            Fired when the Value property changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "MudBlazor.Range<T>",
            "Documentation": "\n            <summary>\n            The value of this input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Format",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Format"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<MudBlazor.Range<T>, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<MudBlazor.Range<T>>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudRangeInput<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1954804775,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudRangeInput<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            ChildContent of the MudInput will only be displayed if InputType.Hidden and if its not null.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudRangeInput"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudRangeInput<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1097918741,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudRangeInput<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            ChildContent of the MudInput will only be displayed if InputType.Hidden and if its not null.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudRangeInput"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudRangeInput<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -758999324,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudLayout",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudLayout"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudLayout"
        }
      },
      {
        "HashCode": -1275487452,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudLayout",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudLayout"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudLayout",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 395466146,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudLayout.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudLayout"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudLayout.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 863992460,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudLayout.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudLayout"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudLayout.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1365102255,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudLink",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudLink"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Typo",
            "TypeName": "MudBlazor.Typo",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Typography variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Typo"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Underline",
            "TypeName": "MudBlazor.Underline",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Controls when the link should have an underline.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Underline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The URL, which is the actual link.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Target",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The target attribute specifies where to open the link, if Link is specified. Possible values: _blank | _self | _parent | _top | <i>framename</i>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Target"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the navlink will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudLink"
        }
      },
      {
        "HashCode": -714778419,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudLink",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudLink"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Typo",
            "TypeName": "MudBlazor.Typo",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Typography variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Typo"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Underline",
            "TypeName": "MudBlazor.Underline",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Controls when the link should have an underline.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Underline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The URL, which is the actual link.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Target",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The target attribute specifies where to open the link, if Link is specified. Possible values: _blank | _self | _parent | _top | <i>framename</i>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Target"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the navlink will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudLink",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2094770233,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudLink.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudLink"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudLink.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -2094497056,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudLink.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudLink"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudLink.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1966991850,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudList",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudList"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the selected List Item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clickable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true to make the list items clickable. This is also the precondition for list selection to work.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clickable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisablePadding",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, vertical padding will be removed from the list.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisablePadding"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact vertical padding will be applied to all list items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableGutters",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the left and right padding is removed on all list items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableGutters"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, will disable the list item if it has onclick.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedItem",
            "TypeName": "MudBlazor.MudListItem",
            "Documentation": "\n            <summary>\n            The current selected list item.\n            Note: make the list Clickable for item selection to work.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedItem"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedItemChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.MudListItem>",
            "Documentation": "\n            <summary>\n            Called whenever the selection changed\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedItemChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedValue",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            The current selected value.\n            Note: make the list Clickable for item selection to work.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedValue"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Object>",
            "Documentation": "\n            <summary>\n            Called whenever the selection changed\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudList"
        }
      },
      {
        "HashCode": -2111027405,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudList",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudList"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the selected List Item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clickable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true to make the list items clickable. This is also the precondition for list selection to work.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clickable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisablePadding",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, vertical padding will be removed from the list.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisablePadding"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact vertical padding will be applied to all list items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableGutters",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the left and right padding is removed on all list items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableGutters"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, will disable the list item if it has onclick.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedItem",
            "TypeName": "MudBlazor.MudListItem",
            "Documentation": "\n            <summary>\n            The current selected list item.\n            Note: make the list Clickable for item selection to work.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedItem"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedItemChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.MudListItem>",
            "Documentation": "\n            <summary>\n            Called whenever the selection changed\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedItemChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedValue",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            The current selected value.\n            Note: make the list Clickable for item selection to work.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedValue"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Object>",
            "Documentation": "\n            <summary>\n            Called whenever the selection changed\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudList",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 312464517,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudList.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudList"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudList.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1425544509,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudList.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudList"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudList.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1696871615,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudListItem",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudListItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The text to display\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Object",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Avatar",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Avatar to use if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Avatar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Link to a URL when clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ForceLoad",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, force browser to redirect outside component router-space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ForceLoad"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AvatarClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Avatar CSS Class to apply if Avatar is set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AvatarClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, will disable the list item if it has onclick.\n            The value can be overridden by the parent list.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon to use if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandLessIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom expand less icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandLessIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandMoreIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom expand more icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandMoreIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Inset",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the List Subheader will be indented.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Inset"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            If true, compact vertical padding will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableGutters",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the left and right padding is removed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableGutters"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Expanded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Expand or collapse nested list. Two-way bindable. Note: if you directly set this to\n            true or false (instead of using two-way binding) it will force the nested list's expansion state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Expanded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Metadata": {
              "Common.PropertyName": "ExpandedChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InitiallyExpanded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, expands the nested list on first display\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InitiallyExpanded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommandParameter",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Command parameter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommandParameter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Command",
            "TypeName": "System.Windows.Input.ICommand",
            "Documentation": "\n            <summary>\n            Command executed when the user clicks on an element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Command"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Display content of this list item. If set, this overrides Text\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickHandlerPreventDefault",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "OnClickHandlerPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NestedList",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Add child list items here to create a nested list.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NestedList",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            List click event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudListItem"
        }
      },
      {
        "HashCode": -1146113790,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudListItem",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudListItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The text to display\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Object",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Avatar",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Avatar to use if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Avatar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Link to a URL when clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ForceLoad",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, force browser to redirect outside component router-space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ForceLoad"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AvatarClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Avatar CSS Class to apply if Avatar is set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AvatarClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, will disable the list item if it has onclick.\n            The value can be overridden by the parent list.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon to use if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandLessIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom expand less icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandLessIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandMoreIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom expand more icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandMoreIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Inset",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the List Subheader will be indented.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Inset"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            If true, compact vertical padding will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableGutters",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the left and right padding is removed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableGutters"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Expanded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Expand or collapse nested list. Two-way bindable. Note: if you directly set this to\n            true or false (instead of using two-way binding) it will force the nested list's expansion state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Expanded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Metadata": {
              "Common.PropertyName": "ExpandedChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InitiallyExpanded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, expands the nested list on first display\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InitiallyExpanded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommandParameter",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Command parameter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommandParameter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Command",
            "TypeName": "System.Windows.Input.ICommand",
            "Documentation": "\n            <summary>\n            Command executed when the user clicks on an element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Command"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Display content of this list item. If set, this overrides Text\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClickHandlerPreventDefault",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "OnClickHandlerPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NestedList",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Add child list items here to create a nested list.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NestedList",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            List click event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudListItem",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1742844087,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudListItem.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Display content of this list item. If set, this overrides Text\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudListItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudListItem.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 941419847,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudListItem.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Display content of this list item. If set, this overrides Text\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudListItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudListItem.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1578293061,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudListItem.NestedList",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Add child list items here to create a nested list.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NestedList",
            "ParentTag": "MudListItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudListItem.NestedList",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 2091765734,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudListItem.NestedList",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Add child list items here to create a nested list.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NestedList",
            "ParentTag": "MudBlazor.MudListItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudListItem.NestedList",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -964417343,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudListSubheader",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudListSubheader"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableGutters",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "DisableGutters"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Inset",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Inset"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudListSubheader"
        }
      },
      {
        "HashCode": 1061310221,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudListSubheader",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudListSubheader"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableGutters",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "DisableGutters"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Inset",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Inset"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudListSubheader",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1807539129,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudListSubheader.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudListSubheader"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudListSubheader.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1516548008,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudListSubheader.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudListSubheader"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudListSubheader.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 489480996,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudMask",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudMask"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            ChildContent will only be displayed if InputType.Hidden and if its not null. Required for Select\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Mask",
            "TypeName": "MudBlazor.IMask",
            "Documentation": "\n            <summary>\n            Provide a masking object. Built-in masks are PatternMask, MultiMask, RegexMask and BlockMask\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Mask"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputType",
            "TypeName": "MudBlazor.InputType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Type of the input element. It should be a valid HTML5 input type.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClearButtonClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event for clear button. Called after text and value has been cleared.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClearButtonClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClearIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom clear icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClearIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be read-only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will take up the full width of its container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Immediate",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will update the Value immediately on typing.\n            If false, the Value is updated only on Enter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Immediate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableUnderLine",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will not have an underline.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableUnderLine"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HelperText will be displayed below the text field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon that will be used if Adornment is set to Start or End.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text that will be used if Adornment is set to Start or End, the Text overrides Icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Adornment if used. By default, it is set to None.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnlyValidateIfDirty",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The validation is only triggered if the user has changed the input value at least once. By default, it is false\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnlyValidateIfDirty"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The aria-label of the adornment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnAdornmentClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event if set and Adornment used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnAdornmentClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Counter",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            If set, will display the counter, value 0 will display current count but no stop count.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Counter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxLength",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Maximum number of characters that the input will accept\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxLength"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true the input will focus automatically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Lines",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n             A multiline input (textarea) will be shown, if set to more than one line.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Lines"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n             The text to be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextUpdateSuppression",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).\n            This solves issue #1012: Textfield swallowing chars when typing rapidly\n            If you need to update the input's text while it is focused you can set this parameter to false.\n            Note: on WASM text update suppression is not active, so this parameter has no effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextUpdateSuppression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "MudBlazor.InputMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Hints at the type of data that might be entered by the user while editing the input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Pattern",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression\n            Not Supported in multline input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Pattern"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text value changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnBlur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element loses focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnBlur",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInternalInputChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element changes internally its text value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInternalInputChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyDown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyDown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyDownPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyDownPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyPress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyPress",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyPressPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyPressPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyUp",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyUp",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyUpPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyUpPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the Value property changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The value of this input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Format",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Format"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<System.String, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudMask"
        }
      },
      {
        "HashCode": 213455594,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudMask",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudMask"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            ChildContent will only be displayed if InputType.Hidden and if its not null. Required for Select\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Mask",
            "TypeName": "MudBlazor.IMask",
            "Documentation": "\n            <summary>\n            Provide a masking object. Built-in masks are PatternMask, MultiMask, RegexMask and BlockMask\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Mask"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputType",
            "TypeName": "MudBlazor.InputType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Type of the input element. It should be a valid HTML5 input type.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClearButtonClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event for clear button. Called after text and value has been cleared.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClearButtonClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClearIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom clear icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClearIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be read-only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will take up the full width of its container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Immediate",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will update the Value immediately on typing.\n            If false, the Value is updated only on Enter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Immediate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableUnderLine",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will not have an underline.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableUnderLine"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HelperText will be displayed below the text field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon that will be used if Adornment is set to Start or End.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text that will be used if Adornment is set to Start or End, the Text overrides Icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Adornment if used. By default, it is set to None.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnlyValidateIfDirty",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The validation is only triggered if the user has changed the input value at least once. By default, it is false\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnlyValidateIfDirty"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The aria-label of the adornment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnAdornmentClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event if set and Adornment used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnAdornmentClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Counter",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            If set, will display the counter, value 0 will display current count but no stop count.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Counter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxLength",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Maximum number of characters that the input will accept\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxLength"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true the input will focus automatically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Lines",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n             A multiline input (textarea) will be shown, if set to more than one line.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Lines"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n             The text to be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextUpdateSuppression",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).\n            This solves issue #1012: Textfield swallowing chars when typing rapidly\n            If you need to update the input's text while it is focused you can set this parameter to false.\n            Note: on WASM text update suppression is not active, so this parameter has no effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextUpdateSuppression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "MudBlazor.InputMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Hints at the type of data that might be entered by the user while editing the input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Pattern",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression\n            Not Supported in multline input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Pattern"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text value changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnBlur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element loses focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnBlur",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInternalInputChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element changes internally its text value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInternalInputChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyDown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyDown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyDownPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyDownPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyPress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyPress",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyPressPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyPressPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyUp",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyUp",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyUpPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyUpPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the Value property changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The value of this input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Format",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Format"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<System.String, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudMask",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1612729597,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudMask.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            ChildContent will only be displayed if InputType.Hidden and if its not null. Required for Select\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudMask"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudMask.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -438755907,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudMask.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            ChildContent will only be displayed if InputType.Hidden and if its not null. Required for Select\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudMask"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudMask.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1556048217,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudMenu",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudMenu"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ListClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for the list, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ListClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PopoverClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for the popover, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PopoverClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon to use if set will turn the button into a MudIconButton.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "StartIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon placed before the text if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "StartIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EndIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon placed after the text if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EndIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the button. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The button Size of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The button variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact vertical padding will be applied to all menu items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the list menu will be same width as the parent.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxHeight",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Sets the maxheight the menu can have when open.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PositionAtCursor",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, instead of positioning the menu at the left upper corner, position at the exact cursor location.\n            This makes sense for larger activators\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PositionAtCursor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PositionAtCurser",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, instead of positioning the menu at the left upper corner, position at the exact cursor location.\n            This makes sense for larger activators\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PositionAtCurser"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ActivatorContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Place a MudButton, a MudIconButton or any other component capable of acting as an activator. This will\n            override the standard button and all parameters which concern it.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActivatorContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ActivationEvent",
            "TypeName": "MudBlazor.MouseEvent",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Specify the activation event when ActivatorContent is set\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActivationEvent"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AnchorOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Set the anchor origin point to determen where the popover will open from.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AnchorOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TransformOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the transform origin point for the popover.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TransformOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Direction",
            "TypeName": "MudBlazor.Direction",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the direction the select menu will start from relative to its parent.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Direction"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OffsetY",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the select menu will open either before or after the input depending on the direction.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OffsetY"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OffsetX",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the select menu will open either above or bellow the input depending on the direction.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OffsetX"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LockScroll",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set to true if you want to prevent page from scrolling when the menu is open\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LockScroll"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, menu will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableElevation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no drop-shadow will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableElevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Link",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Link"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Target",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Target"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HtmlTag",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "HtmlTag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ButtonType",
            "TypeName": "MudBlazor.ButtonType",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "ButtonType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Command",
            "TypeName": "System.Windows.Input.ICommand",
            "Metadata": {
              "Common.PropertyName": "Command"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommandParameter",
            "TypeName": "System.Object",
            "Metadata": {
              "Common.PropertyName": "CommandParameter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Add menu items here\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudMenu"
        }
      },
      {
        "HashCode": -1502911181,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudMenu",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudMenu"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ListClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for the list, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ListClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PopoverClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for the popover, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PopoverClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon to use if set will turn the button into a MudIconButton.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "StartIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon placed before the text if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "StartIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EndIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon placed after the text if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EndIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the button. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The button Size of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The button variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact vertical padding will be applied to all menu items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the list menu will be same width as the parent.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxHeight",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Sets the maxheight the menu can have when open.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PositionAtCursor",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, instead of positioning the menu at the left upper corner, position at the exact cursor location.\n            This makes sense for larger activators\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PositionAtCursor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PositionAtCurser",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, instead of positioning the menu at the left upper corner, position at the exact cursor location.\n            This makes sense for larger activators\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PositionAtCurser"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ActivatorContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Place a MudButton, a MudIconButton or any other component capable of acting as an activator. This will\n            override the standard button and all parameters which concern it.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActivatorContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ActivationEvent",
            "TypeName": "MudBlazor.MouseEvent",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Specify the activation event when ActivatorContent is set\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActivationEvent"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AnchorOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Set the anchor origin point to determen where the popover will open from.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AnchorOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TransformOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the transform origin point for the popover.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TransformOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Direction",
            "TypeName": "MudBlazor.Direction",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the direction the select menu will start from relative to its parent.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Direction"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OffsetY",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the select menu will open either before or after the input depending on the direction.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OffsetY"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OffsetX",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the select menu will open either above or bellow the input depending on the direction.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OffsetX"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LockScroll",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set to true if you want to prevent page from scrolling when the menu is open\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LockScroll"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, menu will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableElevation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no drop-shadow will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableElevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Link",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Link"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Target",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Target"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HtmlTag",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "HtmlTag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ButtonType",
            "TypeName": "MudBlazor.ButtonType",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "ButtonType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Command",
            "TypeName": "System.Windows.Input.ICommand",
            "Metadata": {
              "Common.PropertyName": "Command"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommandParameter",
            "TypeName": "System.Object",
            "Metadata": {
              "Common.PropertyName": "CommandParameter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Add menu items here\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudMenu",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -517008228,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudMenu.ActivatorContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Place a MudButton, a MudIconButton or any other component capable of acting as an activator. This will\n            override the standard button and all parameters which concern it.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ActivatorContent",
            "ParentTag": "MudMenu"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudMenu.ActivatorContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1514178405,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudMenu.ActivatorContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Place a MudButton, a MudIconButton or any other component capable of acting as an activator. This will\n            override the standard button and all parameters which concern it.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ActivatorContent",
            "ParentTag": "MudBlazor.MudMenu"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudMenu.ActivatorContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2088923224,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudMenu.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Add menu items here\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudMenu"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudMenu.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1141588776,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudMenu.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Add menu items here\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudMenu"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudMenu.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1450135741,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudMenuItem",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudMenuItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Link",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set to a URL, clicking the button will open the referenced document. Use Target to specify where (Obsolete replaced by Href)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Link"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set to a URL, clicking the button will open the referenced document. Use Target to specify where\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon to be used for this menu entry\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Target",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Target"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ForceLoad",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "ForceLoad"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Command",
            "TypeName": "System.Windows.Input.ICommand",
            "Metadata": {
              "Common.PropertyName": "Command"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommandParameter",
            "TypeName": "System.Object",
            "Metadata": {
              "Common.PropertyName": "CommandParameter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnTouch",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Metadata": {
              "Common.PropertyName": "OnTouch",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudMenuItem"
        }
      },
      {
        "HashCode": -1579114431,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudMenuItem",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudMenuItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Link",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set to a URL, clicking the button will open the referenced document. Use Target to specify where (Obsolete replaced by Href)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Link"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set to a URL, clicking the button will open the referenced document. Use Target to specify where\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon to be used for this menu entry\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Target",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Target"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ForceLoad",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "ForceLoad"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Command",
            "TypeName": "System.Windows.Input.ICommand",
            "Metadata": {
              "Common.PropertyName": "Command"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommandParameter",
            "TypeName": "System.Object",
            "Metadata": {
              "Common.PropertyName": "CommandParameter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnTouch",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Metadata": {
              "Common.PropertyName": "OnTouch",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudMenuItem",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1858305680,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudMenuItem.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudMenuItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudMenuItem.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 2059543576,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudMenuItem.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudMenuItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudMenuItem.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -759295189,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudMessageBox",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudMessageBox"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The message box title. If null or empty, title will be hidden\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TitleContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Define the message box title as a renderfragment (overrides Title)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TitleContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Message",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The message box message as string.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Message"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MarkupMessage",
            "TypeName": "Microsoft.AspNetCore.Components.MarkupString",
            "Documentation": "\n            <summary>\n            The message box message as markup string.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MarkupMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MessageContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Define the message box body as a renderfragment (overrides Message)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MessageContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CancelText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text of the cancel button. Leave null to hide the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CancelText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CancelButton",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Define the cancel button as a render fragment (overrides CancelText).\n            Must be a MudButton\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CancelButton",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NoText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text of the no button. Leave null to hide the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NoText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NoButton",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Define the no button as a render fragment (overrides CancelText).\n            Must be a MudButton\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NoButton",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "YesText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text of the yes/OK button. Leave null to hide the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "YesText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "YesButton",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Define the cancel button as a render fragment (overrides CancelText).\n            Must be a MudButton\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "YesButton",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnYes",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Fired when the yes button is clicked\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnYes",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnNo",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Fired when the no button is clicked\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnNo",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnCancel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Fired when the cancel button is clicked or the msg box was closed via the X\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnCancel",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsVisible",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Bind this two-way to show and close an inlined message box. Has no effect on opened msg boxes\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsVisible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsVisibleChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Raised when the inline dialog's display status changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsVisibleChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudMessageBox"
        }
      },
      {
        "HashCode": 1911787791,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudMessageBox",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudMessageBox"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The message box title. If null or empty, title will be hidden\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TitleContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Define the message box title as a renderfragment (overrides Title)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TitleContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Message",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The message box message as string.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Message"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MarkupMessage",
            "TypeName": "Microsoft.AspNetCore.Components.MarkupString",
            "Documentation": "\n            <summary>\n            The message box message as markup string.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MarkupMessage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MessageContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Define the message box body as a renderfragment (overrides Message)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MessageContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CancelText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text of the cancel button. Leave null to hide the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CancelText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CancelButton",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Define the cancel button as a render fragment (overrides CancelText).\n            Must be a MudButton\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CancelButton",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NoText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text of the no button. Leave null to hide the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NoText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NoButton",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Define the no button as a render fragment (overrides CancelText).\n            Must be a MudButton\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NoButton",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "YesText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text of the yes/OK button. Leave null to hide the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "YesText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "YesButton",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Define the cancel button as a render fragment (overrides CancelText).\n            Must be a MudButton\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "YesButton",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnYes",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Fired when the yes button is clicked\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnYes",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnNo",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Fired when the no button is clicked\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnNo",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnCancel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Fired when the cancel button is clicked or the msg box was closed via the X\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnCancel",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsVisible",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Bind this two-way to show and close an inlined message box. Has no effect on opened msg boxes\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsVisible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsVisibleChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Raised when the inline dialog's display status changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsVisibleChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudMessageBox",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1897668216,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudMessageBox.TitleContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the message box title as a renderfragment (overrides Title)\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "TitleContent",
            "ParentTag": "MudMessageBox"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudMessageBox.TitleContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1311500331,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudMessageBox.TitleContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the message box title as a renderfragment (overrides Title)\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "TitleContent",
            "ParentTag": "MudBlazor.MudMessageBox"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudMessageBox.TitleContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2038394669,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudMessageBox.MessageContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the message box body as a renderfragment (overrides Message)\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MessageContent",
            "ParentTag": "MudMessageBox"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudMessageBox.MessageContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1775523925,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudMessageBox.MessageContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the message box body as a renderfragment (overrides Message)\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MessageContent",
            "ParentTag": "MudBlazor.MudMessageBox"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudMessageBox.MessageContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 948480120,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudMessageBox.CancelButton",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the cancel button as a render fragment (overrides CancelText).\n            Must be a MudButton\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CancelButton",
            "ParentTag": "MudMessageBox"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudMessageBox.CancelButton",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -764685493,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudMessageBox.CancelButton",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the cancel button as a render fragment (overrides CancelText).\n            Must be a MudButton\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CancelButton",
            "ParentTag": "MudBlazor.MudMessageBox"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudMessageBox.CancelButton",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -983188170,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudMessageBox.NoButton",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the no button as a render fragment (overrides CancelText).\n            Must be a MudButton\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NoButton",
            "ParentTag": "MudMessageBox"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudMessageBox.NoButton",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1390079329,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudMessageBox.NoButton",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the no button as a render fragment (overrides CancelText).\n            Must be a MudButton\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NoButton",
            "ParentTag": "MudBlazor.MudMessageBox"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudMessageBox.NoButton",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 888136413,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudMessageBox.YesButton",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the cancel button as a render fragment (overrides CancelText).\n            Must be a MudButton\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "YesButton",
            "ParentTag": "MudMessageBox"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudMessageBox.YesButton",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -398806881,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudMessageBox.YesButton",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the cancel button as a render fragment (overrides CancelText).\n            Must be a MudButton\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "YesButton",
            "ParentTag": "MudBlazor.MudMessageBox"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudMessageBox.YesButton",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1041095912,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudNavGroup",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudNavGroup"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon to use if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon. It supports the theme colors, default value uses the themes drawer icon color.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the button will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Expanded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, expands the nav group, otherwise collapse it. \n            Two-way bindable\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Expanded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Metadata": {
              "Common.PropertyName": "ExpandedChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HideExpandIcon",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, hides expand-icon at the end of the NavGroup.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HideExpandIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxHeight",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Explicitly sets the height for the Collapse element to override the css default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set, overrides the default expand icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudNavGroup"
        }
      },
      {
        "HashCode": -523914818,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudNavGroup",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudNavGroup"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Title",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Title"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon to use if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon. It supports the theme colors, default value uses the themes drawer icon color.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the button will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Expanded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, expands the nav group, otherwise collapse it. \n            Two-way bindable\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Expanded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Metadata": {
              "Common.PropertyName": "ExpandedChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HideExpandIcon",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, hides expand-icon at the end of the NavGroup.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HideExpandIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxHeight",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Explicitly sets the height for the Collapse element to override the css default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set, overrides the default expand icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudNavGroup",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1820272403,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudNavGroup.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudNavGroup"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudNavGroup.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 696554460,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudNavGroup.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudNavGroup"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudNavGroup.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1868444875,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudNavLink",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudNavLink"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon to use if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon. It supports the theme colors, default value uses the themes drawer icon color.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Match",
            "TypeName": "Microsoft.AspNetCore.Components.Routing.NavLinkMatch",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "Match"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Target",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Target"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Link to a URL when clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ForceLoad",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, force browser to redirect outside component router-space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ForceLoad"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommandParameter",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Command parameter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommandParameter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Command",
            "TypeName": "System.Windows.Input.ICommand",
            "Documentation": "\n            <summary>\n            Command executed when the user clicks on an element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Command"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudNavLink"
        }
      },
      {
        "HashCode": 898402645,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudNavLink",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudNavLink"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon to use if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon. It supports the theme colors, default value uses the themes drawer icon color.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Match",
            "TypeName": "Microsoft.AspNetCore.Components.Routing.NavLinkMatch",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "Match"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Target",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Target"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Link to a URL when clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ForceLoad",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, force browser to redirect outside component router-space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ForceLoad"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommandParameter",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Command parameter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommandParameter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Command",
            "TypeName": "System.Windows.Input.ICommand",
            "Documentation": "\n            <summary>\n            Command executed when the user clicks on an element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Command"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudNavLink",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1220810585,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudNavLink.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudNavLink"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudNavLink.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -291657338,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudNavLink.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudNavLink"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudNavLink.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2130069139,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudNavMenu",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudNavMenu"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the active NavLink.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Bordered",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, adds a border of the active NavLink, does nothing if variant outlined is used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Bordered"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Rounded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, default theme border-radius will be used on all navlinks.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Rounded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Adjust the vertical spacing between navlinks.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact vertical padding will be applied to all navmenu items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudNavMenu"
        }
      },
      {
        "HashCode": 722285570,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudNavMenu",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudNavMenu"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the active NavLink.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Bordered",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, adds a border of the active NavLink, does nothing if variant outlined is used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Bordered"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Rounded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, default theme border-radius will be used on all navlinks.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Rounded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Adjust the vertical spacing between navlinks.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact vertical padding will be applied to all navmenu items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudNavMenu",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1826833485,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudNavMenu.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudNavMenu"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudNavMenu.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1849095530,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudNavMenu.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudNavMenu"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudNavMenu.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -398392898,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudNumericField<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudNumericField"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudNumericField<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InvertMouseWheel",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Reverts mouse wheel up and down events, if true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InvertMouseWheel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Min",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The minimum value for the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Min",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Max",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The maximum value for the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Max",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Step",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The increment added/subtracted by the spin buttons.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Step",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HideSpinButtons",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hides the spin buttons, the user can still change value with keyboard arrows and manual update.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HideSpinButtons"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "MudBlazor.InputMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Hints at the type of data that might be entered by the user while editing the input.\n             Defaults to numeric\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Pattern",
            "TypeName": "System.String",
            "Documentation": "\n             <summary>\n             The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression\n             Defaults to [0-9,.\\-]\n             To get a numerical keyboard on safari, use the pattern. The default pattern should achieve numerical keyboard.\n            \n             Note: this pattern is also used to prevent all input except numbers and allowed characters. So for instance to allow only numbers, no signs and no commas you might change it to to [0-9.]\n             </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Pattern"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DebounceInterval",
            "TypeName": "System.Double",
            "Documentation": "\n            <summary>\n            Interval to be awaited in milliseconds before changing the Text value\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DebounceInterval"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnDebounceIntervalElapsed",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            callback to be called when the debounce interval has elapsed\n            receives the Text as a parameter\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnDebounceIntervalElapsed",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be read-only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will take up the full width of its container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Immediate",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will update the Value immediately on typing.\n            If false, the Value is updated only on Enter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Immediate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableUnderLine",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will not have an underline.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableUnderLine"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HelperText will be displayed below the text field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon that will be used if Adornment is set to Start or End.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text that will be used if Adornment is set to Start or End, the Text overrides Icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Adornment if used. By default, it is set to None.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnlyValidateIfDirty",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The validation is only triggered if the user has changed the input value at least once. By default, it is false\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnlyValidateIfDirty"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The aria-label of the adornment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnAdornmentClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event if set and Adornment used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnAdornmentClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Counter",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            If set, will display the counter, value 0 will display current count but no stop count.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Counter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxLength",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Maximum number of characters that the input will accept\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxLength"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true the input will focus automatically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Lines",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n             A multiline input (textarea) will be shown, if set to more than one line.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Lines"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n             The text to be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextUpdateSuppression",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).\n            This solves issue #1012: Textfield swallowing chars when typing rapidly\n            If you need to update the input's text while it is focused you can set this parameter to false.\n            Note: on WASM text update suppression is not active, so this parameter has no effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextUpdateSuppression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text value changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnBlur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element loses focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnBlur",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInternalInputChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element changes internally its text value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInternalInputChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyDown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyDown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyDownPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyDownPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyPress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyPress",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyPressPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyPressPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyUp",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyUp",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyUpPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyUpPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Fired when the Value property changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The value of this input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Format",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Format"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<T, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<T>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudNumericField<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 48847575,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudNumericField<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudNumericField"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudNumericField<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InvertMouseWheel",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Reverts mouse wheel up and down events, if true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InvertMouseWheel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Min",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The minimum value for the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Min",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Max",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The maximum value for the input.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Max",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Step",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The increment added/subtracted by the spin buttons.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Step",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HideSpinButtons",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hides the spin buttons, the user can still change value with keyboard arrows and manual update.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HideSpinButtons"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "MudBlazor.InputMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Hints at the type of data that might be entered by the user while editing the input.\n             Defaults to numeric\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Pattern",
            "TypeName": "System.String",
            "Documentation": "\n             <summary>\n             The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression\n             Defaults to [0-9,.\\-]\n             To get a numerical keyboard on safari, use the pattern. The default pattern should achieve numerical keyboard.\n            \n             Note: this pattern is also used to prevent all input except numbers and allowed characters. So for instance to allow only numbers, no signs and no commas you might change it to to [0-9.]\n             </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Pattern"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DebounceInterval",
            "TypeName": "System.Double",
            "Documentation": "\n            <summary>\n            Interval to be awaited in milliseconds before changing the Text value\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DebounceInterval"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnDebounceIntervalElapsed",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            callback to be called when the debounce interval has elapsed\n            receives the Text as a parameter\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnDebounceIntervalElapsed",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be read-only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will take up the full width of its container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Immediate",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will update the Value immediately on typing.\n            If false, the Value is updated only on Enter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Immediate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableUnderLine",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will not have an underline.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableUnderLine"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HelperText will be displayed below the text field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon that will be used if Adornment is set to Start or End.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text that will be used if Adornment is set to Start or End, the Text overrides Icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Adornment if used. By default, it is set to None.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnlyValidateIfDirty",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The validation is only triggered if the user has changed the input value at least once. By default, it is false\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnlyValidateIfDirty"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The aria-label of the adornment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnAdornmentClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event if set and Adornment used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnAdornmentClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Counter",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            If set, will display the counter, value 0 will display current count but no stop count.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Counter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxLength",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Maximum number of characters that the input will accept\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxLength"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true the input will focus automatically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Lines",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n             A multiline input (textarea) will be shown, if set to more than one line.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Lines"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n             The text to be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextUpdateSuppression",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).\n            This solves issue #1012: Textfield swallowing chars when typing rapidly\n            If you need to update the input's text while it is focused you can set this parameter to false.\n            Note: on WASM text update suppression is not active, so this parameter has no effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextUpdateSuppression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text value changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnBlur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element loses focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnBlur",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInternalInputChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element changes internally its text value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInternalInputChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyDown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyDown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyDownPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyDownPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyPress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyPress",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyPressPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyPressPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyUp",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyUp",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyUpPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyUpPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Fired when the Value property changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The value of this input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Format",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Format"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<T, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<T>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudNumericField<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 858263984,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudOverlay",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudOverlay"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "VisibleChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Fires when Visible changes\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VisibleChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Visible",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true overlay will be visible. Two-way bindable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Visible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoClose",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true overlay will set Visible false on click.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoClose"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LockScroll",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true (default), the Document.body element will not be able to scroll\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LockScroll"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LockScrollClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The css class that will be added to body if lockscroll is used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LockScrollClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DarkBackground",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true applys the themes dark overlay color.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DarkBackground"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LightBackground",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true applys the themes light overlay color.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LightBackground"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Absolute",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Icon class names, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Absolute"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ZIndex",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Sets the z-index of the overlay.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ZIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommandParameter",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Command parameter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommandParameter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Command",
            "TypeName": "System.Windows.Input.ICommand",
            "Documentation": "\n            <summary>\n            Command executed when the user clicks on an element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Command"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the overlay is clicked\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudOverlay"
        }
      },
      {
        "HashCode": -1001516076,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudOverlay",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudOverlay"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "VisibleChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Fires when Visible changes\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VisibleChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Visible",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true overlay will be visible. Two-way bindable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Visible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoClose",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true overlay will set Visible false on click.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoClose"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LockScroll",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true (default), the Document.body element will not be able to scroll\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LockScroll"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LockScrollClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The css class that will be added to body if lockscroll is used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LockScrollClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DarkBackground",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true applys the themes dark overlay color.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DarkBackground"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LightBackground",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true applys the themes light overlay color.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LightBackground"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Absolute",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Icon class names, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Absolute"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ZIndex",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Sets the z-index of the overlay.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ZIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommandParameter",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Command parameter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommandParameter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Command",
            "TypeName": "System.Windows.Input.ICommand",
            "Documentation": "\n            <summary>\n            Command executed when the user clicks on an element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Command"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the overlay is clicked\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudOverlay",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1979958880,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudOverlay.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudOverlay"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudOverlay.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1026256699,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudOverlay.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudOverlay"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudOverlay.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 119583115,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudPageContentNavigation",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudPageContentNavigation"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Headline",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The text displayed about the section links. Defaults to \"Conents\"\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Headline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SectionClassSelector",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The css selector used to identifify the HTML elements that should be observed for viewport changes\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SectionClassSelector"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HierarchyMapper",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Int32>",
            "Documentation": "\n            <summary>\n            If there are mutliple levels, this can specified to make a mapping between a level class likw \"second-level\" and the level in the hierarchy\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HierarchyMapper"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandBehaviour",
            "TypeName": "MudBlazor.ContentNavigationExpandBehaviour",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            If there are multiple levels, this property controls they visibility of them.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandBehaviour"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ActivateFirstSectionAsDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If this option is true the first added section will become active when there is no other indication of an active session. Default value is false  \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActivateFirstSectionAsDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudPageContentNavigation"
        }
      },
      {
        "HashCode": 86906481,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudPageContentNavigation",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudPageContentNavigation"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Headline",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The text displayed about the section links. Defaults to \"Conents\"\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Headline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SectionClassSelector",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The css selector used to identifify the HTML elements that should be observed for viewport changes\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SectionClassSelector"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HierarchyMapper",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Int32>",
            "Documentation": "\n            <summary>\n            If there are mutliple levels, this can specified to make a mapping between a level class likw \"second-level\" and the level in the hierarchy\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HierarchyMapper"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandBehaviour",
            "TypeName": "MudBlazor.ContentNavigationExpandBehaviour",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            If there are multiple levels, this property controls they visibility of them.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandBehaviour"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ActivateFirstSectionAsDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If this option is true the first added section will become active when there is no other indication of an active session. Default value is false  \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActivateFirstSectionAsDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudPageContentNavigation",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1599057040,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudPagination",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudPagination"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Count",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The number of pages.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Count"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BoundaryCount",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The number of items at the start and end of the pagination.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BoundaryCount"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MiddleCount",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The number of items in the middle of the pagination.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MiddleCount"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Selected",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The selected page number.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Selected"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Rectangular",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the pagination buttons are displayed rectangular.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Rectangular"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The size of the component..\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableElevation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no drop-shadow will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableElevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the pagination will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowFirstButton",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the navigate-to-first-page button is shown.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowFirstButton"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowLastButton",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the navigate-to-last-page button is shown.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowLastButton"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowPreviousButton",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the navigate-to-previous-page button is shown.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowPreviousButton"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowNextButton",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the navigate-to-next-page button is shown.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowNextButton"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ControlButtonClicked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.Page>",
            "Documentation": "\n            <summary>\n            Invokes the callback when a control button is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ControlButtonClicked",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Invokes the callback when selected page changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FirstIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom first icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FirstIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BeforeIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom before icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BeforeIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NextIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom next icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NextIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LastIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom last icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LastIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudPagination"
        }
      },
      {
        "HashCode": 58043922,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudPagination",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudPagination"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Count",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The number of pages.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Count"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BoundaryCount",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The number of items at the start and end of the pagination.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BoundaryCount"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MiddleCount",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The number of items in the middle of the pagination.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MiddleCount"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Selected",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The selected page number.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Selected"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Rectangular",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the pagination buttons are displayed rectangular.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Rectangular"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The size of the component..\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableElevation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no drop-shadow will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableElevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the pagination will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowFirstButton",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the navigate-to-first-page button is shown.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowFirstButton"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowLastButton",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the navigate-to-last-page button is shown.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowLastButton"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowPreviousButton",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the navigate-to-previous-page button is shown.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowPreviousButton"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowNextButton",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the navigate-to-next-page button is shown.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ShowNextButton"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ControlButtonClicked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.Page>",
            "Documentation": "\n            <summary>\n            Invokes the callback when a control button is clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ControlButtonClicked",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Invokes the callback when selected page changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FirstIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom first icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FirstIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BeforeIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom before icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BeforeIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NextIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom next icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NextIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LastIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom last icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LastIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudPagination",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -644626643,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudPaper",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudPaper"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to 0.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outlined",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, card will be outlined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outlined"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Height of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Width",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Width of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Width"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxHeight",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Max-Height of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxWidth",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Max-Width of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinHeight",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Min-Height of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MinHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinWidth",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Min-Width of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MinWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudPaper"
        }
      },
      {
        "HashCode": -435006400,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudPaper",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudPaper"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to 0.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outlined",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, card will be outlined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outlined"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Height of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Width",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Width of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Width"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxHeight",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Max-Height of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxWidth",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Max-Width of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinHeight",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Min-Height of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MinHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MinWidth",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Min-Width of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MinWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudPaper",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2042182643,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudPaper.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudPaper"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudPaper.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1932113602,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudPaper.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudPaper"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudPaper.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -283637151,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudPicker<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudPicker"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudPicker<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the icon of the input text field\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the icon of the input text field\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the aria-label of the input text field icon\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerOpened",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown / dialog opens\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerOpened",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerClosed",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown / dialog closes\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerClosed",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow. 0 for no shadow set to 8 by default in inline mode and 0 in static mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to 0 this is set to true automatically in static mode but can be overridden with Rounded bool.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no date or time can be defined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Rounded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to theme default when in Static Mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Rounded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value, HelperText will be applied.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the picker will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Editable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the picker will be editable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Editable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableToolbar",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hide toolbar and show only date/time views.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableToolbar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToolBarClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for picker's ToolBar, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToolBarClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerVariant",
            "TypeName": "MudBlazor.PickerVariant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Picker container option\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerVariant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputVariant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Variant of the text input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputVariant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant of the text input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets if the icon will be att start or end, set to false to disable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Orientation",
            "TypeName": "MudBlazor.Orientation",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            What orientation to render in when in PickerVariant Static Mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Orientation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the toolbar, selected and active. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AllowKeyboardInput",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Changes the cursor appearance.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AllowKeyboardInput"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The currently selected string value (two-way bindable)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClassActions",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class that will be applied to the action buttons container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClassActions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerActions",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.MudPicker<T>>",
            "Documentation": "\n            <summary>\n            Define the action buttons here\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerActions",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Mask",
            "TypeName": "MudBlazor.IMask",
            "Documentation": "\n            <summary>\n            A mask for structured input of the date (requires Editable to be true).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Mask"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AnchorOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the origin of the popover's anchor. Defaults to <see cref=\"F:MudBlazor.Origin.TopLeft\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AnchorOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TransformOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the origin of the popover's transform. Defaults to <see cref=\"F:MudBlazor.Origin.TopLeft\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TransformOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<T, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<T>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudPicker<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 844325860,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudPicker<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudPicker"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudPicker<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the icon of the input text field\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the icon of the input text field\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the aria-label of the input text field icon\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerOpened",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown / dialog opens\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerOpened",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerClosed",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown / dialog closes\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerClosed",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow. 0 for no shadow set to 8 by default in inline mode and 0 in static mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to 0 this is set to true automatically in static mode but can be overridden with Rounded bool.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no date or time can be defined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Rounded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to theme default when in Static Mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Rounded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value, HelperText will be applied.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the picker will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Editable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the picker will be editable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Editable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableToolbar",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hide toolbar and show only date/time views.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableToolbar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToolBarClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for picker's ToolBar, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToolBarClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerVariant",
            "TypeName": "MudBlazor.PickerVariant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Picker container option\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerVariant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputVariant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Variant of the text input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputVariant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant of the text input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets if the icon will be att start or end, set to false to disable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Orientation",
            "TypeName": "MudBlazor.Orientation",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            What orientation to render in when in PickerVariant Static Mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Orientation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the toolbar, selected and active. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AllowKeyboardInput",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Changes the cursor appearance.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AllowKeyboardInput"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The currently selected string value (two-way bindable)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClassActions",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class that will be applied to the action buttons container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClassActions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerActions",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.MudPicker<T>>",
            "Documentation": "\n            <summary>\n            Define the action buttons here\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerActions",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Mask",
            "TypeName": "MudBlazor.IMask",
            "Documentation": "\n            <summary>\n            A mask for structured input of the date (requires Editable to be true).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Mask"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AnchorOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the origin of the popover's anchor. Defaults to <see cref=\"F:MudBlazor.Origin.TopLeft\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AnchorOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TransformOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the origin of the popover's transform. Defaults to <see cref=\"F:MudBlazor.Origin.TopLeft\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TransformOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<T, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<T>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudPicker<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1404049298,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudPicker<T>.PickerActions",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the action buttons here\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PickerActions",
            "ParentTag": "MudPicker"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'PickerActions' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudPicker<T>.PickerActions",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -287395229,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudPicker<T>.PickerActions",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the action buttons here\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PickerActions",
            "ParentTag": "MudBlazor.MudPicker"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'PickerActions' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudPicker<T>.PickerActions",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2049884455,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudPopover",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudPopover"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "MaxHeight",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Sets the maxheight the popover can have when open.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Paper",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, will apply default MudPaper classes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Paper"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to 0.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Open",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the popover is visible.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Open"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Fixed",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true the popover will be fixed position instead of absolute.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Fixed"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Duration",
            "TypeName": "System.Double",
            "Documentation": "\n            <summary>\n            Sets the length of time that the opening transition takes to complete.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Duration"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Delay",
            "TypeName": "System.Double",
            "Documentation": "\n            <summary>\n            Sets the amount of time in milliseconds to wait from opening the popover before beginning to perform the transition. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Delay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Direction",
            "TypeName": "MudBlazor.Direction",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the direction the popover will start from relative to its parent.\n            </summary>\n            \n        ",
            "Metadata": {
              "Common.PropertyName": "Direction"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AnchorOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Set the anchor point on the element of the popover.\n            The anchor point will determinate where the popover will be placed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AnchorOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TransformOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the intersection point if the anchor element. At this point the popover will lay above the popover. \n            This property in conjunction with AnchorPlacement determinate where the popover will be placed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TransformOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OverflowBehavior",
            "TypeName": "MudBlazor.OverflowBehavior",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Set the overflow behavior of a popover and controls how the element should react if there is not enough space for the element to be visible\n            Defaults to none, which doens't apply any overflow logic\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OverflowBehavior"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OffsetX",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the select menu will open either above or bellow the input depending on the direction.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OffsetX"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OffsetY",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the select menu will open either before or after the input depending on the direction.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OffsetY"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RelativeWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the popover will have the same width at its parent element, default to false\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RelativeWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudPopover"
        }
      },
      {
        "HashCode": -380285265,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudPopover",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudPopover"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "MaxHeight",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Sets the maxheight the popover can have when open.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Paper",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, will apply default MudPaper classes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Paper"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to 0.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Open",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the popover is visible.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Open"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Fixed",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true the popover will be fixed position instead of absolute.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Fixed"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Duration",
            "TypeName": "System.Double",
            "Documentation": "\n            <summary>\n            Sets the length of time that the opening transition takes to complete.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Duration"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Delay",
            "TypeName": "System.Double",
            "Documentation": "\n            <summary>\n            Sets the amount of time in milliseconds to wait from opening the popover before beginning to perform the transition. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Delay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Direction",
            "TypeName": "MudBlazor.Direction",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the direction the popover will start from relative to its parent.\n            </summary>\n            \n        ",
            "Metadata": {
              "Common.PropertyName": "Direction"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AnchorOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Set the anchor point on the element of the popover.\n            The anchor point will determinate where the popover will be placed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AnchorOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TransformOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the intersection point if the anchor element. At this point the popover will lay above the popover. \n            This property in conjunction with AnchorPlacement determinate where the popover will be placed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TransformOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OverflowBehavior",
            "TypeName": "MudBlazor.OverflowBehavior",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Set the overflow behavior of a popover and controls how the element should react if there is not enough space for the element to be visible\n            Defaults to none, which doens't apply any overflow logic\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OverflowBehavior"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OffsetX",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the select menu will open either above or bellow the input depending on the direction.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OffsetX"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OffsetY",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the select menu will open either before or after the input depending on the direction.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OffsetY"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RelativeWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the popover will have the same width at its parent element, default to false\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RelativeWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudPopover",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1392039250,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudPopover.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudPopover"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudPopover.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1648127826,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudPopover.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudPopover"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudPopover.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 64636603,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudPopoverProvider",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudPopoverProvider"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudPopoverProvider"
        }
      },
      {
        "HashCode": 3613813,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudPopoverProvider",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudPopoverProvider"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudPopoverProvider",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -187922739,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudProgressCircular",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudProgressCircular"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The size of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Indeterminate",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Constantly animates, does not follow any value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Indeterminate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Min",
            "TypeName": "System.Double",
            "Metadata": {
              "Common.PropertyName": "Min"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Max",
            "TypeName": "System.Double",
            "Metadata": {
              "Common.PropertyName": "Max"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Double",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "StrokeWidth",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "StrokeWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Minimum",
            "TypeName": "System.Double",
            "Metadata": {
              "Common.PropertyName": "Minimum"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Maximum",
            "TypeName": "System.Double",
            "Metadata": {
              "Common.PropertyName": "Maximum"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudProgressCircular"
        }
      },
      {
        "HashCode": -685788308,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudProgressCircular",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudProgressCircular"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The size of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Indeterminate",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Constantly animates, does not follow any value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Indeterminate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Min",
            "TypeName": "System.Double",
            "Metadata": {
              "Common.PropertyName": "Min"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Max",
            "TypeName": "System.Double",
            "Metadata": {
              "Common.PropertyName": "Max"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Double",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "StrokeWidth",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "StrokeWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Minimum",
            "TypeName": "System.Double",
            "Metadata": {
              "Common.PropertyName": "Minimum"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Maximum",
            "TypeName": "System.Double",
            "Metadata": {
              "Common.PropertyName": "Maximum"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudProgressCircular",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2116690229,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudProgressLinear",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudProgressLinear"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Indeterminate",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Constantly animates, does not follow any value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Indeterminate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Buffer",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the buffer value will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Buffer"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Rounded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to the themes default value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Rounded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Striped",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Adds stripes to the filled part of the linear progress.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Striped"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Vertical",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the progress bar  will be displayed vertically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Vertical"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Min",
            "TypeName": "System.Double",
            "Documentation": "\n            <summary>\n            The minimum allowed value of the linear progress. Should not be equal to max.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Min"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Max",
            "TypeName": "System.Double",
            "Documentation": "\n            <summary>\n            The maximum allowed value of the linear progress. Should not be equal to min.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Max"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Double",
            "Documentation": "\n            <summary>\n            The maximum allowed value of the linear progress. Should not be equal to min.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BufferValue",
            "TypeName": "System.Double",
            "Metadata": {
              "Common.PropertyName": "BufferValue"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Minimum",
            "TypeName": "System.Double",
            "Metadata": {
              "Common.PropertyName": "Minimum"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Maximum",
            "TypeName": "System.Double",
            "Metadata": {
              "Common.PropertyName": "Maximum"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudProgressLinear"
        }
      },
      {
        "HashCode": -556808240,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudProgressLinear",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudProgressLinear"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Indeterminate",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Constantly animates, does not follow any value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Indeterminate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Buffer",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the buffer value will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Buffer"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Rounded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to the themes default value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Rounded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Striped",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Adds stripes to the filled part of the linear progress.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Striped"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Vertical",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the progress bar  will be displayed vertically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Vertical"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Min",
            "TypeName": "System.Double",
            "Documentation": "\n            <summary>\n            The minimum allowed value of the linear progress. Should not be equal to max.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Min"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Max",
            "TypeName": "System.Double",
            "Documentation": "\n            <summary>\n            The maximum allowed value of the linear progress. Should not be equal to min.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Max"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Double",
            "Documentation": "\n            <summary>\n            The maximum allowed value of the linear progress. Should not be equal to min.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BufferValue",
            "TypeName": "System.Double",
            "Metadata": {
              "Common.PropertyName": "BufferValue"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Minimum",
            "TypeName": "System.Double",
            "Metadata": {
              "Common.PropertyName": "Minimum"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Maximum",
            "TypeName": "System.Double",
            "Metadata": {
              "Common.PropertyName": "Maximum"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudProgressLinear",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 928322410,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudProgressLinear.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudProgressLinear"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudProgressLinear.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -646919717,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudProgressLinear.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudProgressLinear"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudProgressLinear.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -329143015,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudRadio<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudRadio"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudRadio<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UnCheckedColor",
            "TypeName": "MudBlazor.Color?",
            "Documentation": "\n            <summary>\n            The base color of the component in its none active/unchecked state. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UnCheckedColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placement",
            "TypeName": "MudBlazor.Placement",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The position of the child content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Option",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The value to associate to the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Option",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact padding will be applied.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Size of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the button will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudRadio<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -1380088754,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudRadio<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudRadio"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudRadio<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UnCheckedColor",
            "TypeName": "MudBlazor.Color?",
            "Documentation": "\n            <summary>\n            The base color of the component in its none active/unchecked state. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UnCheckedColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placement",
            "TypeName": "MudBlazor.Placement",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The position of the child content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Option",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The value to associate to the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Option",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact padding will be applied.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Size of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the button will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudRadio<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -117061876,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudRadio<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudRadio"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudRadio<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1560340508,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudRadio<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudRadio"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudRadio<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1481420633,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudRadioGroup<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudRadioGroup"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudRadioGroup<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for the input, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputStyle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User style definitions for the input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedOption",
            "TypeName": "T",
            "Metadata": {
              "Common.PropertyName": "SelectedOption",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedOptionChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Metadata": {
              "Common.PropertyName": "SelectedOptionChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<T, T>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<T>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudRadioGroup<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 2131773893,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudRadioGroup<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudRadioGroup"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudRadioGroup<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for the input, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputStyle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User style definitions for the input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedOption",
            "TypeName": "T",
            "Metadata": {
              "Common.PropertyName": "SelectedOption",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedOptionChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Metadata": {
              "Common.PropertyName": "SelectedOptionChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<T, T>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<T>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudRadioGroup<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 728312629,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudRadioGroup<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudRadioGroup"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudRadioGroup<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 549283351,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudRadioGroup<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudRadioGroup"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudRadioGroup<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1741119111,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudRating",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudRating"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "RatingItemsClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for RatingItems, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RatingItemsClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RatingItemsStyle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles for RatingItems.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RatingItemsStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Input name. If not initialized, name will be random guid.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxValue",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Max value and how many elements to click will be generated. Default: 5\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxValue"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Selected or hovered icon. Default @Icons.Material.Star\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EmptyIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Non selected item icon. Default @Icons.Material.StarBorder\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EmptyIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Size of the icons.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the controls will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the ratings will show without interactions.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Fires when SelectedValue changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedValue",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Selected value. This property is two-way bindable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedValue"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HoveredValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32?>",
            "Documentation": "\n            <summary>\n            Fires when hovered value change. Value will be null if no rating item is hovered.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HoveredValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudRating"
        }
      },
      {
        "HashCode": -978046961,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudRating",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudRating"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "RatingItemsClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for RatingItems, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RatingItemsClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RatingItemsStyle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles for RatingItems.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RatingItemsStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Input name. If not initialized, name will be random guid.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxValue",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Max value and how many elements to click will be generated. Default: 5\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxValue"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Selected or hovered icon. Default @Icons.Material.Star\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EmptyIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Non selected item icon. Default @Icons.Material.StarBorder\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EmptyIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Size of the icons.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the controls will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the ratings will show without interactions.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Fires when SelectedValue changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedValue",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Selected value. This property is two-way bindable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedValue"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HoveredValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32?>",
            "Documentation": "\n            <summary>\n            Fires when hovered value change. Value will be null if no rating item is hovered.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HoveredValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudRating",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -289162407,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudRatingItem",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudRatingItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ItemValue",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            This rating item value;\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemValue"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Size of the icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the controls will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the item will be readonly.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemClicked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Fires when element clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemClicked",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemHovered",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32?>",
            "Documentation": "\n            <summary>\n            Fires when element hovered.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemHovered",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudRatingItem"
        }
      },
      {
        "HashCode": -354441547,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudRatingItem",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudRatingItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ItemValue",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            This rating item value;\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemValue"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Size of the icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the controls will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the item will be readonly.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemClicked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Fires when element clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemClicked",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemHovered",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32?>",
            "Documentation": "\n            <summary>\n            Fires when element hovered.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemHovered",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudRatingItem",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -82710833,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudRTLProvider",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudRTLProvider"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "RightToLeft",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, changes the layout to RightToLeft.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RightToLeft"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudRTLProvider"
        }
      },
      {
        "HashCode": -930495506,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudRTLProvider",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudRTLProvider"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "RightToLeft",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, changes the layout to RightToLeft.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RightToLeft"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudRTLProvider",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -114472410,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudRTLProvider.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudRTLProvider"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudRTLProvider.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1078534543,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudRTLProvider.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudRTLProvider"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudRTLProvider.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 582059159,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudScrollToTop",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudScrollToTop"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Selector",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The CSS selector to which the scroll event will be attached\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Selector"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Visible",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If set to true, it starts Visible. If sets to false, it will become visible when the TopOffset amount of scrolled pixels is reached\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Visible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "VisibleCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class for the Visible state. Here, apply some transitions and animations that will happen when the component becomes visible\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VisibleCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HiddenCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class for the Hidden state. Here, apply some transitions and animations that will happen when the component becomes invisible\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HiddenCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TopOffset",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The distance in pixels scrolled from the top of the selected element from which \n            the component becomes visible\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TopOffset"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ScrollBehavior",
            "TypeName": "MudBlazor.ScrollBehavior",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Smooth or Auto\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ScrollBehavior"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnScroll",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.ScrollEventArgs>",
            "Documentation": "\n            <summary>\n            Called when scroll event is fired\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnScroll",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudScrollToTop"
        }
      },
      {
        "HashCode": 1191614841,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudScrollToTop",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudScrollToTop"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Selector",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The CSS selector to which the scroll event will be attached\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Selector"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Visible",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If set to true, it starts Visible. If sets to false, it will become visible when the TopOffset amount of scrolled pixels is reached\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Visible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "VisibleCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class for the Visible state. Here, apply some transitions and animations that will happen when the component becomes visible\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VisibleCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HiddenCssClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class for the Hidden state. Here, apply some transitions and animations that will happen when the component becomes invisible\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HiddenCssClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TopOffset",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The distance in pixels scrolled from the top of the selected element from which \n            the component becomes visible\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TopOffset"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ScrollBehavior",
            "TypeName": "MudBlazor.ScrollBehavior",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Smooth or Auto\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ScrollBehavior"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnScroll",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.ScrollEventArgs>",
            "Documentation": "\n            <summary>\n            Called when scroll event is fired\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnScroll",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudScrollToTop",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1996206657,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudScrollToTop.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudScrollToTop"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudScrollToTop.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -123845090,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudScrollToTop.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudScrollToTop"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudScrollToTop.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -33861039,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudSelect<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudSelect"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudSelect<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnOpen",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when dropdown opens.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnOpen",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClose",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when dropdown closes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClose",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Add the MudSelectItems here\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PopoverClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for the popover, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PopoverClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact vertical padding will be applied to all Select items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OpenIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Open Select Icon\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OpenIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Close Select Icon\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectAll",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If set to true and the MultiSelection option is set to true, a \"select all\" checkbox is added at the top of the list of items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectAll"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectAllText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Define the text of the Select All option.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectAllText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedValuesChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.IEnumerable<T>>",
            "Documentation": "\n            <summary>\n            Fires when SelectedValues changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedValuesChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MultiSelectionTextFunc",
            "TypeName": "System.Func<System.Collections.Generic.List<System.String>, System.String>",
            "Documentation": "\n            <summary>\n            Function to define a customized multiselection text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MultiSelectionTextFunc",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Delimiter",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Parameter to define the delimited string separator.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Delimiter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedValues",
            "TypeName": "System.Collections.Generic.IEnumerable<T>",
            "Documentation": "\n            <summary>\n            Set of selected values. If MultiSelection is false it will only ever contain a single value. This property is two-way bindable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedValues",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Comparer",
            "TypeName": "System.Collections.Generic.IEqualityComparer<T>",
            "Documentation": "\n            <summary>\n            The Comparer to use for comparing selected values internally.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Comparer",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToStringFunc",
            "TypeName": "System.Func<T, System.String>",
            "Documentation": "\n            <summary>\n            Defines how values are displayed in the drop-down list\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToStringFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MultiSelection",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, multiple values can be selected via checkboxes which are automatically shown in the dropdown\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MultiSelection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxHeight",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Sets the maxheight the Select can have when open.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AnchorOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Set the anchor origin point to determen where the popover will open from.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AnchorOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TransformOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the transform origin point for the popover.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TransformOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Direction",
            "TypeName": "MudBlazor.Direction",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the direction the Select menu should open.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Direction"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OffsetX",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the Select menu will open either before or after the input (left/right).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OffsetX"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OffsetY",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the Select menu will open either before or after the input (top/bottom).\n            </summary>\n            [ExcludeFromCodeCoverage]\n        ",
            "Metadata": {
              "Common.PropertyName": "OffsetY"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Strict",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the Select's input will not show any values that are not defined in the dropdown.\n            This can be useful if Value is bound to a variable which is initialized to a value which is not in the list\n            and you want the Select to show the label / placeholder instead.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Strict"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LockScroll",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, prevent scrolling while dropdown is open.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LockScroll"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClearButtonClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event for clear button. Called after text and value has been cleared.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClearButtonClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CheckedIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom checked icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CheckedIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UncheckedIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom unchecked icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UncheckedIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IndeterminateIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom indeterminate icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IndeterminateIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be read-only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will take up the full width of its container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Immediate",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will update the Value immediately on typing.\n            If false, the Value is updated only on Enter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Immediate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableUnderLine",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will not have an underline.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableUnderLine"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HelperText will be displayed below the text field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon that will be used if Adornment is set to Start or End.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text that will be used if Adornment is set to Start or End, the Text overrides Icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Adornment if used. By default, it is set to None.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnlyValidateIfDirty",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The validation is only triggered if the user has changed the input value at least once. By default, it is false\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnlyValidateIfDirty"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The aria-label of the adornment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnAdornmentClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event if set and Adornment used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnAdornmentClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Counter",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            If set, will display the counter, value 0 will display current count but no stop count.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Counter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxLength",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Maximum number of characters that the input will accept\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxLength"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true the input will focus automatically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Lines",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n             A multiline input (textarea) will be shown, if set to more than one line.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Lines"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n             The text to be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextUpdateSuppression",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).\n            This solves issue #1012: Textfield swallowing chars when typing rapidly\n            If you need to update the input's text while it is focused you can set this parameter to false.\n            Note: on WASM text update suppression is not active, so this parameter has no effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextUpdateSuppression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "MudBlazor.InputMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Hints at the type of data that might be entered by the user while editing the input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Pattern",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression\n            Not Supported in multline input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Pattern"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text value changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnBlur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element loses focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnBlur",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInternalInputChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element changes internally its text value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInternalInputChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyDown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyDown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyDownPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyDownPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyPress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyPress",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyPressPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyPressPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyUp",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyUp",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyUpPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyUpPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Fired when the Value property changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The value of this input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Format",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Format"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<T, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<T>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudSelect<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -73713218,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudSelect<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudSelect"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudSelect<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnOpen",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when dropdown opens.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnOpen",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClose",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when dropdown closes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClose",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Add the MudSelectItems here\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PopoverClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for the popover, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PopoverClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact vertical padding will be applied to all Select items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OpenIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Open Select Icon\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OpenIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Close Select Icon\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectAll",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If set to true and the MultiSelection option is set to true, a \"select all\" checkbox is added at the top of the list of items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectAll"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectAllText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Define the text of the Select All option.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectAllText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedValuesChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.IEnumerable<T>>",
            "Documentation": "\n            <summary>\n            Fires when SelectedValues changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedValuesChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MultiSelectionTextFunc",
            "TypeName": "System.Func<System.Collections.Generic.List<System.String>, System.String>",
            "Documentation": "\n            <summary>\n            Function to define a customized multiselection text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MultiSelectionTextFunc",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Delimiter",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Parameter to define the delimited string separator.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Delimiter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedValues",
            "TypeName": "System.Collections.Generic.IEnumerable<T>",
            "Documentation": "\n            <summary>\n            Set of selected values. If MultiSelection is false it will only ever contain a single value. This property is two-way bindable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedValues",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Comparer",
            "TypeName": "System.Collections.Generic.IEqualityComparer<T>",
            "Documentation": "\n            <summary>\n            The Comparer to use for comparing selected values internally.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Comparer",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToStringFunc",
            "TypeName": "System.Func<T, System.String>",
            "Documentation": "\n            <summary>\n            Defines how values are displayed in the drop-down list\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToStringFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MultiSelection",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, multiple values can be selected via checkboxes which are automatically shown in the dropdown\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MultiSelection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxHeight",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Sets the maxheight the Select can have when open.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AnchorOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Set the anchor origin point to determen where the popover will open from.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AnchorOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TransformOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the transform origin point for the popover.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TransformOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Direction",
            "TypeName": "MudBlazor.Direction",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the direction the Select menu should open.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Direction"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OffsetX",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the Select menu will open either before or after the input (left/right).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OffsetX"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OffsetY",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the Select menu will open either before or after the input (top/bottom).\n            </summary>\n            [ExcludeFromCodeCoverage]\n        ",
            "Metadata": {
              "Common.PropertyName": "OffsetY"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Strict",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the Select's input will not show any values that are not defined in the dropdown.\n            This can be useful if Value is bound to a variable which is initialized to a value which is not in the list\n            and you want the Select to show the label / placeholder instead.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Strict"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LockScroll",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, prevent scrolling while dropdown is open.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LockScroll"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClearButtonClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event for clear button. Called after text and value has been cleared.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClearButtonClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CheckedIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom checked icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CheckedIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UncheckedIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom unchecked icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UncheckedIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IndeterminateIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom indeterminate icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IndeterminateIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be read-only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will take up the full width of its container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Immediate",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will update the Value immediately on typing.\n            If false, the Value is updated only on Enter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Immediate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableUnderLine",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will not have an underline.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableUnderLine"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HelperText will be displayed below the text field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon that will be used if Adornment is set to Start or End.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text that will be used if Adornment is set to Start or End, the Text overrides Icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Adornment if used. By default, it is set to None.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnlyValidateIfDirty",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The validation is only triggered if the user has changed the input value at least once. By default, it is false\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnlyValidateIfDirty"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The aria-label of the adornment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnAdornmentClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event if set and Adornment used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnAdornmentClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Counter",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            If set, will display the counter, value 0 will display current count but no stop count.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Counter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxLength",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Maximum number of characters that the input will accept\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxLength"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true the input will focus automatically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Lines",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n             A multiline input (textarea) will be shown, if set to more than one line.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Lines"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n             The text to be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextUpdateSuppression",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).\n            This solves issue #1012: Textfield swallowing chars when typing rapidly\n            If you need to update the input's text while it is focused you can set this parameter to false.\n            Note: on WASM text update suppression is not active, so this parameter has no effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextUpdateSuppression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "MudBlazor.InputMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Hints at the type of data that might be entered by the user while editing the input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Pattern",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression\n            Not Supported in multline input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Pattern"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text value changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnBlur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element loses focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnBlur",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInternalInputChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element changes internally its text value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInternalInputChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyDown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyDown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyDownPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyDownPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyPress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyPress",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyPressPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyPressPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyUp",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyUp",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyUpPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyUpPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Fired when the Value property changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The value of this input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Format",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Format"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<T, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<T>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudSelect<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2145219418,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudSelect<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Add the MudSelectItems here\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudSelect"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudSelect<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1003260313,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudSelect<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Add the MudSelectItems here\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudSelect"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudSelect<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 521332728,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudSelectItem<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Represents an option of a select or multi-select. To be used inside MudSelect.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudSelectItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudSelectItem<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            A user-defined option that can be selected\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Link to a URL when clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ForceLoad",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, force browser to redirect outside component router-space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ForceLoad"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommandParameter",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Command parameter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommandParameter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Command",
            "TypeName": "System.Windows.Input.ICommand",
            "Documentation": "\n            <summary>\n            Command executed when the user clicks on an element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Command"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudSelectItem<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 2140068811,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudSelectItem<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Represents an option of a select or multi-select. To be used inside MudSelect.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudSelectItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudSelectItem<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            A user-defined option that can be selected\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Link to a URL when clicked.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ForceLoad",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, force browser to redirect outside component router-space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ForceLoad"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommandParameter",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Command parameter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommandParameter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Command",
            "TypeName": "System.Windows.Input.ICommand",
            "Documentation": "\n            <summary>\n            Command executed when the user clicks on an element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Command"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudSelectItem<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1816951738,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudSelectItem<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudSelectItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudSelectItem<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -599927391,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudSelectItem<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudSelectItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudSelectItem<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1261428263,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudSkeleton",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudSkeleton"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Width",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            With defined in string, needs px or % or equal prefix.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Width"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Height defined in string, needs px or % or equal prefix.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SkeletonType",
            "TypeName": "MudBlazor.SkeletonType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Shape of the skeleton that will be rendered.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SkeletonType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Animation",
            "TypeName": "MudBlazor.Animation",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Animation style, if false it will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Animation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudSkeleton"
        }
      },
      {
        "HashCode": -847565381,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudSkeleton",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudSkeleton"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Width",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            With defined in string, needs px or % or equal prefix.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Width"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Height defined in string, needs px or % or equal prefix.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SkeletonType",
            "TypeName": "MudBlazor.SkeletonType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Shape of the skeleton that will be rendered.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SkeletonType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Animation",
            "TypeName": "MudBlazor.Animation",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Animation style, if false it will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Animation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudSkeleton",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1037112074,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudSlider<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudSlider"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudSlider<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Min",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The minimum allowed value of the slider. Should not be equal to max.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Min",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Max",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The maximum allowed value of the slider. Should not be equal to min.\n            </summary>\n            \n        ",
            "Metadata": {
              "Common.PropertyName": "Max",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Step",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            How many steps the slider should take on each move.\n            </summary>\n            \n        ",
            "Metadata": {
              "Common.PropertyName": "Step",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the slider will be disabled.\n            </summary>\n            \n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<T>",
            "Metadata": {
              "Common.PropertyName": "Converter",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "T",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the Primary, Secondary and Tertiary theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Immediate",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the dragging the slider will update the Value immediately.\n            If false, the Value is updated only on releasing the handle.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Immediate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Vertical",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, displays the slider vertical.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Vertical"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TickMarks",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, displays tick marks on the track.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TickMarks"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TickMarkLabels",
            "TypeName": "System.String[]",
            "Documentation": "\n            <summary>\n            Labels for tick marks, will attempt to map the labels to each step in index order.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TickMarkLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Labels for tick marks, will attempt to map the labels to each step in index order.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueLabel",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Displays the value over the slider thumb.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudSlider<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -1432368314,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudSlider<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudSlider"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudSlider<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Min",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The minimum allowed value of the slider. Should not be equal to max.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Min",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Max",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The maximum allowed value of the slider. Should not be equal to min.\n            </summary>\n            \n        ",
            "Metadata": {
              "Common.PropertyName": "Max",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Step",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            How many steps the slider should take on each move.\n            </summary>\n            \n        ",
            "Metadata": {
              "Common.PropertyName": "Step",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the slider will be disabled.\n            </summary>\n            \n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<T>",
            "Metadata": {
              "Common.PropertyName": "Converter",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "T",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the Primary, Secondary and Tertiary theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Immediate",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the dragging the slider will update the Value immediately.\n            If false, the Value is updated only on releasing the handle.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Immediate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Vertical",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, displays the slider vertical.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Vertical"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TickMarks",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, displays tick marks on the track.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TickMarks"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TickMarkLabels",
            "TypeName": "System.String[]",
            "Documentation": "\n            <summary>\n            Labels for tick marks, will attempt to map the labels to each step in index order.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TickMarkLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Labels for tick marks, will attempt to map the labels to each step in index order.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueLabel",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Displays the value over the slider thumb.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudSlider<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1281817060,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudSlider<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudSlider"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudSlider<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1499362697,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudSlider<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudSlider"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudSlider<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 662807708,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudSnackbarElement",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudSnackbarElement"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Snackbar",
            "TypeName": "MudBlazor.Snackbar",
            "Metadata": {
              "Common.PropertyName": "Snackbar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom close icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudSnackbarElement"
        }
      },
      {
        "HashCode": 427268939,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudSnackbarElement",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudSnackbarElement"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Snackbar",
            "TypeName": "MudBlazor.Snackbar",
            "Metadata": {
              "Common.PropertyName": "Snackbar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom close icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudSnackbarElement",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1903386790,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudSnackbarProvider",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudSnackbarProvider"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudSnackbarProvider"
        }
      },
      {
        "HashCode": -495707855,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudSnackbarProvider",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudSnackbarProvider"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudSnackbarProvider",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -680312910,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudStack",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudStack"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Row",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, items will be placed horizontally in a row instead of vertically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Row"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Reverse",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Reverses the order of its items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Reverse"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Spacing",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Defines the spacing between its items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Spacing"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Justify",
            "TypeName": "MudBlazor.Justify?",
            "Documentation": "\n            <summary>\n            Defines the spacing between its items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Justify"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AlignItems",
            "TypeName": "MudBlazor.AlignItems?",
            "Documentation": "\n            <summary>\n            Defines the spacing between its items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AlignItems"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudStack"
        }
      },
      {
        "HashCode": 688204908,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudStack",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudStack"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Row",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, items will be placed horizontally in a row instead of vertically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Row"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Reverse",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Reverses the order of its items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Reverse"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Spacing",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Defines the spacing between its items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Spacing"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Justify",
            "TypeName": "MudBlazor.Justify?",
            "Documentation": "\n            <summary>\n            Defines the spacing between its items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Justify"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AlignItems",
            "TypeName": "MudBlazor.AlignItems?",
            "Documentation": "\n            <summary>\n            Defines the spacing between its items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AlignItems"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudStack",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 241640899,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudStack.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudStack"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudStack.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -90416905,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudStack.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudStack"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudStack.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 400060900,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudSwipeArea",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudSwipeArea"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnSwipe",
            "TypeName": "System.Action<MudBlazor.SwipeDirection>",
            "Metadata": {
              "Common.PropertyName": "OnSwipe",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevents default behavior of the browser when swiping.\n            Usable espacially when swiping up/down - this will prevent the whole page from scrolling up/down.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudSwipeArea"
        }
      },
      {
        "HashCode": -78577161,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudSwipeArea",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudSwipeArea"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnSwipe",
            "TypeName": "System.Action<MudBlazor.SwipeDirection>",
            "Metadata": {
              "Common.PropertyName": "OnSwipe",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevents default behavior of the browser when swiping.\n            Usable espacially when swiping up/down - this will prevent the whole page from scrolling up/down.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudSwipeArea",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -267020079,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudSwipeArea.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudSwipeArea"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudSwipeArea.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -402382922,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudSwipeArea.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudSwipeArea"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudSwipeArea.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -201795511,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudSwitch<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudSwitch"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudSwitch<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UnCheckedColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The base color of the component in its none active/unchecked state. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UnCheckedColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The text/label will be displayed next to the switch if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelPosition",
            "TypeName": "MudBlazor.LabelPosition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The position of the text/label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ThumbIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Shows an icon on Switch's thumb.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ThumbIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ThumbIconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the thumb icon. Supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ThumbIconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be read-only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Checked",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The state of the component\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Checked",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "StopClickPropagation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true will prevent the click from bubbling up the event tree.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "StopClickPropagation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CheckedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Fired when Checked changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CheckedChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<T, System.Boolean?>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<T>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudSwitch<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -587577500,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudSwitch<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudSwitch"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudSwitch<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UnCheckedColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The base color of the component in its none active/unchecked state. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UnCheckedColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The text/label will be displayed next to the switch if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LabelPosition",
            "TypeName": "MudBlazor.LabelPosition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The position of the text/label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LabelPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ThumbIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Shows an icon on Switch's thumb.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ThumbIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ThumbIconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the thumb icon. Supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ThumbIconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be read-only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Checked",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The state of the component\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Checked",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "StopClickPropagation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true will prevent the click from bubbling up the event tree.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "StopClickPropagation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CheckedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Fired when Checked changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CheckedChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<T, System.Boolean?>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<T>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudSwitch<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 906958903,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudSwitch<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudSwitch"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudSwitch<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -639771041,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudSwitch<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudSwitch"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudSwitch<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1587917683,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudSimpleTable",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudSimpleTable"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hover",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the table row will shade on hover.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hover"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to 0.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact padding will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outlined",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, table will be outlined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outlined"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Bordered",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, table's cells will have left/right borders.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Bordered"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Striped",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, striped table rows will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Striped"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FixedHeader",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When true, the header will stay in place when the table is scrolled. Note: set Height to make the table scrollable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FixedHeader"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudSimpleTable"
        }
      },
      {
        "HashCode": -1733005487,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudSimpleTable",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudSimpleTable"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hover",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the table row will shade on hover.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hover"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to 0.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact padding will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outlined",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, table will be outlined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outlined"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Bordered",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, table's cells will have left/right borders.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Bordered"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Striped",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, striped table rows will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Striped"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FixedHeader",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When true, the header will stay in place when the table is scrolled. Note: set Height to make the table scrollable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FixedHeader"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudSimpleTable",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1949960424,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudSimpleTable.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudSimpleTable"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudSimpleTable.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -599596410,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudSimpleTable.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudSimpleTable"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudSimpleTable.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1745999408,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudColumn<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Binds an object's property to a column by its property name \n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudColumn<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            Specifies the name of the object's property bound to the column\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterValue",
            "TypeName": "T",
            "Metadata": {
              "Common.PropertyName": "FooterValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Used if no FooterValue is available\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DataFormatString",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies which string format should be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DataFormatString"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Visible",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Visible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderText",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "HeaderText"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudColumn<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 1978027789,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudColumn<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Binds an object's property to a column by its property name \n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudColumn<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            Specifies the name of the object's property bound to the column\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterValue",
            "TypeName": "T",
            "Metadata": {
              "Common.PropertyName": "FooterValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Used if no FooterValue is available\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DataFormatString",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies which string format should be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DataFormatString"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Visible",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Visible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderText",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "HeaderText"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudColumn<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 129753323,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudSortableColumn<T, ModelType>",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Binds an object's property to a column by its property name \n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudSortableColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudSortableColumn<T, ModelType> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ModelType",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter ModelType for the MudBlazor.MudSortableColumn<T, ModelType> component.",
            "Metadata": {
              "Common.PropertyName": "ModelType",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            Specifies the name of the object's property bound to the column\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterValue",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            Specifies the name of the object's property bound to the footer\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Used if no FooterValue is available\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DataFormatString",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies which string format should be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DataFormatString"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Specifies if the column should be readonly even if the DataTable is in editmode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortLabel",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "SortLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortBy",
            "TypeName": "System.Func<ModelType, System.Object>",
            "Metadata": {
              "Common.PropertyName": "SortBy",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Visible",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Visible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderText",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "HeaderText"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudSortableColumn<T, ModelType>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 1328987866,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudSortableColumn<T, ModelType>",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Binds an object's property to a column by its property name \n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudSortableColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudSortableColumn<T, ModelType> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ModelType",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter ModelType for the MudBlazor.MudSortableColumn<T, ModelType> component.",
            "Metadata": {
              "Common.PropertyName": "ModelType",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            Specifies the name of the object's property bound to the column\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterValue",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            Specifies the name of the object's property bound to the footer\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Used if no FooterValue is available\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DataFormatString",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies which string format should be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DataFormatString"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Specifies if the column should be readonly even if the DataTable is in editmode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortLabel",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "SortLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortBy",
            "TypeName": "System.Func<ModelType, System.Object>",
            "Metadata": {
              "Common.PropertyName": "SortBy",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Visible",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Visible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderText",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "HeaderText"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudSortableColumn<T, ModelType>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2009804404,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTable<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTable"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudTable<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Documentation": "\n            <summary>\n            Defines how a table row looks like. Use MudTd to define the table cells and their content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildRowContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Documentation": "\n            <summary>\n            Row Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildRowContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowEditingTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Documentation": "\n            <summary>\n            Defines how a table row looks like in edit mode (for selected row). Use MudTd to define the table cells and their content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowEditingTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Columns",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Documentation": "\n            <summary>\n            Defines how a table column looks like. Columns components should inherit from MudBaseColumn\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Columns",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "QuickColumns",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Comma separated list of columns to show if there is no templates defined\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "QuickColumns"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NoRecordsContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Defines the table body content when there are no matching records found\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NoRecordsContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LoadingContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Defines the table body content  the table has no rows and is loading\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LoadingContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HorizontalScrollbar",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Defines if the table has a horizontal scrollbar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HorizontalScrollbar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.IEnumerable<T>",
            "Documentation": "\n            <summary>\n            The data to display in the table. MudTable will render one row per item\n            </summary>\n            \n        ",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Filter",
            "TypeName": "System.Func<T, System.Boolean>",
            "Documentation": "\n            <summary>\n            A function that returns whether or not an item should be displayed in the table. You can use this to implement your own search function.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Filter",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnRowClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.TableRowClickEventArgs<T>>",
            "Documentation": "\n            <summary>\n            Button click event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnRowClick",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowClassFunc",
            "TypeName": "System.Func<T, System.Int32, System.String>",
            "Documentation": "\n            <summary>\n            Returns the class that will get joined with RowClass. Takes the current item and row index.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowClassFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowStyleFunc",
            "TypeName": "System.Func<T, System.Int32, System.String>",
            "Documentation": "\n            <summary>\n            Returns the style that will get joined with RowStyle. Takes the current item and row index.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowStyleFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedItem",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            Returns the item which was last clicked on in single selection mode (that is, if MultiSelection is false)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedItem",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedItemChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Callback is called when a row has been clicked and returns the selected item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedItemChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedItems",
            "TypeName": "System.Collections.Generic.HashSet<T>",
            "Documentation": "\n            <summary>\n            If MultiSelection is true, this returns the currently selected items. You can bind this property and the initial content of the HashSet you bind it to will cause these rows to be selected initially.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedItems",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Comparer",
            "TypeName": "System.Collections.Generic.IEqualityComparer<T>",
            "Documentation": "\n            <summary>\n            The Comparer to use for comparing selected items internally.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Comparer",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedItemsChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.HashSet<T>>",
            "Documentation": "\n            <summary>\n            Callback is called whenever items are selected or deselected in multi selection mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedItemsChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupBy",
            "TypeName": "MudBlazor.TableGroupDefinition<T>",
            "Documentation": "\n            <summary>\n            Defines data grouping parameters. It can has N hierarchical levels\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GroupBy",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupHeaderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.TableGroupData<System.Object, T>>",
            "Documentation": "\n            <summary>\n            Defines how a table grouping row header looks like. It works only when GroupBy is not null. Use MudTd to define the table cells and their content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GroupHeaderTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupHeaderClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Defines custom CSS classes for using on Group Header's MudTr.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GroupHeaderClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupHeaderStyle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Defines custom styles for using on Group Header's MudTr.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GroupHeaderStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupFooterClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Defines custom CSS classes for using on Group Footer's MudTr.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GroupFooterClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupFooterStyle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Defines custom styles for using on Group Footer's MudTr.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GroupFooterStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupFooterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.TableGroupData<System.Object, T>>",
            "Documentation": "\n            <summary>\n            Defines how a table grouping row footer looks like. It works only when GroupBy is not null. Use MudTd to define the table cells and their content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GroupFooterTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ServerData",
            "TypeName": "System.Func<MudBlazor.TableState, System.Threading.Tasks.Task<MudBlazor.TableData<T>>>",
            "Documentation": "\n            <summary>\n            Supply an async function which (re)loads filtered, paginated and sorted data from server.\n            Table will await this func and update based on the returned TableData.\n            Used only with ServerData\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ServerData",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsEditRowSwitchingBlocked",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When editing a row and this is true, the editing row must be saved/cancelled before a new row will be selected.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsEditRowSwitchingBlocked"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow. 0 for no shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true to disable rounded corners\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outlined",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, table will be outlined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outlined"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Bordered",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, table's cells will have left/right borders.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Bordered"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true for rows with a narrow height\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hover",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true to see rows hover on mouse-over.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hover"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Striped",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, striped table rows will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Striped"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Breakpoint",
            "TypeName": "MudBlazor.Breakpoint",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            At what breakpoint the table should switch to mobile layout. Takes None, Xs, Sm, Md, Lg and Xl the default behavior is breaking on Xs.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Breakpoint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FixedHeader",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When true, the header will stay in place when the table is scrolled. Note: set Height to make the table scrollable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FixedHeader"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FixedFooter",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When true, the footer will be visible is not scrolled to the bottom. Note: set Height to make the table scrollable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FixedFooter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Setting a height will allow to scroll the table. If not set, it will try to grow in height. You can set this to any CSS value that the\n            attribute 'height' accepts, i.e. 500px. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If table is in smalldevice mode and uses any kind of sorting the text applied here will be the sort selects label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SortLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AllowUnsorted",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true allows table to be in an unsorted state through column clicks (i.e. first click sorts \"Ascending\", second \"Descending\", third \"None\").\n            If false only \"Ascending\" and \"Descending\" states are allowed (i.e. there always should be a column to sort).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AllowUnsorted"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowsPerPage",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            If the table has more items than this number, it will break the rows into pages of said size.\n            Note: requires a MudTablePager in PagerContent.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowsPerPage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowsPerPageChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Rows Per Page two-way bindable parameter\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowsPerPageChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CurrentPage",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The page index of the currently displayed page (Zero based). Usually called by MudTablePager.\n            Note: requires a MudTablePager in PagerContent.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CurrentPage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MultiSelection",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set to true to enable selection of multiple rows with check boxes. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MultiSelection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToolBarContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Optional. Add any kind of toolbar to this render fragment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToolBarContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Loading",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show a loading animation, if true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Loading"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LoadingProgressColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the loading progress if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LoadingProgressColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Add MudTh cells here to define the table header. If <see cref=\"P:MudBlazor.MudTableBase.CustomHeader\" /> is set, add one or more MudTHeadRow instead.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CustomHeader",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Specify if the header has multiple rows. In that case, you need to provide the MudTHeadRow tags.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CustomHeader"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Add a class to the thead tag\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Add MudTd cells here to define the table footer. If<see cref=\"P:MudBlazor.MudTableBase.CustomFooter\" /> is set, add one or more MudTFootRow instead.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CustomFooter",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Specify if the footer has multiple rows. In that case, you need to provide the MudTFootRow tags.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CustomFooter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Add a class to the tfoot tag\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColGroup",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Specifies a group of one or more columns in a table for formatting.\n            Ex:\n            table\n                colgroup\n                   col span=\"2\" style=\"background-color:red\"\n                   col style=\"background-color:yellow\"\n                 colgroup\n                 header\n                 body\n            table\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ColGroup",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PagerContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Add MudTablePager here to enable breaking the rows in to multiple pages.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PagerContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Locks Inline Edit mode, if true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnCommitEditClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button commit edit click event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnCommitEditClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnCancelEditClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button cancel edit click event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnCancelEditClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnPreviewEditClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Object>",
            "Documentation": "\n            <summary>\n            Event is called before the item is modified in inline editing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnPreviewEditClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommitEditCommand",
            "TypeName": "System.Windows.Input.ICommand",
            "Documentation": "\n            <summary>\n            Command executed when the user clicks on the CommitEdit Button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommitEditCommand"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommitEditCommandParameter",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Command parameter for the CommitEdit Button. By default, will be the row level item model, if you won't set anything else.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommitEditCommandParameter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommitEditTooltip",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Tooltip for the CommitEdit Button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommitEditTooltip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CancelEditTooltip",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Tooltip for the CancelEdit Button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CancelEditTooltip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommitEditIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the Icon of the CommitEdit Button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommitEditIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CancelEditIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the Icon of the CancelEdit Button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CancelEditIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CanCancelEdit",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Define if Cancel button is present or not for inline editing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CanCancelEdit"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ApplyButtonPosition",
            "TypeName": "MudBlazor.TableApplyButtonPosition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Set the positon of the CommitEdit and CancelEdit button, if <see cref=\"P:MudBlazor.MudTableBase.IsEditable\" /> IsEditable is true. Defaults to the end of the row\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ApplyButtonPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowEditPreview",
            "TypeName": "System.Action<System.Object>",
            "Documentation": "\n            <summary>\n            The method is called before the item is modified in inline editing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowEditPreview",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowEditCommit",
            "TypeName": "System.Action<System.Object>",
            "Documentation": "\n            <summary>\n            The method is called when the edition of the item has been committed in inline editing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowEditCommit",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowEditCancel",
            "TypeName": "System.Action<System.Object>",
            "Documentation": "\n            <summary>\n            The method is called when the edition of the item has been canceled in inline editing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowEditCancel",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TotalItems",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Number of items. Used only with ServerData=\"true\"\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TotalItems"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class for the table rows. Note, many CSS settings are overridden by MudTd though\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowStyle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS styles for the table rows. Note, many CSS settings are overridden by MudTd though\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Virtualize",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the results are displayed in a Virtualize component, allowing a boost in rendering speed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Virtualize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RightAlignSmall",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Alignment of the table cell text when breakpoint is smaller than <see cref=\"P:MudBlazor.MudTableBase.Breakpoint\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RightAlignSmall"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTable<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -769844662,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTable<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTable"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudTable<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Documentation": "\n            <summary>\n            Defines how a table row looks like. Use MudTd to define the table cells and their content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildRowContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Documentation": "\n            <summary>\n            Row Child content of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildRowContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowEditingTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Documentation": "\n            <summary>\n            Defines how a table row looks like in edit mode (for selected row). Use MudTd to define the table cells and their content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowEditingTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Columns",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Documentation": "\n            <summary>\n            Defines how a table column looks like. Columns components should inherit from MudBaseColumn\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Columns",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "QuickColumns",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Comma separated list of columns to show if there is no templates defined\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "QuickColumns"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NoRecordsContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Defines the table body content when there are no matching records found\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NoRecordsContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LoadingContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Defines the table body content  the table has no rows and is loading\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LoadingContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HorizontalScrollbar",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Defines if the table has a horizontal scrollbar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HorizontalScrollbar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.IEnumerable<T>",
            "Documentation": "\n            <summary>\n            The data to display in the table. MudTable will render one row per item\n            </summary>\n            \n        ",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Filter",
            "TypeName": "System.Func<T, System.Boolean>",
            "Documentation": "\n            <summary>\n            A function that returns whether or not an item should be displayed in the table. You can use this to implement your own search function.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Filter",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnRowClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.TableRowClickEventArgs<T>>",
            "Documentation": "\n            <summary>\n            Button click event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnRowClick",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowClassFunc",
            "TypeName": "System.Func<T, System.Int32, System.String>",
            "Documentation": "\n            <summary>\n            Returns the class that will get joined with RowClass. Takes the current item and row index.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowClassFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowStyleFunc",
            "TypeName": "System.Func<T, System.Int32, System.String>",
            "Documentation": "\n            <summary>\n            Returns the style that will get joined with RowStyle. Takes the current item and row index.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowStyleFunc",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedItem",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            Returns the item which was last clicked on in single selection mode (that is, if MultiSelection is false)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedItem",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedItemChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Callback is called when a row has been clicked and returns the selected item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedItemChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedItems",
            "TypeName": "System.Collections.Generic.HashSet<T>",
            "Documentation": "\n            <summary>\n            If MultiSelection is true, this returns the currently selected items. You can bind this property and the initial content of the HashSet you bind it to will cause these rows to be selected initially.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedItems",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Comparer",
            "TypeName": "System.Collections.Generic.IEqualityComparer<T>",
            "Documentation": "\n            <summary>\n            The Comparer to use for comparing selected items internally.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Comparer",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedItemsChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.HashSet<T>>",
            "Documentation": "\n            <summary>\n            Callback is called whenever items are selected or deselected in multi selection mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedItemsChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupBy",
            "TypeName": "MudBlazor.TableGroupDefinition<T>",
            "Documentation": "\n            <summary>\n            Defines data grouping parameters. It can has N hierarchical levels\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GroupBy",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupHeaderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.TableGroupData<System.Object, T>>",
            "Documentation": "\n            <summary>\n            Defines how a table grouping row header looks like. It works only when GroupBy is not null. Use MudTd to define the table cells and their content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GroupHeaderTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupHeaderClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Defines custom CSS classes for using on Group Header's MudTr.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GroupHeaderClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupHeaderStyle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Defines custom styles for using on Group Header's MudTr.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GroupHeaderStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupFooterClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Defines custom CSS classes for using on Group Footer's MudTr.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GroupFooterClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupFooterStyle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Defines custom styles for using on Group Footer's MudTr.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GroupFooterStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupFooterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.TableGroupData<System.Object, T>>",
            "Documentation": "\n            <summary>\n            Defines how a table grouping row footer looks like. It works only when GroupBy is not null. Use MudTd to define the table cells and their content.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GroupFooterTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ServerData",
            "TypeName": "System.Func<MudBlazor.TableState, System.Threading.Tasks.Task<MudBlazor.TableData<T>>>",
            "Documentation": "\n            <summary>\n            Supply an async function which (re)loads filtered, paginated and sorted data from server.\n            Table will await this func and update based on the returned TableData.\n            Used only with ServerData\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ServerData",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsEditRowSwitchingBlocked",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When editing a row and this is true, the editing row must be saved/cancelled before a new row will be selected.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsEditRowSwitchingBlocked"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow. 0 for no shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true to disable rounded corners\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outlined",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, table will be outlined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outlined"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Bordered",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, table's cells will have left/right borders.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Bordered"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true for rows with a narrow height\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hover",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true to see rows hover on mouse-over.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hover"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Striped",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, striped table rows will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Striped"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Breakpoint",
            "TypeName": "MudBlazor.Breakpoint",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            At what breakpoint the table should switch to mobile layout. Takes None, Xs, Sm, Md, Lg and Xl the default behavior is breaking on Xs.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Breakpoint"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FixedHeader",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When true, the header will stay in place when the table is scrolled. Note: set Height to make the table scrollable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FixedHeader"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FixedFooter",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When true, the footer will be visible is not scrolled to the bottom. Note: set Height to make the table scrollable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FixedFooter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Setting a height will allow to scroll the table. If not set, it will try to grow in height. You can set this to any CSS value that the\n            attribute 'height' accepts, i.e. 500px. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If table is in smalldevice mode and uses any kind of sorting the text applied here will be the sort selects label.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SortLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AllowUnsorted",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true allows table to be in an unsorted state through column clicks (i.e. first click sorts \"Ascending\", second \"Descending\", third \"None\").\n            If false only \"Ascending\" and \"Descending\" states are allowed (i.e. there always should be a column to sort).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AllowUnsorted"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowsPerPage",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            If the table has more items than this number, it will break the rows into pages of said size.\n            Note: requires a MudTablePager in PagerContent.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowsPerPage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowsPerPageChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Rows Per Page two-way bindable parameter\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowsPerPageChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CurrentPage",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The page index of the currently displayed page (Zero based). Usually called by MudTablePager.\n            Note: requires a MudTablePager in PagerContent.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CurrentPage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MultiSelection",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set to true to enable selection of multiple rows with check boxes. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MultiSelection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToolBarContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Optional. Add any kind of toolbar to this render fragment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToolBarContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Loading",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show a loading animation, if true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Loading"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LoadingProgressColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the loading progress if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LoadingProgressColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Add MudTh cells here to define the table header. If <see cref=\"P:MudBlazor.MudTableBase.CustomHeader\" /> is set, add one or more MudTHeadRow instead.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CustomHeader",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Specify if the header has multiple rows. In that case, you need to provide the MudTHeadRow tags.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CustomHeader"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Add a class to the thead tag\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Add MudTd cells here to define the table footer. If<see cref=\"P:MudBlazor.MudTableBase.CustomFooter\" /> is set, add one or more MudTFootRow instead.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CustomFooter",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Specify if the footer has multiple rows. In that case, you need to provide the MudTFootRow tags.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CustomFooter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Add a class to the tfoot tag\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColGroup",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Specifies a group of one or more columns in a table for formatting.\n            Ex:\n            table\n                colgroup\n                   col span=\"2\" style=\"background-color:red\"\n                   col style=\"background-color:yellow\"\n                 colgroup\n                 header\n                 body\n            table\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ColGroup",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PagerContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Add MudTablePager here to enable breaking the rows in to multiple pages.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PagerContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Locks Inline Edit mode, if true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnCommitEditClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button commit edit click event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnCommitEditClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnCancelEditClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button cancel edit click event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnCancelEditClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnPreviewEditClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Object>",
            "Documentation": "\n            <summary>\n            Event is called before the item is modified in inline editing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnPreviewEditClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommitEditCommand",
            "TypeName": "System.Windows.Input.ICommand",
            "Documentation": "\n            <summary>\n            Command executed when the user clicks on the CommitEdit Button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommitEditCommand"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommitEditCommandParameter",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Command parameter for the CommitEdit Button. By default, will be the row level item model, if you won't set anything else.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommitEditCommandParameter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommitEditTooltip",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Tooltip for the CommitEdit Button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommitEditTooltip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CancelEditTooltip",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Tooltip for the CancelEdit Button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CancelEditTooltip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommitEditIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the Icon of the CommitEdit Button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommitEditIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CancelEditIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the Icon of the CancelEdit Button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CancelEditIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CanCancelEdit",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Define if Cancel button is present or not for inline editing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CanCancelEdit"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ApplyButtonPosition",
            "TypeName": "MudBlazor.TableApplyButtonPosition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Set the positon of the CommitEdit and CancelEdit button, if <see cref=\"P:MudBlazor.MudTableBase.IsEditable\" /> IsEditable is true. Defaults to the end of the row\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ApplyButtonPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowEditPreview",
            "TypeName": "System.Action<System.Object>",
            "Documentation": "\n            <summary>\n            The method is called before the item is modified in inline editing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowEditPreview",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowEditCommit",
            "TypeName": "System.Action<System.Object>",
            "Documentation": "\n            <summary>\n            The method is called when the edition of the item has been committed in inline editing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowEditCommit",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowEditCancel",
            "TypeName": "System.Action<System.Object>",
            "Documentation": "\n            <summary>\n            The method is called when the edition of the item has been canceled in inline editing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowEditCancel",
              "Components.DelegateSignature": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TotalItems",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Number of items. Used only with ServerData=\"true\"\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TotalItems"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class for the table rows. Note, many CSS settings are overridden by MudTd though\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowStyle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS styles for the table rows. Note, many CSS settings are overridden by MudTd though\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Virtualize",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the results are displayed in a Virtualize component, allowing a boost in rendering speed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Virtualize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RightAlignSmall",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Alignment of the table cell text when breakpoint is smaller than <see cref=\"P:MudBlazor.MudTableBase.Breakpoint\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RightAlignSmall"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTable<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1699551044,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.RowTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Defines how a table row looks like. Use MudTd to define the table cells and their content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "RowTemplate",
            "ParentTag": "MudTable"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'RowTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.RowTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1476459795,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.RowTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Defines how a table row looks like. Use MudTd to define the table cells and their content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "RowTemplate",
            "ParentTag": "MudBlazor.MudTable"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'RowTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.RowTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1902689214,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.ChildRowContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Row Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildRowContent",
            "ParentTag": "MudTable"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildRowContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.ChildRowContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -875556787,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.ChildRowContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Row Child content of the component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildRowContent",
            "ParentTag": "MudBlazor.MudTable"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildRowContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.ChildRowContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2143154835,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.RowEditingTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Defines how a table row looks like in edit mode (for selected row). Use MudTd to define the table cells and their content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "RowEditingTemplate",
            "ParentTag": "MudTable"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'RowEditingTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.RowEditingTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1375665561,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.RowEditingTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Defines how a table row looks like in edit mode (for selected row). Use MudTd to define the table cells and their content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "RowEditingTemplate",
            "ParentTag": "MudBlazor.MudTable"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'RowEditingTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.RowEditingTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1705180824,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.Columns",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Defines how a table column looks like. Columns components should inherit from MudBaseColumn\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Columns",
            "ParentTag": "MudTable"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Columns' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.Columns",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 346211463,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.Columns",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Defines how a table column looks like. Columns components should inherit from MudBaseColumn\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Columns",
            "ParentTag": "MudBlazor.MudTable"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Columns' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.Columns",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1164035048,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.NoRecordsContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Defines the table body content when there are no matching records found\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NoRecordsContent",
            "ParentTag": "MudTable"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.NoRecordsContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -300864240,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.NoRecordsContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Defines the table body content when there are no matching records found\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NoRecordsContent",
            "ParentTag": "MudBlazor.MudTable"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.NoRecordsContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1260333493,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.LoadingContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Defines the table body content  the table has no rows and is loading\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LoadingContent",
            "ParentTag": "MudTable"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.LoadingContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1788239475,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.LoadingContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Defines the table body content  the table has no rows and is loading\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LoadingContent",
            "ParentTag": "MudBlazor.MudTable"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.LoadingContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1323860892,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.GroupHeaderTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Defines how a table grouping row header looks like. It works only when GroupBy is not null. Use MudTd to define the table cells and their content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "GroupHeaderTemplate",
            "ParentTag": "MudTable"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'GroupHeaderTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.GroupHeaderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1891987724,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.GroupHeaderTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Defines how a table grouping row header looks like. It works only when GroupBy is not null. Use MudTd to define the table cells and their content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "GroupHeaderTemplate",
            "ParentTag": "MudBlazor.MudTable"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'GroupHeaderTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.GroupHeaderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1947102363,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.GroupFooterTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Defines how a table grouping row footer looks like. It works only when GroupBy is not null. Use MudTd to define the table cells and their content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "GroupFooterTemplate",
            "ParentTag": "MudTable"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'GroupFooterTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.GroupFooterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1318421017,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.GroupFooterTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Defines how a table grouping row footer looks like. It works only when GroupBy is not null. Use MudTd to define the table cells and their content.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "GroupFooterTemplate",
            "ParentTag": "MudBlazor.MudTable"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'GroupFooterTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.GroupFooterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -461218400,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.ToolBarContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Optional. Add any kind of toolbar to this render fragment.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ToolBarContent",
            "ParentTag": "MudTable"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.ToolBarContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 841756766,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.ToolBarContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Optional. Add any kind of toolbar to this render fragment.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ToolBarContent",
            "ParentTag": "MudBlazor.MudTable"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.ToolBarContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1023610846,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.HeaderContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Add MudTh cells here to define the table header. If <see cref=\"P:MudBlazor.MudTableBase.CustomHeader\" /> is set, add one or more MudTHeadRow instead.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeaderContent",
            "ParentTag": "MudTable"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.HeaderContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1810325853,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.HeaderContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Add MudTh cells here to define the table header. If <see cref=\"P:MudBlazor.MudTableBase.CustomHeader\" /> is set, add one or more MudTHeadRow instead.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeaderContent",
            "ParentTag": "MudBlazor.MudTable"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.HeaderContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1004778602,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.FooterContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Add MudTd cells here to define the table footer. If<see cref=\"P:MudBlazor.MudTableBase.CustomFooter\" /> is set, add one or more MudTFootRow instead.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FooterContent",
            "ParentTag": "MudTable"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.FooterContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -638291980,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.FooterContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Add MudTd cells here to define the table footer. If<see cref=\"P:MudBlazor.MudTableBase.CustomFooter\" /> is set, add one or more MudTFootRow instead.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FooterContent",
            "ParentTag": "MudBlazor.MudTable"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.FooterContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1818801455,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.ColGroup",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Specifies a group of one or more columns in a table for formatting.\n            Ex:\n            table\n                colgroup\n                   col span=\"2\" style=\"background-color:red\"\n                   col style=\"background-color:yellow\"\n                 colgroup\n                 header\n                 body\n            table\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ColGroup",
            "ParentTag": "MudTable"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.ColGroup",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1497456171,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.ColGroup",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Specifies a group of one or more columns in a table for formatting.\n            Ex:\n            table\n                colgroup\n                   col span=\"2\" style=\"background-color:red\"\n                   col style=\"background-color:yellow\"\n                 colgroup\n                 header\n                 body\n            table\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ColGroup",
            "ParentTag": "MudBlazor.MudTable"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.ColGroup",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -272743569,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.PagerContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Add MudTablePager here to enable breaking the rows in to multiple pages.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PagerContent",
            "ParentTag": "MudTable"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.PagerContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -916360020,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTable<T>.PagerContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Add MudTablePager here to enable breaking the rows in to multiple pages.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PagerContent",
            "ParentTag": "MudBlazor.MudTable"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTable<T>.PagerContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -348070006,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTableGroupRow<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTableGroupRow"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudTableGroupRow<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupDefinition",
            "TypeName": "MudBlazor.TableGroupDefinition<T>",
            "Documentation": "\n            <summary>\n            The group definition for this grouping level. It's recursive.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GroupDefinition",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Linq.IGrouping<System.Object, T>",
            "Documentation": "\n            <summary>\n            Inner Items List for the Group\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.TableGroupData<System.Object, T>>",
            "Documentation": "\n            <summary>\n            Defines Group Header Data Template\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.TableGroupData<System.Object, T>>",
            "Documentation": "\n            <summary>\n            Defines Group Header Data Template\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsCheckable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Add a multi-select checkbox that will select/unselect every item in the table\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsCheckable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "HeaderClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "FooterClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderStyle",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "HeaderStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterStyle",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "FooterStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom expand icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CollapseIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom collapse icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CollapseIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnRowClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            On click event\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnRowClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTableGroupRow<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 1096592009,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTableGroupRow<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTableGroupRow"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudTableGroupRow<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GroupDefinition",
            "TypeName": "MudBlazor.TableGroupDefinition<T>",
            "Documentation": "\n            <summary>\n            The group definition for this grouping level. It's recursive.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GroupDefinition",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Linq.IGrouping<System.Object, T>",
            "Documentation": "\n            <summary>\n            Inner Items List for the Group\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.TableGroupData<System.Object, T>>",
            "Documentation": "\n            <summary>\n            Defines Group Header Data Template\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.TableGroupData<System.Object, T>>",
            "Documentation": "\n            <summary>\n            Defines Group Header Data Template\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FooterTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsCheckable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Add a multi-select checkbox that will select/unselect every item in the table\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsCheckable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "HeaderClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterClass",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "FooterClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderStyle",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "HeaderStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FooterStyle",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "FooterStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom expand icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CollapseIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom collapse icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CollapseIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnRowClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            On click event\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnRowClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTableGroupRow<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1936318146,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTableGroupRow<T>.HeaderTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Defines Group Header Data Template\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeaderTemplate",
            "ParentTag": "MudTableGroupRow"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'HeaderTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTableGroupRow<T>.HeaderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1251261781,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTableGroupRow<T>.HeaderTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Defines Group Header Data Template\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeaderTemplate",
            "ParentTag": "MudBlazor.MudTableGroupRow"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'HeaderTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTableGroupRow<T>.HeaderTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1094631069,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTableGroupRow<T>.FooterTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Defines Group Header Data Template\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FooterTemplate",
            "ParentTag": "MudTableGroupRow"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'FooterTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTableGroupRow<T>.FooterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1099713078,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTableGroupRow<T>.FooterTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Defines Group Header Data Template\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FooterTemplate",
            "ParentTag": "MudBlazor.MudTableGroupRow"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'FooterTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTableGroupRow<T>.FooterTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 533260938,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTablePager",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTablePager"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "HideRowsPerPage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true to hide the part of the pager which allows to change the page size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HideRowsPerPage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRowsPerPage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true to hide the part of the pager which allows to change the page size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRowsPerPage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HidePageNumber",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true to hide the number of pages.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HidePageNumber"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HidePagination",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true to hide the pagination.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HidePagination"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HorizontalAlignment",
            "TypeName": "MudBlazor.HorizontalAlignment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Set the horizontal alignment position.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HorizontalAlignment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PageSizeOptions",
            "TypeName": "System.Int32[]",
            "Documentation": "\n            <summary>\n            Define a list of available page size options for the user to choose from\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PageSizeOptions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InfoFormat",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Format string for the display of the current page, which you can localize to your language. Available variables are:\n            {first_item}, {last_item} and {all_items} which will replaced with the indices of the page's first and last item, as well as the total number of items.\n            Default: \"{first_item}-{last_item} of {all_items}\" which is transformed into \"0-25 of 77\". \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InfoFormat"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowsPerPageString",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The localizable \"Rows per page:\" text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowsPerPageString"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FirstIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom first icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FirstIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BeforeIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom before icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BeforeIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NextIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom next icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NextIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LastIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom last icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LastIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTablePager"
        }
      },
      {
        "HashCode": -85150572,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTablePager",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTablePager"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "HideRowsPerPage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true to hide the part of the pager which allows to change the page size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HideRowsPerPage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRowsPerPage",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true to hide the part of the pager which allows to change the page size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRowsPerPage"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HidePageNumber",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true to hide the number of pages.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HidePageNumber"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HidePagination",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set true to hide the pagination.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HidePagination"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HorizontalAlignment",
            "TypeName": "MudBlazor.HorizontalAlignment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Set the horizontal alignment position.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HorizontalAlignment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PageSizeOptions",
            "TypeName": "System.Int32[]",
            "Documentation": "\n            <summary>\n            Define a list of available page size options for the user to choose from\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PageSizeOptions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InfoFormat",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Format string for the display of the current page, which you can localize to your language. Available variables are:\n            {first_item}, {last_item} and {all_items} which will replaced with the indices of the page's first and last item, as well as the total number of items.\n            Default: \"{first_item}-{last_item} of {all_items}\" which is transformed into \"0-25 of 77\". \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InfoFormat"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RowsPerPageString",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The localizable \"Rows per page:\" text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RowsPerPageString"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FirstIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom first icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FirstIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BeforeIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom before icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BeforeIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NextIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom next icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NextIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LastIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom last icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LastIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTablePager",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1234639455,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTableSortLabel<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTableSortLabel"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudTableSortLabel<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InitialDirection",
            "TypeName": "MudBlazor.SortDirection",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "InitialDirection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Enable the sorting. Set to true by default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Icon used to display sortdirection.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SortIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AppendIcon",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true the icon will be placed before the label text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AppendIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortDirection",
            "TypeName": "MudBlazor.SortDirection",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "SortDirection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortDirectionChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.SortDirection>",
            "Metadata": {
              "Common.PropertyName": "SortDirectionChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortBy",
            "TypeName": "System.Func<T, System.Object>",
            "Metadata": {
              "Common.PropertyName": "SortBy",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortLabel",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "SortLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTableSortLabel<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 465621203,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTableSortLabel<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTableSortLabel"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudTableSortLabel<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InitialDirection",
            "TypeName": "MudBlazor.SortDirection",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "InitialDirection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Enable the sorting. Set to true by default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Icon used to display sortdirection.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SortIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AppendIcon",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true the icon will be placed before the label text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AppendIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortDirection",
            "TypeName": "MudBlazor.SortDirection",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "SortDirection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortDirectionChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.SortDirection>",
            "Metadata": {
              "Common.PropertyName": "SortDirectionChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortBy",
            "TypeName": "System.Func<T, System.Object>",
            "Metadata": {
              "Common.PropertyName": "SortBy",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SortLabel",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "SortLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTableSortLabel<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -473315776,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTableSortLabel<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudTableSortLabel"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTableSortLabel<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -2143865755,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTableSortLabel<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudTableSortLabel"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTableSortLabel<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1565829953,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTd",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTd"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DataLabel",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "DataLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HideSmall",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hide cell when breakpoint is smaller than the defined value in table.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HideSmall"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTd"
        }
      },
      {
        "HashCode": 1045434133,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTd",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTd"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DataLabel",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "DataLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HideSmall",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hide cell when breakpoint is smaller than the defined value in table.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HideSmall"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTd",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 301688919,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTd.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudTd"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTd.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -284208779,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTd.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudTd"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTd.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 186487903,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTFootRow",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTFootRow"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsCheckable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Add a multi-select checkbox that will select/unselect every item in the table\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsCheckable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IgnoreCheckbox",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Specify behavior in case the table is multi-select mode. If set to <code>true</code>, it won't render an additional empty column.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IgnoreCheckbox"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IgnoreEditable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Specify behavior in case the table is editable. If set to <code>true</code>, it won't render an additional empty column.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IgnoreEditable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsExpandable",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "IsExpandable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnRowClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            On click event\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnRowClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTFootRow"
        }
      },
      {
        "HashCode": 1488546817,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTFootRow",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTFootRow"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsCheckable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Add a multi-select checkbox that will select/unselect every item in the table\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsCheckable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IgnoreCheckbox",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Specify behavior in case the table is multi-select mode. If set to <code>true</code>, it won't render an additional empty column.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IgnoreCheckbox"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IgnoreEditable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Specify behavior in case the table is editable. If set to <code>true</code>, it won't render an additional empty column.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IgnoreEditable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsExpandable",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "IsExpandable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnRowClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            On click event\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnRowClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTFootRow",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 251345412,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTFootRow.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudTFootRow"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTFootRow.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 840514913,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTFootRow.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudTFootRow"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTFootRow.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 811787552,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTh",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTh"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTh"
        }
      },
      {
        "HashCode": 416604467,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTh",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTh"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTh",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1116062416,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTh.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudTh"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTh.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1934337989,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTh.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudTh"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTh.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 548177443,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTHeadRow",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTHeadRow"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsCheckable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Add a multi-select checkbox that will select/unselect every item in the table\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsCheckable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IgnoreCheckbox",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Specify behavior in case the table is multi-select mode. If set to <code>true</code>, it won't render an additional empty column.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IgnoreCheckbox"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IgnoreEditable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Specify behavior in case the table is editable. If set to <code>true</code>, it won't render an additional empty column.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IgnoreEditable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsExpandable",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "IsExpandable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnRowClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            On click event\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnRowClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTHeadRow"
        }
      },
      {
        "HashCode": -1636753684,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTHeadRow",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTHeadRow"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsCheckable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Add a multi-select checkbox that will select/unselect every item in the table\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsCheckable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IgnoreCheckbox",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Specify behavior in case the table is multi-select mode. If set to <code>true</code>, it won't render an additional empty column.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IgnoreCheckbox"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IgnoreEditable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Specify behavior in case the table is editable. If set to <code>true</code>, it won't render an additional empty column.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IgnoreEditable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsExpandable",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "IsExpandable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnRowClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            On click event\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnRowClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTHeadRow",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1430680126,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTHeadRow.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudTHeadRow"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTHeadRow.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1037488148,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTHeadRow.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudTHeadRow"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTHeadRow.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1778822695,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTr",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTr"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Item",
            "TypeName": "System.Object",
            "Metadata": {
              "Common.PropertyName": "Item"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsCheckable",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "IsCheckable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsEditable",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "IsEditable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsEditing",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "IsEditing"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsEditSwitchBlocked",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "IsEditSwitchBlocked"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsExpandable",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "IsExpandable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsCheckedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Metadata": {
              "Common.PropertyName": "IsCheckedChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsChecked",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "IsChecked"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTr"
        }
      },
      {
        "HashCode": -835568182,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTr",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTr"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Item",
            "TypeName": "System.Object",
            "Metadata": {
              "Common.PropertyName": "Item"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsCheckable",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "IsCheckable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsEditable",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "IsEditable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsEditing",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "IsEditing"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsEditSwitchBlocked",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "IsEditSwitchBlocked"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsExpandable",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "IsExpandable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsCheckedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Metadata": {
              "Common.PropertyName": "IsCheckedChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsChecked",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "IsChecked"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTr",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1081629182,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTr.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudTr"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTr.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1210415417,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTr.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudTr"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTr.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1270607667,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDynamicTabs",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDynamicTabs"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AddTabIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The icon used for the add button\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AddTabIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseTabIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            the icon used of the close button\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseTabIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AddTab",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            The callback, when the add button has been clicked\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AddTab",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseTab",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.MudTabPanel>",
            "Documentation": "\n            <summary>\n            The callback, when the a close button has been clicked\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseTab",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AddIconClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Classes that are applied to the icon button of the add button\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AddIconClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AddIconStyle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Styles that are applied to the icon button of the add button\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AddIconStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseIconClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Classes that are applied to the icon button of the close button\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseIconClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseIconStyle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Styles that are applied to the icon button of the close button\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseIconStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AddIconToolTip",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Tooltip that shown when a user hovers of the add button. Empty or null, if no tooltip should be visible\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AddIconToolTip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseIconToolTip",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Tooltip that shown when a user hovers of the close button. Empty or null, if no tooltip should be visible\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseIconToolTip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeepPanelsAlive",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, render all tabs and hide (display:none) every non-active.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeepPanelsAlive"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Rounded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, sets the border-radius to theme default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Rounded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Border",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, sets a border between the content and the toolbar depending on the position.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Border"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outlined",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, toolbar will be outlined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outlined"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Centered",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, centers the tabitems.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Centered"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HideSlider",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hides the active tab slider.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HideSlider"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PrevIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon to use for left pagination.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PrevIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NextIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon to use for right pagination.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NextIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AlwaysShowScrollButtons",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, always display the scroll buttons even if the tabs are smaller than the required with, buttons will be disabled if there is nothing to scroll.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AlwaysShowScrollButtons"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxHeight",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Sets the maxheight the component can have.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Position",
            "TypeName": "MudBlazor.Position",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the position of the tabs itself.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Position"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SliderColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the tab slider. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SliderColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ScrollIconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the next/prev icons. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ScrollIconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow, applies around the whole component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ApplyEffectsToContainer",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, will apply elevation, rounded, outlined effects to the whole tab component instead of just toolbar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ApplyEffectsToContainer"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableSliderAnimation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables slider animation\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableSliderAnimation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PrePanelContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.MudTabPanel>",
            "Documentation": "\n            <summary>\n            This fragment is placed between toolbar and panels. \n            It can be used to display additional content like an address line in a browser.\n            The active tab will be the content of this RenderFragement\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PrePanelContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TabPanelClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom class/classes for TabPanel\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TabPanelClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PanelClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom class/classes for Selected Content Panel\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PanelClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ActivePanelIndex",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The current active panel index. Also with Bidirectional Binding\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActivePanelIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ActivePanelIndexChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Fired when ActivePanelIndex changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActivePanelIndexChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Header",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.MudTabs>",
            "Documentation": "\n            <summary>\n            A render fragment that is added before or after (based on the value of HeaderPosition) the tabs inside the header panel of the tab control\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Header",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderPosition",
            "TypeName": "MudBlazor.TabHeaderPosition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Additional content specified by Header is placed either before the tabs, after or not at all\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TabPanelHeader",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.MudTabPanel>",
            "Documentation": "\n            <summary>\n            A render fragment that is added before or after (based on the value of HeaderPosition) inside each tab panel\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TabPanelHeader",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TabPanelHeaderPosition",
            "TypeName": "MudBlazor.TabHeaderPosition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Additional content specified by Header is placed either before the tabs, after or not at all\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TabPanelHeaderPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDynamicTabs"
        }
      },
      {
        "HashCode": -2032867547,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDynamicTabs",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDynamicTabs"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AddTabIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The icon used for the add button\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AddTabIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseTabIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            the icon used of the close button\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseTabIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AddTab",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            The callback, when the add button has been clicked\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AddTab",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseTab",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.MudTabPanel>",
            "Documentation": "\n            <summary>\n            The callback, when the a close button has been clicked\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseTab",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AddIconClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Classes that are applied to the icon button of the add button\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AddIconClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AddIconStyle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Styles that are applied to the icon button of the add button\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AddIconStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseIconClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Classes that are applied to the icon button of the close button\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseIconClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseIconStyle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Styles that are applied to the icon button of the close button\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseIconStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AddIconToolTip",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Tooltip that shown when a user hovers of the add button. Empty or null, if no tooltip should be visible\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AddIconToolTip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CloseIconToolTip",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Tooltip that shown when a user hovers of the close button. Empty or null, if no tooltip should be visible\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CloseIconToolTip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeepPanelsAlive",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, render all tabs and hide (display:none) every non-active.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeepPanelsAlive"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Rounded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, sets the border-radius to theme default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Rounded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Border",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, sets a border between the content and the toolbar depending on the position.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Border"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outlined",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, toolbar will be outlined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outlined"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Centered",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, centers the tabitems.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Centered"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HideSlider",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hides the active tab slider.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HideSlider"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PrevIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon to use for left pagination.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PrevIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NextIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon to use for right pagination.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NextIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AlwaysShowScrollButtons",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, always display the scroll buttons even if the tabs are smaller than the required with, buttons will be disabled if there is nothing to scroll.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AlwaysShowScrollButtons"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxHeight",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Sets the maxheight the component can have.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Position",
            "TypeName": "MudBlazor.Position",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the position of the tabs itself.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Position"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SliderColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the tab slider. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SliderColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ScrollIconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the next/prev icons. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ScrollIconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow, applies around the whole component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ApplyEffectsToContainer",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, will apply elevation, rounded, outlined effects to the whole tab component instead of just toolbar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ApplyEffectsToContainer"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableSliderAnimation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables slider animation\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableSliderAnimation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PrePanelContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.MudTabPanel>",
            "Documentation": "\n            <summary>\n            This fragment is placed between toolbar and panels. \n            It can be used to display additional content like an address line in a browser.\n            The active tab will be the content of this RenderFragement\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PrePanelContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TabPanelClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom class/classes for TabPanel\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TabPanelClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PanelClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom class/classes for Selected Content Panel\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PanelClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ActivePanelIndex",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The current active panel index. Also with Bidirectional Binding\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActivePanelIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ActivePanelIndexChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Fired when ActivePanelIndex changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActivePanelIndexChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Header",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.MudTabs>",
            "Documentation": "\n            <summary>\n            A render fragment that is added before or after (based on the value of HeaderPosition) the tabs inside the header panel of the tab control\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Header",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderPosition",
            "TypeName": "MudBlazor.TabHeaderPosition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Additional content specified by Header is placed either before the tabs, after or not at all\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TabPanelHeader",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.MudTabPanel>",
            "Documentation": "\n            <summary>\n            A render fragment that is added before or after (based on the value of HeaderPosition) inside each tab panel\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TabPanelHeader",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TabPanelHeaderPosition",
            "TypeName": "MudBlazor.TabHeaderPosition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Additional content specified by Header is placed either before the tabs, after or not at all\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TabPanelHeaderPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDynamicTabs",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1874707115,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDynamicTabs.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudDynamicTabs"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDynamicTabs.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -89764651,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDynamicTabs.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudDynamicTabs"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDynamicTabs.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 618993290,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDynamicTabs.PrePanelContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            This fragment is placed between toolbar and panels. \n            It can be used to display additional content like an address line in a browser.\n            The active tab will be the content of this RenderFragement\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PrePanelContent",
            "ParentTag": "MudDynamicTabs"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'PrePanelContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDynamicTabs.PrePanelContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 176724754,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDynamicTabs.PrePanelContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            This fragment is placed between toolbar and panels. \n            It can be used to display additional content like an address line in a browser.\n            The active tab will be the content of this RenderFragement\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PrePanelContent",
            "ParentTag": "MudBlazor.MudDynamicTabs"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'PrePanelContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDynamicTabs.PrePanelContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 84253418,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDynamicTabs.Header",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            A render fragment that is added before or after (based on the value of HeaderPosition) the tabs inside the header panel of the tab control\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Header",
            "ParentTag": "MudDynamicTabs"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Header' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDynamicTabs.Header",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1743537773,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDynamicTabs.Header",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            A render fragment that is added before or after (based on the value of HeaderPosition) the tabs inside the header panel of the tab control\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Header",
            "ParentTag": "MudBlazor.MudDynamicTabs"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Header' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDynamicTabs.Header",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -190924148,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDynamicTabs.TabPanelHeader",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            A render fragment that is added before or after (based on the value of HeaderPosition) inside each tab panel\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "TabPanelHeader",
            "ParentTag": "MudDynamicTabs"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'TabPanelHeader' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDynamicTabs.TabPanelHeader",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1220906862,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDynamicTabs.TabPanelHeader",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            A render fragment that is added before or after (based on the value of HeaderPosition) inside each tab panel\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "TabPanelHeader",
            "ParentTag": "MudBlazor.MudDynamicTabs"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'TabPanelHeader' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDynamicTabs.TabPanelHeader",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1926301281,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTabs",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTabs"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "KeepPanelsAlive",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, render all tabs and hide (display:none) every non-active.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeepPanelsAlive"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Rounded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, sets the border-radius to theme default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Rounded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Border",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, sets a border between the content and the toolbar depending on the position.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Border"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outlined",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, toolbar will be outlined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outlined"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Centered",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, centers the tabitems.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Centered"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HideSlider",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hides the active tab slider.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HideSlider"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PrevIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon to use for left pagination.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PrevIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NextIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon to use for right pagination.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NextIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AlwaysShowScrollButtons",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, always display the scroll buttons even if the tabs are smaller than the required with, buttons will be disabled if there is nothing to scroll.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AlwaysShowScrollButtons"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxHeight",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Sets the maxheight the component can have.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Position",
            "TypeName": "MudBlazor.Position",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the position of the tabs itself.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Position"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SliderColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the tab slider. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SliderColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ScrollIconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the next/prev icons. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ScrollIconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow, applies around the whole component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ApplyEffectsToContainer",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, will apply elevation, rounded, outlined effects to the whole tab component instead of just toolbar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ApplyEffectsToContainer"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableSliderAnimation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables slider animation\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableSliderAnimation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PrePanelContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.MudTabPanel>",
            "Documentation": "\n            <summary>\n            This fragment is placed between toolbar and panels. \n            It can be used to display additional content like an address line in a browser.\n            The active tab will be the content of this RenderFragement\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PrePanelContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TabPanelClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom class/classes for TabPanel\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TabPanelClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PanelClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom class/classes for Selected Content Panel\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PanelClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ActivePanelIndex",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The current active panel index. Also with Bidirectional Binding\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActivePanelIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ActivePanelIndexChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Fired when ActivePanelIndex changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActivePanelIndexChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Header",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.MudTabs>",
            "Documentation": "\n            <summary>\n            A render fragment that is added before or after (based on the value of HeaderPosition) the tabs inside the header panel of the tab control\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Header",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderPosition",
            "TypeName": "MudBlazor.TabHeaderPosition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Additional content specified by Header is placed either before the tabs, after or not at all\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TabPanelHeader",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.MudTabPanel>",
            "Documentation": "\n            <summary>\n            A render fragment that is added before or after (based on the value of HeaderPosition) inside each tab panel\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TabPanelHeader",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TabPanelHeaderPosition",
            "TypeName": "MudBlazor.TabHeaderPosition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Additional content specified by Header is placed either before the tabs, after or not at all\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TabPanelHeaderPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTabs"
        }
      },
      {
        "HashCode": 1762935020,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTabs",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTabs"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "KeepPanelsAlive",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, render all tabs and hide (display:none) every non-active.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeepPanelsAlive"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Rounded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, sets the border-radius to theme default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Rounded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Border",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, sets a border between the content and the toolbar depending on the position.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Border"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Outlined",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, toolbar will be outlined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Outlined"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Centered",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, centers the tabitems.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Centered"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HideSlider",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hides the active tab slider.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HideSlider"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PrevIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon to use for left pagination.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PrevIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NextIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon to use for right pagination.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "NextIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AlwaysShowScrollButtons",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, always display the scroll buttons even if the tabs are smaller than the required with, buttons will be disabled if there is nothing to scroll.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AlwaysShowScrollButtons"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxHeight",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            Sets the maxheight the component can have.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Position",
            "TypeName": "MudBlazor.Position",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the position of the tabs itself.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Position"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SliderColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the tab slider. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SliderColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ScrollIconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the next/prev icons. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ScrollIconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow, applies around the whole component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ApplyEffectsToContainer",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, will apply elevation, rounded, outlined effects to the whole tab component instead of just toolbar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ApplyEffectsToContainer"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableSliderAnimation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables slider animation\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableSliderAnimation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PrePanelContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.MudTabPanel>",
            "Documentation": "\n            <summary>\n            This fragment is placed between toolbar and panels. \n            It can be used to display additional content like an address line in a browser.\n            The active tab will be the content of this RenderFragement\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PrePanelContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TabPanelClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom class/classes for TabPanel\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TabPanelClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PanelClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom class/classes for Selected Content Panel\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PanelClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ActivePanelIndex",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The current active panel index. Also with Bidirectional Binding\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActivePanelIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ActivePanelIndexChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Fired when ActivePanelIndex changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActivePanelIndexChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Header",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.MudTabs>",
            "Documentation": "\n            <summary>\n            A render fragment that is added before or after (based on the value of HeaderPosition) the tabs inside the header panel of the tab control\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Header",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderPosition",
            "TypeName": "MudBlazor.TabHeaderPosition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Additional content specified by Header is placed either before the tabs, after or not at all\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HeaderPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TabPanelHeader",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.MudTabPanel>",
            "Documentation": "\n            <summary>\n            A render fragment that is added before or after (based on the value of HeaderPosition) inside each tab panel\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TabPanelHeader",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TabPanelHeaderPosition",
            "TypeName": "MudBlazor.TabHeaderPosition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Additional content specified by Header is placed either before the tabs, after or not at all\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TabPanelHeaderPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTabs",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2007565570,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTabs.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudTabs"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTabs.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1958615847,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTabs.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudTabs"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTabs.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2111395566,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTabs.PrePanelContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            This fragment is placed between toolbar and panels. \n            It can be used to display additional content like an address line in a browser.\n            The active tab will be the content of this RenderFragement\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PrePanelContent",
            "ParentTag": "MudTabs"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'PrePanelContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTabs.PrePanelContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1199964725,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTabs.PrePanelContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            This fragment is placed between toolbar and panels. \n            It can be used to display additional content like an address line in a browser.\n            The active tab will be the content of this RenderFragement\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PrePanelContent",
            "ParentTag": "MudBlazor.MudTabs"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'PrePanelContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTabs.PrePanelContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1743703003,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTabs.Header",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            A render fragment that is added before or after (based on the value of HeaderPosition) the tabs inside the header panel of the tab control\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Header",
            "ParentTag": "MudTabs"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Header' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTabs.Header",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 2080649950,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTabs.Header",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            A render fragment that is added before or after (based on the value of HeaderPosition) the tabs inside the header panel of the tab control\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Header",
            "ParentTag": "MudBlazor.MudTabs"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Header' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTabs.Header",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1381538716,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTabs.TabPanelHeader",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            A render fragment that is added before or after (based on the value of HeaderPosition) inside each tab panel\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "TabPanelHeader",
            "ParentTag": "MudTabs"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'TabPanelHeader' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTabs.TabPanelHeader",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 2117908364,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTabs.TabPanelHeader",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            A render fragment that is added before or after (based on the value of HeaderPosition) inside each tab panel\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "TabPanelHeader",
            "ParentTag": "MudBlazor.MudTabs"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'TabPanelHeader' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTabs.TabPanelHeader",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1672265392,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTextField<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTextField"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudTextField<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputType",
            "TypeName": "MudBlazor.InputType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Type of the input element. It should be a valid HTML5 input type.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClearButtonClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event for clear button. Called after text and value has been cleared.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClearButtonClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Mask",
            "TypeName": "MudBlazor.IMask",
            "Documentation": "\n            <summary>\n            Provide a masking object. Built-in masks are PatternMask, MultiMask, RegexMask and BlockMask\n            Note: when Mask is set, TextField will ignore some properties such as Lines, Pattern or HideSpinButtons, OnKeyDown and OnKeyUp, etc.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Mask"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DebounceInterval",
            "TypeName": "System.Double",
            "Documentation": "\n            <summary>\n            Interval to be awaited in milliseconds before changing the Text value\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DebounceInterval"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnDebounceIntervalElapsed",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            callback to be called when the debounce interval has elapsed\n            receives the Text as a parameter\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnDebounceIntervalElapsed",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be read-only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will take up the full width of its container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Immediate",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will update the Value immediately on typing.\n            If false, the Value is updated only on Enter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Immediate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableUnderLine",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will not have an underline.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableUnderLine"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HelperText will be displayed below the text field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon that will be used if Adornment is set to Start or End.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text that will be used if Adornment is set to Start or End, the Text overrides Icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Adornment if used. By default, it is set to None.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnlyValidateIfDirty",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The validation is only triggered if the user has changed the input value at least once. By default, it is false\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnlyValidateIfDirty"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The aria-label of the adornment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnAdornmentClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event if set and Adornment used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnAdornmentClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Counter",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            If set, will display the counter, value 0 will display current count but no stop count.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Counter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxLength",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Maximum number of characters that the input will accept\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxLength"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true the input will focus automatically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Lines",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n             A multiline input (textarea) will be shown, if set to more than one line.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Lines"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n             The text to be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextUpdateSuppression",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).\n            This solves issue #1012: Textfield swallowing chars when typing rapidly\n            If you need to update the input's text while it is focused you can set this parameter to false.\n            Note: on WASM text update suppression is not active, so this parameter has no effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextUpdateSuppression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "MudBlazor.InputMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Hints at the type of data that might be entered by the user while editing the input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Pattern",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression\n            Not Supported in multline input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Pattern"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text value changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnBlur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element loses focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnBlur",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInternalInputChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element changes internally its text value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInternalInputChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyDown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyDown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyDownPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyDownPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyPress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyPress",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyPressPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyPressPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyUp",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyUp",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyUpPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyUpPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Fired when the Value property changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The value of this input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Format",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Format"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<T, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<T>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTextField<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -1688324775,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTextField<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTextField"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudTextField<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputType",
            "TypeName": "MudBlazor.InputType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Type of the input element. It should be a valid HTML5 input type.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClearButtonClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event for clear button. Called after text and value has been cleared.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClearButtonClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Mask",
            "TypeName": "MudBlazor.IMask",
            "Documentation": "\n            <summary>\n            Provide a masking object. Built-in masks are PatternMask, MultiMask, RegexMask and BlockMask\n            Note: when Mask is set, TextField will ignore some properties such as Lines, Pattern or HideSpinButtons, OnKeyDown and OnKeyUp, etc.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Mask"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DebounceInterval",
            "TypeName": "System.Double",
            "Documentation": "\n            <summary>\n            Interval to be awaited in milliseconds before changing the Text value\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DebounceInterval"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnDebounceIntervalElapsed",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            callback to be called when the debounce interval has elapsed\n            receives the Text as a parameter\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnDebounceIntervalElapsed",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be read-only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will take up the full width of its container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Immediate",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will update the Value immediately on typing.\n            If false, the Value is updated only on Enter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Immediate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableUnderLine",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will not have an underline.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableUnderLine"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HelperText will be displayed below the text field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon that will be used if Adornment is set to Start or End.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text that will be used if Adornment is set to Start or End, the Text overrides Icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Adornment if used. By default, it is set to None.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnlyValidateIfDirty",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The validation is only triggered if the user has changed the input value at least once. By default, it is false\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnlyValidateIfDirty"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The aria-label of the adornment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnAdornmentClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event if set and Adornment used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnAdornmentClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Counter",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            If set, will display the counter, value 0 will display current count but no stop count.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Counter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxLength",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Maximum number of characters that the input will accept\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxLength"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true the input will focus automatically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Lines",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n             A multiline input (textarea) will be shown, if set to more than one line.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Lines"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n             The text to be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextUpdateSuppression",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).\n            This solves issue #1012: Textfield swallowing chars when typing rapidly\n            If you need to update the input's text while it is focused you can set this parameter to false.\n            Note: on WASM text update suppression is not active, so this parameter has no effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextUpdateSuppression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "MudBlazor.InputMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Hints at the type of data that might be entered by the user while editing the input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Pattern",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression\n            Not Supported in multline input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Pattern"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text value changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnBlur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element loses focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnBlur",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInternalInputChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element changes internally its text value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInternalInputChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyDown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyDown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyDownPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyDownPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyPress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyPress",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyPressPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyPressPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyUp",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyUp",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyUpPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyUpPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Fired when the Value property changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            The value of this input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Format",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Format"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<T, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<T>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTextField<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1922355200,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTextFieldString",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTextFieldString"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "InputType",
            "TypeName": "MudBlazor.InputType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Type of the input element. It should be a valid HTML5 input type.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClearButtonClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event for clear button. Called after text and value has been cleared.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClearButtonClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Mask",
            "TypeName": "MudBlazor.IMask",
            "Documentation": "\n            <summary>\n            Provide a masking object. Built-in masks are PatternMask, MultiMask, RegexMask and BlockMask\n            Note: when Mask is set, TextField will ignore some properties such as Lines, Pattern or HideSpinButtons, OnKeyDown and OnKeyUp, etc.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Mask"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DebounceInterval",
            "TypeName": "System.Double",
            "Documentation": "\n            <summary>\n            Interval to be awaited in milliseconds before changing the Text value\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DebounceInterval"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnDebounceIntervalElapsed",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            callback to be called when the debounce interval has elapsed\n            receives the Text as a parameter\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnDebounceIntervalElapsed",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be read-only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will take up the full width of its container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Immediate",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will update the Value immediately on typing.\n            If false, the Value is updated only on Enter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Immediate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableUnderLine",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will not have an underline.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableUnderLine"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HelperText will be displayed below the text field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon that will be used if Adornment is set to Start or End.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text that will be used if Adornment is set to Start or End, the Text overrides Icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Adornment if used. By default, it is set to None.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnlyValidateIfDirty",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The validation is only triggered if the user has changed the input value at least once. By default, it is false\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnlyValidateIfDirty"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The aria-label of the adornment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnAdornmentClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event if set and Adornment used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnAdornmentClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Counter",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            If set, will display the counter, value 0 will display current count but no stop count.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Counter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxLength",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Maximum number of characters that the input will accept\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxLength"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true the input will focus automatically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Lines",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n             A multiline input (textarea) will be shown, if set to more than one line.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Lines"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n             The text to be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextUpdateSuppression",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).\n            This solves issue #1012: Textfield swallowing chars when typing rapidly\n            If you need to update the input's text while it is focused you can set this parameter to false.\n            Note: on WASM text update suppression is not active, so this parameter has no effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextUpdateSuppression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "MudBlazor.InputMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Hints at the type of data that might be entered by the user while editing the input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Pattern",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression\n            Not Supported in multline input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Pattern"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text value changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnBlur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element loses focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnBlur",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInternalInputChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element changes internally its text value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInternalInputChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyDown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyDown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyDownPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyDownPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyPress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyPress",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyPressPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyPressPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyUp",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyUp",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyUpPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyUpPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the Value property changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The value of this input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Format",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Format"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<System.String, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTextFieldString"
        }
      },
      {
        "HashCode": 1820914745,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTextFieldString",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTextFieldString"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "InputType",
            "TypeName": "MudBlazor.InputType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Type of the input element. It should be a valid HTML5 input type.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClearButtonClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event for clear button. Called after text and value has been cleared.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClearButtonClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Mask",
            "TypeName": "MudBlazor.IMask",
            "Documentation": "\n            <summary>\n            Provide a masking object. Built-in masks are PatternMask, MultiMask, RegexMask and BlockMask\n            Note: when Mask is set, TextField will ignore some properties such as Lines, Pattern or HideSpinButtons, OnKeyDown and OnKeyUp, etc.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Mask"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DebounceInterval",
            "TypeName": "System.Double",
            "Documentation": "\n            <summary>\n            Interval to be awaited in milliseconds before changing the Text value\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DebounceInterval"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnDebounceIntervalElapsed",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            callback to be called when the debounce interval has elapsed\n            receives the Text as a parameter\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnDebounceIntervalElapsed",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input element will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will be read-only.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FullWidth",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will take up the full width of its container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FullWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Immediate",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will update the Value immediately on typing.\n            If false, the Value is updated only on Enter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Immediate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableUnderLine",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the input will not have an underline.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableUnderLine"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HelperText will be displayed below the text field.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon that will be used if Adornment is set to Start or End.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text that will be used if Adornment is set to Start or End, the Text overrides Icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Adornment if used. By default, it is set to None.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnlyValidateIfDirty",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The validation is only triggered if the user has changed the input value at least once. By default, it is false\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnlyValidateIfDirty"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The aria-label of the adornment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnAdornmentClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event if set and Adornment used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnAdornmentClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Counter",
            "TypeName": "System.Int32?",
            "Documentation": "\n            <summary>\n            If set, will display the counter, value 0 will display current count but no stop count.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Counter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxLength",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Maximum number of characters that the input will accept\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxLength"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true the input will focus automatically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Lines",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n             A multiline input (textarea) will be shown, if set to more than one line.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Lines"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n             The text to be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextUpdateSuppression",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).\n            This solves issue #1012: Textfield swallowing chars when typing rapidly\n            If you need to update the input's text while it is focused you can set this parameter to false.\n            Note: on WASM text update suppression is not active, so this parameter has no effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextUpdateSuppression"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputMode",
            "TypeName": "MudBlazor.InputMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Hints at the type of data that might be entered by the user while editing the input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Pattern",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression\n            Not Supported in multline input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Pattern"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text value changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnBlur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element loses focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnBlur",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInternalInputChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "\n            <summary>\n            Fired when the element changes internally its text value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnInternalInputChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyDown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyDown",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyDownPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyDown event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyDownPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyPress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyPress",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyPressPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyPress event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyPressPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnKeyUp",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "\n            <summary>\n            Fired on the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnKeyUp",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "KeyUpPreventDefault",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Prevent the default action for the KeyUp event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "KeyUpPreventDefault"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the Value property changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The value of this input element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Format",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Format"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<System.String, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTextFieldString",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1312976650,
        "Kind": "Components.Component",
        "Name": "MudBlazor.BaseMudThemeProvider",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BaseMudThemeProvider"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Theme",
            "TypeName": "MudBlazor.MudTheme",
            "Documentation": "\n            <summary>\n            The theme used by the application.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Theme"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DefaultScrollbar",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n             If true, will not apply MudBlazor styled scrollbar and use browser default. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DefaultScrollbar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsDarkMode",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The active palette of the theme.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsDarkMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsDarkModeChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Invoked when the dark mode changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsDarkModeChanged",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.BaseMudThemeProvider"
        }
      },
      {
        "HashCode": 1563237783,
        "Kind": "Components.Component",
        "Name": "MudBlazor.BaseMudThemeProvider",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.BaseMudThemeProvider"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Theme",
            "TypeName": "MudBlazor.MudTheme",
            "Documentation": "\n            <summary>\n            The theme used by the application.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Theme"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DefaultScrollbar",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n             If true, will not apply MudBlazor styled scrollbar and use browser default. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DefaultScrollbar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsDarkMode",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The active palette of the theme.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsDarkMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsDarkModeChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Invoked when the dark mode changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsDarkModeChanged",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.BaseMudThemeProvider",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -100206687,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTimeline",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTimeline"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TimelineOrientation",
            "TypeName": "MudBlazor.TimelineOrientation",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the orientation of the timeline and its timeline items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TimelineOrientation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TimelinePosition",
            "TypeName": "MudBlazor.TimelinePosition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The position the timeline itself and how the timeline items should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TimelinePosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TimelineAlign",
            "TypeName": "MudBlazor.TimelineAlign",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Aligns the dot and any item modifiers is changed, in default mode they are centered to the item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TimelineAlign"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Reverse",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Reverse the order of TimelineItems when TimelinePosition is set to Alternate.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Reverse"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableModifiers",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables all TimelineItem modifiers, like adding a caret to a MudCard.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableModifiers"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Collection of T\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndex",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Selected Item's index\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndexChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Metadata": {
              "Common.PropertyName": "SelectedIndexChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTimeline"
        }
      },
      {
        "HashCode": 424548470,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTimeline",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTimeline"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TimelineOrientation",
            "TypeName": "MudBlazor.TimelineOrientation",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the orientation of the timeline and its timeline items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TimelineOrientation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TimelinePosition",
            "TypeName": "MudBlazor.TimelinePosition",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The position the timeline itself and how the timeline items should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TimelinePosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TimelineAlign",
            "TypeName": "MudBlazor.TimelineAlign",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Aligns the dot and any item modifiers is changed, in default mode they are centered to the item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TimelineAlign"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Reverse",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Reverse the order of TimelineItems when TimelinePosition is set to Alternate.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Reverse"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableModifiers",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables all TimelineItem modifiers, like adding a caret to a MudCard.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableModifiers"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Collection of T\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndex",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Selected Item's index\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndexChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Metadata": {
              "Common.PropertyName": "SelectedIndexChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTimeline",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 255734794,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTimeline.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Collection of T\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudTimeline"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTimeline.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 500463643,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTimeline.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Collection of T\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudTimeline"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTimeline.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1604540696,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTimelineItem",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTimelineItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Dot Icon\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant of the dot.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DotStyle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied to the lineItem dot.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DotStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Color of the dot.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Size of the dot.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Elevation of the dot. The higher the number, the heavier the drop-shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TimelineAlign",
            "TypeName": "MudBlazor.TimelineAlign",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Overrides Timeline Parents default sorting method in Default and Reverse mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TimelineAlign"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HideDot",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, dot will not be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HideDot"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemOpposite",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            If used renders child content of the ItemOpposite.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemOpposite",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            If used renders child content of the ItemContent.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemDot",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            If used renders child content of the ItemDot.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemDot",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Optional child content if no other RenderFragments is used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTimelineItem"
        }
      },
      {
        "HashCode": 1297824778,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTimelineItem",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTimelineItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Dot Icon\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant of the dot.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DotStyle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied to the lineItem dot.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DotStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Color of the dot.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Size of the dot.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Elevation of the dot. The higher the number, the heavier the drop-shadow.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TimelineAlign",
            "TypeName": "MudBlazor.TimelineAlign",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Overrides Timeline Parents default sorting method in Default and Reverse mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TimelineAlign"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HideDot",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, dot will not be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HideDot"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemOpposite",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            If used renders child content of the ItemOpposite.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemOpposite",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            If used renders child content of the ItemContent.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemDot",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            If used renders child content of the ItemDot.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemDot",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Optional child content if no other RenderFragments is used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTimelineItem",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -969141372,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTimelineItem.ItemOpposite",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            If used renders child content of the ItemOpposite.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemOpposite",
            "ParentTag": "MudTimelineItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTimelineItem.ItemOpposite",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1509425279,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTimelineItem.ItemOpposite",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            If used renders child content of the ItemOpposite.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemOpposite",
            "ParentTag": "MudBlazor.MudTimelineItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTimelineItem.ItemOpposite",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -151361842,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTimelineItem.ItemContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            If used renders child content of the ItemContent.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemContent",
            "ParentTag": "MudTimelineItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTimelineItem.ItemContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1512962525,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTimelineItem.ItemContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            If used renders child content of the ItemContent.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemContent",
            "ParentTag": "MudBlazor.MudTimelineItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTimelineItem.ItemContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 374735794,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTimelineItem.ItemDot",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            If used renders child content of the ItemDot.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemDot",
            "ParentTag": "MudTimelineItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTimelineItem.ItemDot",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1601225186,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTimelineItem.ItemDot",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            If used renders child content of the ItemDot.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemDot",
            "ParentTag": "MudBlazor.MudTimelineItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTimelineItem.ItemDot",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -120031251,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTimelineItem.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Optional child content if no other RenderFragments is used.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudTimelineItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTimelineItem.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1273720669,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTimelineItem.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Optional child content if no other RenderFragments is used.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudTimelineItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTimelineItem.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2027492803,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTimePicker",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTimePicker"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OpenTo",
            "TypeName": "MudBlazor.OpenTo",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            First view to show in the MudDatePicker.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OpenTo"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TimeEditMode",
            "TypeName": "MudBlazor.TimeEditMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Choose the edition mode. By default, you can edit hours and minutes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TimeEditMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClosingDelay",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Sets the amount of time in milliseconds to wait before closing the picker. This helps the user see that the time was selected before the popover disappears.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClosingDelay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoClose",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If AutoClose is set to true and PickerActions are defined, the hour and the minutes can be defined without any action.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoClose"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AmPm",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, sets 12 hour selection clock.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AmPm"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TimeFormat",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            String Format for selected time view\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TimeFormat"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Time",
            "TypeName": "System.TimeSpan?",
            "Documentation": "\n            <summary>\n            The currently selected time (two-way bindable). If null, then nothing was selected.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Time"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TimeChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.TimeSpan?>",
            "Documentation": "\n            <summary>\n            Fired when the date changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TimeChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the icon of the input text field\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the icon of the input text field\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the aria-label of the input text field icon\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerOpened",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown / dialog opens\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerOpened",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerClosed",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown / dialog closes\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerClosed",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow. 0 for no shadow set to 8 by default in inline mode and 0 in static mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to 0 this is set to true automatically in static mode but can be overridden with Rounded bool.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no date or time can be defined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Rounded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to theme default when in Static Mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Rounded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value, HelperText will be applied.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the picker will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Editable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the picker will be editable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Editable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableToolbar",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hide toolbar and show only date/time views.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableToolbar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToolBarClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for picker's ToolBar, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToolBarClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerVariant",
            "TypeName": "MudBlazor.PickerVariant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Picker container option\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerVariant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputVariant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Variant of the text input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputVariant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant of the text input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets if the icon will be att start or end, set to false to disable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Orientation",
            "TypeName": "MudBlazor.Orientation",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            What orientation to render in when in PickerVariant Static Mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Orientation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the toolbar, selected and active. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AllowKeyboardInput",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Changes the cursor appearance.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AllowKeyboardInput"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The currently selected string value (two-way bindable)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClassActions",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class that will be applied to the action buttons container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClassActions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerActions",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.MudPicker<System.TimeSpan?>>",
            "Documentation": "\n            <summary>\n            Define the action buttons here\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerActions",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Mask",
            "TypeName": "MudBlazor.IMask",
            "Documentation": "\n            <summary>\n            A mask for structured input of the date (requires Editable to be true).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Mask"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AnchorOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the origin of the popover's anchor. Defaults to <see cref=\"F:MudBlazor.Origin.TopLeft\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AnchorOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TransformOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the origin of the popover's transform. Defaults to <see cref=\"F:MudBlazor.Origin.TopLeft\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TransformOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<System.TimeSpan?, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.TimeSpan?>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTimePicker"
        }
      },
      {
        "HashCode": 71648242,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTimePicker",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTimePicker"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OpenTo",
            "TypeName": "MudBlazor.OpenTo",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            First view to show in the MudDatePicker.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OpenTo"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TimeEditMode",
            "TypeName": "MudBlazor.TimeEditMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Choose the edition mode. By default, you can edit hours and minutes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TimeEditMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClosingDelay",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Sets the amount of time in milliseconds to wait before closing the picker. This helps the user see that the time was selected before the popover disappears.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClosingDelay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AutoClose",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If AutoClose is set to true and PickerActions are defined, the hour and the minutes can be defined without any action.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AutoClose"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AmPm",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, sets 12 hour selection clock.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AmPm"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TimeFormat",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            String Format for selected time view\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TimeFormat"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Time",
            "TypeName": "System.TimeSpan?",
            "Documentation": "\n            <summary>\n            The currently selected time (two-way bindable). If null, then nothing was selected.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Time"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TimeChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.TimeSpan?>",
            "Documentation": "\n            <summary>\n            Fired when the date changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TimeChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the icon of the input text field\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the adornment if used. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the icon of the input text field\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentAriaLabel",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the aria-label of the input text field icon\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AdornmentAriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The short hint displayed in the input before the user enters a value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placeholder"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerOpened",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown / dialog opens\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerOpened",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerClosed",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback",
            "Documentation": "\n            <summary>\n            Fired when the dropdown / dialog closes\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerClosed",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Elevation",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            The higher the number, the heavier the drop-shadow. 0 for no shadow set to 8 by default in inline mode and 0 in static mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Elevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Square",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to 0 this is set to true automatically in static mode but can be overridden with Rounded bool.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Square"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ReadOnly",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no date or time can be defined.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ReadOnly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Rounded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, border-radius is set to theme default when in Static Mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Rounded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value, HelperText will be applied.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HelperTextOnFocus",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the helper text will only be visible on focus.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HelperTextOnFocus"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Label",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Label"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Clearable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Show clear button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Clearable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the picker will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Editable",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the picker will be editable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Editable"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableToolbar",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hide toolbar and show only date/time views.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableToolbar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToolBarClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for picker's ToolBar, separated by space\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToolBarClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerVariant",
            "TypeName": "MudBlazor.PickerVariant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Picker container option\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerVariant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputVariant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Variant of the text input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputVariant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Variant",
            "TypeName": "MudBlazor.Variant",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Variant of the text input\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Variant"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Adornment",
            "TypeName": "MudBlazor.Adornment",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets if the icon will be att start or end, set to false to disable.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Adornment"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Orientation",
            "TypeName": "MudBlazor.Orientation",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            What orientation to render in when in PickerVariant Static Mode.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Orientation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Sets the Icon Size.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the toolbar, selected and active. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AllowKeyboardInput",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Changes the cursor appearance.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AllowKeyboardInput"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "\n            <summary>\n            Fired when the text changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The currently selected string value (two-way bindable)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClassActions",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            CSS class that will be applied to the action buttons container\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ClassActions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PickerActions",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<MudBlazor.MudPicker<System.TimeSpan?>>",
            "Documentation": "\n            <summary>\n            Define the action buttons here\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PickerActions",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Margin",
            "TypeName": "MudBlazor.Margin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n             Will adjust vertical spacing.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Margin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Mask",
            "TypeName": "MudBlazor.IMask",
            "Documentation": "\n            <summary>\n            A mask for structured input of the date (requires Editable to be true).\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Mask"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AnchorOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the origin of the popover's anchor. Defaults to <see cref=\"F:MudBlazor.Origin.TopLeft\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "AnchorOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TransformOrigin",
            "TypeName": "MudBlazor.Origin",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the origin of the popover's transform. Defaults to <see cref=\"F:MudBlazor.Origin.TopLeft\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TransformOrigin"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Required",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, this form input is required to be filled out.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Required"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RequiredError",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The error text that will be displayed if the input is not filled out but required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RequiredError"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorText that will be displayed if Error true.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Error",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the label will be displayed in an error state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Error"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorId",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The ErrorId that will be used by aria-describedby if Error true\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ErrorId"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Converter",
            "TypeName": "MudBlazor.Converter<System.TimeSpan?, System.String>",
            "Documentation": "\n            <summary>\n            The generic converter of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Converter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Documentation": "\n            <summary>\n            The culture of the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Validation",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A validation func or a validation attribute. Supported types are:\n            <para>Func&lt;T, bool&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, string&gt; ... outputs the result as error message, no error if null </para>\n            <para>Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message \"Invalid\" if false</para>\n            <para>Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null</para>\n            <para>Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty</para>\n            <para>Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty</para>\n            <para>System.ComponentModel.DataAnnotations.ValidationAttribute instances</para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Validation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.TimeSpan?>>",
            "Documentation": "\n            <summary>\n            Specify an expression which returns the model's field for which validation messages should be displayed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTimePicker",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 568438289,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTimePicker.PickerActions",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the action buttons here\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PickerActions",
            "ParentTag": "MudTimePicker"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'PickerActions' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTimePicker.PickerActions",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -623826450,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTimePicker.PickerActions",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Define the action buttons here\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PickerActions",
            "ParentTag": "MudBlazor.MudTimePicker"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'PickerActions' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTimePicker.PickerActions",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 693886647,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTooltip",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTooltip"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the text to be displayed inside the tooltip.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Arrow",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, a arrow will be displayed pointing towards the content from the tooltip.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Arrow"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Duration",
            "TypeName": "System.Double",
            "Documentation": "\n            <summary>\n            Sets the length of time that the opening transition takes to complete.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Duration"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Delay",
            "TypeName": "System.Double",
            "Documentation": "\n            <summary>\n            Sets the amount of time in milliseconds to wait from opening the popover before beginning to perform the transition. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Delay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Delayed",
            "TypeName": "System.Double",
            "Documentation": "\n            <summary>\n            Changes the default transition delay in seconds.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Delayed"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placement",
            "TypeName": "MudBlazor.Placement",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Tooltip placement.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Tooltip content. May contain any valid html\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Inline",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Determines if this component should be inline with it's surrounding (default) or if it should behave like a block element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Inline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RootStyle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Styles applied directly to root component of the tooltip\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RootStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RootClass",
            "TypeName": "System.String",
            "Documentation": "\n            Classes applied directly to root component of the tooltip\n        ",
            "Metadata": {
              "Common.PropertyName": "RootClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsVisible",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The visible state of the Tooltip.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsVisible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsVisibleChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            An event triggered when the state of IsVisible has changed\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsVisibleChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTooltip"
        }
      },
      {
        "HashCode": 541655872,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTooltip",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTooltip"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Sets the text to be displayed inside the tooltip.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Arrow",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, a arrow will be displayed pointing towards the content from the tooltip.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Arrow"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Duration",
            "TypeName": "System.Double",
            "Documentation": "\n            <summary>\n            Sets the length of time that the opening transition takes to complete.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Duration"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Delay",
            "TypeName": "System.Double",
            "Documentation": "\n            <summary>\n            Sets the amount of time in milliseconds to wait from opening the popover before beginning to perform the transition. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Delay"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Delayed",
            "TypeName": "System.Double",
            "Documentation": "\n            <summary>\n            Changes the default transition delay in seconds.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Delayed"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placement",
            "TypeName": "MudBlazor.Placement",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Tooltip placement.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Placement"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TooltipContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Tooltip content. May contain any valid html\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TooltipContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Inline",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Determines if this component should be inline with it's surrounding (default) or if it should behave like a block element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Inline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RootStyle",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Styles applied directly to root component of the tooltip\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RootStyle"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RootClass",
            "TypeName": "System.String",
            "Documentation": "\n            Classes applied directly to root component of the tooltip\n        ",
            "Metadata": {
              "Common.PropertyName": "RootClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsVisible",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The visible state of the Tooltip.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsVisible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsVisibleChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            An event triggered when the state of IsVisible has changed\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsVisibleChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTooltip",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 590273617,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTooltip.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudTooltip"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTooltip.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -222173991,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTooltip.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudTooltip"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTooltip.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1540857329,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTooltip.TooltipContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Tooltip content. May contain any valid html\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "TooltipContent",
            "ParentTag": "MudTooltip"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTooltip.TooltipContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -2119201186,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTooltip.TooltipContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Tooltip content. May contain any valid html\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "TooltipContent",
            "ParentTag": "MudBlazor.MudTooltip"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTooltip.TooltipContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1011042573,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTreeView<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTreeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudTreeView<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the selected treeviewitem.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CheckBoxColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Check box color if multiselection is used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CheckBoxColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MultiSelection",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            if true, multiple values can be selected via checkboxes which are automatically shown in the tree view.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MultiSelection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CanSelect",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            if true, multiple values can be selected via checkboxes which are automatically shown in the tree view.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CanSelect"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CanActivate",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "CanActivate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandOnClick",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, clicking anywhere on the item will expand it, if it has childs.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandOnClick"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandOnDoubleClick",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, double clicking anywhere on the item will expand it, if it has childs.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandOnDoubleClick"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hover",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hover effect for item's on mouse-over.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hover"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CanHover",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hover effect for item's on mouse-over.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CanHover"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact vertical padding will be applied to all treeview items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Setting a height will allow to scroll the treeview. If not set, it will try to grow in height. \n            You can set this to any CSS value that the attribute 'height' accepts, i.e. 500px. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxHeight",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Setting a maximum height will allow to scroll the treeview. If not set, it will try to grow in height. \n            You can set this to any CSS value that the attribute 'height' accepts, i.e. 500px. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Width",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Setting a width the treeview. You can set this to any CSS value that the attribute 'height' accepts, i.e. 500px. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Width"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, treeview will be disabled and all its childitems.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.HashSet<T>",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ActivatedValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Metadata": {
              "Common.PropertyName": "ActivatedValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Called whenever the selected value changed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedValuesChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.HashSet<T>>",
            "Documentation": "\n            <summary>\n            Called whenever the selectedvalues changed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedValuesChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Documentation": "\n            <summary>\n            ItemTemplate for rendering children.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ServerData",
            "TypeName": "System.Func<T, System.Threading.Tasks.Task<System.Collections.Generic.HashSet<T>>>",
            "Metadata": {
              "Common.PropertyName": "ServerData",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTreeView<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 696125308,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTreeView<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTreeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudTreeView<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the selected treeviewitem.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CheckBoxColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Check box color if multiselection is used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CheckBoxColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MultiSelection",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            if true, multiple values can be selected via checkboxes which are automatically shown in the tree view.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MultiSelection"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CanSelect",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            if true, multiple values can be selected via checkboxes which are automatically shown in the tree view.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CanSelect"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CanActivate",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "CanActivate"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandOnClick",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, clicking anywhere on the item will expand it, if it has childs.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandOnClick"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandOnDoubleClick",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, double clicking anywhere on the item will expand it, if it has childs.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandOnDoubleClick"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Hover",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hover effect for item's on mouse-over.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Hover"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CanHover",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Hover effect for item's on mouse-over.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CanHover"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact vertical padding will be applied to all treeview items.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Setting a height will allow to scroll the treeview. If not set, it will try to grow in height. \n            You can set this to any CSS value that the attribute 'height' accepts, i.e. 500px. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxHeight",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Setting a maximum height will allow to scroll the treeview. If not set, it will try to grow in height. \n            You can set this to any CSS value that the attribute 'height' accepts, i.e. 500px. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxHeight"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Width",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Setting a width the treeview. You can set this to any CSS value that the attribute 'height' accepts, i.e. 500px. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Width"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, treeview will be disabled and all its childitems.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.HashSet<T>",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ActivatedValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Metadata": {
              "Common.PropertyName": "ActivatedValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "\n            <summary>\n            Called whenever the selected value changed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedValuesChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.HashSet<T>>",
            "Documentation": "\n            <summary>\n            Called whenever the selectedvalues changed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedValuesChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemTemplate",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Documentation": "\n            <summary>\n            ItemTemplate for rendering children.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ItemTemplate",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ServerData",
            "TypeName": "System.Func<T, System.Threading.Tasks.Task<System.Collections.Generic.HashSet<T>>>",
            "Metadata": {
              "Common.PropertyName": "ServerData",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTreeView<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1632177836,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTreeView<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudTreeView"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTreeView<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -387266023,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTreeView<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudTreeView"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTreeView<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 33269874,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTreeView<T>.ItemTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            ItemTemplate for rendering children.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemTemplate",
            "ParentTag": "MudTreeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTreeView<T>.ItemTemplate",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1418192539,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTreeView<T>.ItemTemplate",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            ItemTemplate for rendering children.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemTemplate",
            "ParentTag": "MudBlazor.MudTreeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemTemplate' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTreeView<T>.ItemTemplate",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1131152994,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTreeViewItem<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTreeViewItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudTreeViewItem<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CheckedIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom checked icon, leave null for default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CheckedIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UncheckedIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom unchecked icon, leave null for default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UncheckedIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            Value of the treeviewitem. Acts as the displayed text if no text is set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The text to display\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextTypo",
            "TypeName": "MudBlazor.Typo",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Tyopography for the text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextTypo"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for the text, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EndText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The text at the end of the item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EndText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EndTextTypo",
            "TypeName": "MudBlazor.Typo",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Tyopography for the endtext.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EndTextTypo"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EndTextClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for the endtext, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EndTextClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, treeviewitem will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component used to create sub levels.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Content",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content of the item, if used completly replaced the default rendering.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Content",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.HashSet<T>",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Command",
            "TypeName": "System.Windows.Input.ICommand",
            "Documentation": "\n            <summary>\n            Command executed when the user clicks on the CommitEdit Button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Command"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Expanded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Expand or collapse treeview item when it has children. Two-way bindable. Note: if you directly set this to\n            true or false (instead of using two-way binding) it will force the item's expansion state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Expanded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Called whenever expanded changed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandedChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Activated",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Activated"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Selected",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Selected"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon placed before the text if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EndIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon placed after the text if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EndIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EndIconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EndIconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandedIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The expand/collapse icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandedIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandedIconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the expand/collapse button. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandedIconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LoadingIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The loading icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LoadingIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LoadingIconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the loading. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LoadingIconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ActivatedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Called whenever the activated value changed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActivatedChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Called whenever the selected value changed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Tree item click event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnDoubleClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Tree item double click event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnDoubleClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTreeViewItem<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 211659730,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTreeViewItem<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTreeViewItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudTreeViewItem<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CheckedIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom checked icon, leave null for default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CheckedIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UncheckedIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Custom unchecked icon, leave null for default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UncheckedIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "T",
            "Documentation": "\n            <summary>\n            Value of the treeviewitem. Acts as the displayed text if no text is set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Culture",
            "TypeName": "System.Globalization.CultureInfo",
            "Metadata": {
              "Common.PropertyName": "Culture"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The text to display\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextTypo",
            "TypeName": "MudBlazor.Typo",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Tyopography for the text.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextTypo"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TextClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for the text, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TextClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EndText",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The text at the end of the item.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EndText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EndTextTypo",
            "TypeName": "MudBlazor.Typo",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Tyopography for the endtext.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EndTextTypo"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EndTextClass",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names for the endtext, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EndTextClass"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, treeviewitem will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component used to create sub levels.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Content",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Content of the item, if used completly replaced the default rendering.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Content",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.HashSet<T>",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Command",
            "TypeName": "System.Windows.Input.ICommand",
            "Documentation": "\n            <summary>\n            Command executed when the user clicks on the CommitEdit Button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Command"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Expanded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Expand or collapse treeview item when it has children. Two-way bindable. Note: if you directly set this to\n            true or false (instead of using two-way binding) it will force the item's expansion state.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Expanded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Called whenever expanded changed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandedChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Activated",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Activated"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Selected",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Selected"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon placed before the text if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EndIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon placed after the text if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EndIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EndIconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the icon. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "EndIconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandedIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The expand/collapse icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandedIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandedIconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the expand/collapse button. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandedIconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LoadingIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The loading icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LoadingIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LoadingIconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the loading. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LoadingIconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ActivatedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Called whenever the activated value changed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ActivatedChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Called whenever the selected value changed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Tree item click event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnDoubleClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Tree item double click event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnDoubleClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTreeViewItem<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1103225226,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTreeViewItem<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component used to create sub levels.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudTreeViewItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTreeViewItem<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 2080285800,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTreeViewItem<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component used to create sub levels.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudTreeViewItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTreeViewItem<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1680068970,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTreeViewItem<T>.Content",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Content of the item, if used completly replaced the default rendering.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Content",
            "ParentTag": "MudTreeViewItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTreeViewItem<T>.Content",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1028046953,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTreeViewItem<T>.Content",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Content of the item, if used completly replaced the default rendering.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Content",
            "ParentTag": "MudBlazor.MudTreeViewItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTreeViewItem<T>.Content",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1371566698,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudText",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudText"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Typo",
            "TypeName": "MudBlazor.Typo",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Applies the theme typography styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Typo"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Align",
            "TypeName": "MudBlazor.Align",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Set the text-align on the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Align"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GutterBottom",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the text will have a bottom margin.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GutterBottom"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Inline",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, Sets display inline\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Inline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudText"
        }
      },
      {
        "HashCode": 521633697,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudText",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudText"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Typo",
            "TypeName": "MudBlazor.Typo",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Applies the theme typography styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Typo"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Align",
            "TypeName": "MudBlazor.Align",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Set the text-align on the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Align"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the component. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "GutterBottom",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the text will have a bottom margin.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "GutterBottom"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Inline",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, Sets display inline\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Inline"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudText",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -434470726,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudText.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudText"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudText.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 725879938,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudText.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudText"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudText.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1377407808,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudVirtualize<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudVirtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudVirtualize<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsEnabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set false to turn off virtualization\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsEnabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Documentation": "\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.ICollection<T>",
            "Documentation": "\n            <summary>\n            Gets or sets the fixed item source.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OverscanCount",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Gets or sets a value that determines how many additional items will be rendered\n            before and after the visible region. This help to reduce the frequency of rendering\n            during scrolling. However, higher values mean that more elements will be present\n            in the page.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OverscanCount"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudVirtualize<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -238830356,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudVirtualize<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudVirtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudVirtualize<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsEnabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set false to turn off virtualization\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsEnabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Documentation": "\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.ICollection<T>",
            "Documentation": "\n            <summary>\n            Gets or sets the fixed item source.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OverscanCount",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Gets or sets a value that determines how many additional items will be rendered\n            before and after the visible region. This help to reduce the frequency of rendering\n            during scrolling. However, higher values mean that more elements will be present\n            in the page.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OverscanCount"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudVirtualize<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -581132652,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudVirtualize<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudVirtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudVirtualize<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -458624235,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudVirtualize<T>.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudVirtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudVirtualize<T>.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1310556334,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudAppBarSpacer",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudAppBarSpacer"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudAppBarSpacer"
        }
      },
      {
        "HashCode": -171877293,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudAppBarSpacer",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudAppBarSpacer"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudAppBarSpacer",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2134307855,
        "Kind": "Components.Component",
        "Name": "MudBlazor.BreadcrumbLink",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BreadcrumbLink"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Item",
            "TypeName": "MudBlazor.BreadcrumbItem",
            "Metadata": {
              "Common.PropertyName": "Item"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.BreadcrumbLink"
        }
      },
      {
        "HashCode": -196541643,
        "Kind": "Components.Component",
        "Name": "MudBlazor.BreadcrumbLink",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.BreadcrumbLink"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Item",
            "TypeName": "MudBlazor.BreadcrumbItem",
            "Metadata": {
              "Common.PropertyName": "Item"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.BreadcrumbLink",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1949286135,
        "Kind": "Components.Component",
        "Name": "MudBlazor.BreadcrumbSeparator",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BreadcrumbSeparator"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.BreadcrumbSeparator"
        }
      },
      {
        "HashCode": 675643887,
        "Kind": "Components.Component",
        "Name": "MudBlazor.BreadcrumbSeparator",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.BreadcrumbSeparator"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.BreadcrumbSeparator",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -629616981,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudChart",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudChart"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "InputData",
            "TypeName": "System.Double[]",
            "Metadata": {
              "Common.PropertyName": "InputData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputLabels",
            "TypeName": "System.String[]",
            "Metadata": {
              "Common.PropertyName": "InputLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "XAxisLabels",
            "TypeName": "System.String[]",
            "Metadata": {
              "Common.PropertyName": "XAxisLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartSeries",
            "TypeName": "System.Collections.Generic.List<MudBlazor.ChartSeries>",
            "Metadata": {
              "Common.PropertyName": "ChartSeries"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartOptions",
            "TypeName": "MudBlazor.ChartOptions",
            "Metadata": {
              "Common.PropertyName": "ChartOptions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CustomGraphics",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            RenderFragment for costumization inside the chart's svg.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CustomGraphics",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartType",
            "TypeName": "MudBlazor.ChartType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Type of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChartType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Width",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Width of the chart, end with % or px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Width"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Height of the chart, end with % or px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LegendPosition",
            "TypeName": "MudBlazor.Position",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The placement direction of the legend if used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LegendPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndex",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Selected index of a portion of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndexChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Selected index of a portion of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndexChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudChart"
        }
      },
      {
        "HashCode": 854089590,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudChart",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudChart"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "InputData",
            "TypeName": "System.Double[]",
            "Metadata": {
              "Common.PropertyName": "InputData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputLabels",
            "TypeName": "System.String[]",
            "Metadata": {
              "Common.PropertyName": "InputLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "XAxisLabels",
            "TypeName": "System.String[]",
            "Metadata": {
              "Common.PropertyName": "XAxisLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartSeries",
            "TypeName": "System.Collections.Generic.List<MudBlazor.ChartSeries>",
            "Metadata": {
              "Common.PropertyName": "ChartSeries"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartOptions",
            "TypeName": "MudBlazor.ChartOptions",
            "Metadata": {
              "Common.PropertyName": "ChartOptions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CustomGraphics",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            RenderFragment for costumization inside the chart's svg.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CustomGraphics",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartType",
            "TypeName": "MudBlazor.ChartType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Type of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChartType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Width",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Width of the chart, end with % or px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Width"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Height of the chart, end with % or px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LegendPosition",
            "TypeName": "MudBlazor.Position",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The placement direction of the legend if used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LegendPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndex",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Selected index of a portion of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndexChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Selected index of a portion of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndexChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudChart",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 609898256,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudChart.CustomGraphics",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            RenderFragment for costumization inside the chart's svg.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CustomGraphics",
            "ParentTag": "MudChart"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudChart.CustomGraphics",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1511897996,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudChart.CustomGraphics",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            RenderFragment for costumization inside the chart's svg.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CustomGraphics",
            "ParentTag": "MudBlazor.MudChart"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudChart.CustomGraphics",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1440114933,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudContainer",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudContainer"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Fixed",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set the max-width to match the min-width of the current breakpoint. This is useful if you'd prefer to design for a fixed set of sizes instead of trying to accommodate a fully fluid viewport. It's fluid by default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Fixed"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxWidth",
            "TypeName": "MudBlazor.MaxWidth",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Determine the max-width of the container. The container width grows with the size of the screen. Set to false to disable maxWidth.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudContainer"
        }
      },
      {
        "HashCode": 1848144100,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudContainer",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudContainer"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Fixed",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Set the max-width to match the min-width of the current breakpoint. This is useful if you'd prefer to design for a fixed set of sizes instead of trying to accommodate a fully fluid viewport. It's fluid by default.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Fixed"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxWidth",
            "TypeName": "MudBlazor.MaxWidth",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Determine the max-width of the container. The container width grows with the size of the screen. Set to false to disable maxWidth.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "MaxWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudContainer",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -682322780,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudContainer.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudContainer"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudContainer.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1513134732,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudContainer.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudContainer"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudContainer.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1350794389,
        "Kind": "Components.Component",
        "Name": "MudBlazor.HierarchyColumn<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HierarchyColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.HierarchyColumn<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClosedIcon",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "ClosedIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OpenIcon",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "OpenIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.HierarchyColumn<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -390888587,
        "Kind": "Components.Component",
        "Name": "MudBlazor.HierarchyColumn<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.HierarchyColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.HierarchyColumn<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ClosedIcon",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "ClosedIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OpenIcon",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "OpenIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IconSize",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "IconSize"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.HierarchyColumn<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -883018615,
        "Kind": "Components.Component",
        "Name": "MudBlazor.SelectColumn<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "SelectColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.SelectColumn<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowInHeader",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "ShowInHeader"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowInFooter",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "ShowInFooter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.SelectColumn<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 1925183586,
        "Kind": "Components.Component",
        "Name": "MudBlazor.SelectColumn<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.SelectColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.SelectColumn<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowInHeader",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "ShowInHeader"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ShowInFooter",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "ShowInFooter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.SelectColumn<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 338435581,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDivider",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDivider"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Absolute",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Sets absolute position to the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Absolute"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FlexItem",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, a vertical divider will have the correct height when used in flex container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FlexItem"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Light",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the divider will have a lighter color.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Light"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Vertical",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the divider is displayed vertically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Vertical"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DividerType",
            "TypeName": "MudBlazor.DividerType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Divider type to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DividerType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDivider"
        }
      },
      {
        "HashCode": -857096401,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDivider",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDivider"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Absolute",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Sets absolute position to the component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Absolute"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FlexItem",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, a vertical divider will have the correct height when used in flex container.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FlexItem"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Light",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the divider will have a lighter color.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Light"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Vertical",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the divider is displayed vertically.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Vertical"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DividerType",
            "TypeName": "MudBlazor.DividerType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Divider type to use.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DividerType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDivider",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -594080544,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDrawerHeader",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDrawerHeader"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact padding will be used, same as the Appbar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LinkToIndex",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the component will link to index page with an a element instead of div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LinkToIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDrawerHeader"
        }
      },
      {
        "HashCode": 1653074417,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudDrawerHeader",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDrawerHeader"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact padding will be used, same as the Appbar.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LinkToIndex",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the component will link to index page with an a element instead of div.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LinkToIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudDrawerHeader",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 668332313,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDrawerHeader.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudDrawerHeader"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDrawerHeader.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -195532565,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudDrawerHeader.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudDrawerHeader"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudDrawerHeader.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -988120376,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudFileUploader",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudFileUploader"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "HtmlTag",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HTML element that will be rendered in the root by the component\n            By default, is a button\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HtmlTag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ButtonType",
            "TypeName": "MudBlazor.ButtonType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The button Type (Button, Submit, Refresh)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ButtonType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set to a URL, clicking the button will open the referenced document. Use Target to specify where\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Link",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set to a URL, clicking the button will open the referenced document. Use Target to specify where (Obsolete replaced by Href)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Link"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Target",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The target attribute specifies where to open the link, if Link is specified. Possible values: _blank | _self | _parent | _top | <i>framename</i>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Target"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the button will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableElevation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no drop-shadow will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableElevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Command",
            "TypeName": "System.Windows.Input.ICommand",
            "Documentation": "\n            <summary>\n            Command executed when the user clicks on an element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Command"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommandParameter",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Command parameter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommandParameter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudFileUploader"
        }
      },
      {
        "HashCode": -420069860,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudFileUploader",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudFileUploader"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "HtmlTag",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The HTML element that will be rendered in the root by the component\n            By default, is a button\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HtmlTag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ButtonType",
            "TypeName": "MudBlazor.ButtonType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The button Type (Button, Submit, Refresh)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ButtonType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set to a URL, clicking the button will open the referenced document. Use Target to specify where\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Link",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            If set to a URL, clicking the button will open the referenced document. Use Target to specify where (Obsolete replaced by Href)\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Link"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Target",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The target attribute specifies where to open the link, if Link is specified. Possible values: _blank | _self | _parent | _top | <i>framename</i>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Target"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the button will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableElevation",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, no drop-shadow will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableElevation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableRipple",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables ripple effect.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableRipple"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Command",
            "TypeName": "System.Windows.Input.ICommand",
            "Documentation": "\n            <summary>\n            Command executed when the user clicks on an element.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Command"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CommandParameter",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Command parameter.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CommandParameter"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Button click event.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudFileUploader",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -679865399,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudGrid",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudGrid"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Spacing",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "Spacing"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Justify",
            "TypeName": "MudBlazor.Justify",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "Justify"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudGrid"
        }
      },
      {
        "HashCode": -1397884046,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudGrid",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudGrid"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Spacing",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "Spacing"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Justify",
            "TypeName": "MudBlazor.Justify",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "Justify"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudGrid",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 569472957,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudGrid.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudGrid"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudGrid.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1288847194,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudGrid.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudGrid"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudGrid.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1139982840,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudItem",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "xs",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "xs"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "sm",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "sm"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "md",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "md"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "lg",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "lg"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "xl",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "xl"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "xxl",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "xxl"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudItem"
        }
      },
      {
        "HashCode": 1806812873,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudItem",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "xs",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "xs"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "sm",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "sm"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "md",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "md"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "lg",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "lg"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "xl",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "xl"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "xxl",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "xxl"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudItem",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -465681329,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudItem.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudItem.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1445281618,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudItem.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudItem"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudItem.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -623931734,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudMainContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudMainContent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudMainContent"
        }
      },
      {
        "HashCode": -507803057,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudMainContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudMainContent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudMainContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2112322139,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudMainContent.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudMainContent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudMainContent.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 987042086,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudMainContent.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudMainContent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudMainContent.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1710601833,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudPickerContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudPickerContent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudPickerContent"
        }
      },
      {
        "HashCode": 778078713,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudPickerContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudPickerContent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudPickerContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 102236713,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudPickerContent.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudPickerContent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudPickerContent.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 667850697,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudPickerContent.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudPickerContent"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudPickerContent.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -116444093,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudPickerToolbar",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudPickerToolbar"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableToolbar",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "DisableToolbar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Orientation",
            "TypeName": "MudBlazor.Orientation",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "Orientation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudPickerToolbar"
        }
      },
      {
        "HashCode": -53982084,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudPickerToolbar",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudPickerToolbar"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableToolbar",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "DisableToolbar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Orientation",
            "TypeName": "MudBlazor.Orientation",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "Orientation"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudPickerToolbar",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -527157978,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudPickerToolbar.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudPickerToolbar"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudPickerToolbar.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 826465280,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudPickerToolbar.ChildContent",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudPickerToolbar"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudPickerToolbar.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -732807882,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudRender",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudRender"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The content to render\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudRender"
        }
      },
      {
        "HashCode": 1748906980,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudRender",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudRender"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            The content to render\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudRender",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1151941026,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudRender.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            The content to render\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudRender"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudRender.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1879290998,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudRender.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            The content to render\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudRender"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudRender.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1530202956,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudSpacer",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudSpacer"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudSpacer"
        }
      },
      {
        "HashCode": 1466151848,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudSpacer",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudSpacer"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudSpacer",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1959580061,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudSparkLine",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudSparkLine"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "StrokeWidth",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "StrokeWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudSparkLine"
        }
      },
      {
        "HashCode": 309480440,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudSparkLine",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudSparkLine"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "StrokeWidth",
            "TypeName": "System.Int32",
            "Metadata": {
              "Common.PropertyName": "StrokeWidth"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudSparkLine",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1012467774,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudAvatarColumn<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudAvatarColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudAvatarColumn<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "T",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Visible",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Visible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderText",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "HeaderText"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudAvatarColumn<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": 1881236223,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudAvatarColumn<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudAvatarColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudAvatarColumn<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "T",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Visible",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Visible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderText",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "HeaderText"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudAvatarColumn<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 47021297,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTemplateColumn<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTemplateColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudTemplateColumn<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DataContext",
            "TypeName": "T",
            "Metadata": {
              "Common.PropertyName": "DataContext",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Header",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Metadata": {
              "Common.PropertyName": "Header",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Row",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Metadata": {
              "Common.PropertyName": "Row",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Edit",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Metadata": {
              "Common.PropertyName": "Edit",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Footer",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Metadata": {
              "Common.PropertyName": "Footer",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Visible",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Visible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderText",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "HeaderText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTemplateColumn<T>",
          "Components.GenericTyped": "True"
        }
      },
      {
        "HashCode": -539201394,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTemplateColumn<T>",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTemplateColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "T",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter T for the MudBlazor.MudTemplateColumn<T> component.",
            "Metadata": {
              "Common.PropertyName": "T",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DataContext",
            "TypeName": "T",
            "Metadata": {
              "Common.PropertyName": "DataContext",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Header",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Metadata": {
              "Common.PropertyName": "Header",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Row",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Metadata": {
              "Common.PropertyName": "Row",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Edit",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Metadata": {
              "Common.PropertyName": "Edit",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Footer",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<T>",
            "Metadata": {
              "Common.PropertyName": "Footer",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Visible",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Visible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "HeaderText",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "HeaderText"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTemplateColumn<T>",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 251546693,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTemplateColumn<T>.Header",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Header",
            "ParentTag": "MudTemplateColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Header' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTemplateColumn<T>.Header",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -2144214287,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTemplateColumn<T>.Header",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Header",
            "ParentTag": "MudBlazor.MudTemplateColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Header' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTemplateColumn<T>.Header",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -81915997,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTemplateColumn<T>.Row",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Row",
            "ParentTag": "MudTemplateColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Row' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTemplateColumn<T>.Row",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1885812470,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTemplateColumn<T>.Row",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Row",
            "ParentTag": "MudBlazor.MudTemplateColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Row' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTemplateColumn<T>.Row",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1057212696,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTemplateColumn<T>.Edit",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Edit",
            "ParentTag": "MudTemplateColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Edit' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTemplateColumn<T>.Edit",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1968154488,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTemplateColumn<T>.Edit",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Edit",
            "ParentTag": "MudBlazor.MudTemplateColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Edit' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTemplateColumn<T>.Edit",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1481788699,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTemplateColumn<T>.Footer",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Footer",
            "ParentTag": "MudTemplateColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Footer' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTemplateColumn<T>.Footer",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1828963049,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTemplateColumn<T>.Footer",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Footer",
            "ParentTag": "MudBlazor.MudTemplateColumn"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Footer' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTemplateColumn<T>.Footer",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1565399469,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTabPanel",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTabPanel"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text will be displayed in the TabPanel as TabTitle.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon placed before the text if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the tabpanel will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BadgeData",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Optional information to be showed into a badge\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BadgeData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BadgeDot",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Optional information to show the badge as a dot.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BadgeDot"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BadgeColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the badge.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BadgeColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ID",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Unique TabPanel ID. Useful for activation when Panels are dynamically generated.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ID"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised when tab is clicked\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TabContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Tab content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TabContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TabWrapperContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.RenderFragment>",
            "Documentation": "\n            <summary>\n            Tab content wrapper of component. It is used to wrap the content of a tab heading in a user supplied div or component. \n            Use @context in the TabWrapperContent to render the tab header within your custom wrapper. \n            This is most useful with tooltips, which must wrap the entire content they refer to.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TabWrapperContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToolTip",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            TabPanel Tooltip. It will be ignored if TabContent is provided.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToolTip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTabPanel"
        }
      },
      {
        "HashCode": 2022793849,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTabPanel",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTabPanel"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Text will be displayed in the TabPanel as TabTitle.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Icon placed before the text if set.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Disabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, the tabpanel will be disabled.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Disabled"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BadgeData",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Optional information to be showed into a badge\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BadgeData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BadgeDot",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Optional information to show the badge as a dot.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BadgeDot"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "BadgeColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the badge.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "BadgeColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ID",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Unique TabPanel ID. Useful for activation when Panels are dynamically generated.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ID"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "\n            <summary>\n            Raised when tab is clicked\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TabContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Tab content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TabContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "TabWrapperContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.RenderFragment>",
            "Documentation": "\n            <summary>\n            Tab content wrapper of component. It is used to wrap the content of a tab heading in a user supplied div or component. \n            Use @context in the TabWrapperContent to render the tab header within your custom wrapper. \n            This is most useful with tooltips, which must wrap the entire content they refer to.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "TabWrapperContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ToolTip",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            TabPanel Tooltip. It will be ignored if TabContent is provided.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ToolTip"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTabPanel",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -494028557,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTabPanel.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudTabPanel"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTabPanel.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1049929867,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTabPanel.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudTabPanel"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTabPanel.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -604288709,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTabPanel.TabContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Tab content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "TabContent",
            "ParentTag": "MudTabPanel"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTabPanel.TabContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": -1948149086,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTabPanel.TabContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Tab content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "TabContent",
            "ParentTag": "MudBlazor.MudTabPanel"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTabPanel.TabContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1564146078,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTabPanel.TabWrapperContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Tab content wrapper of component. It is used to wrap the content of a tab heading in a user supplied div or component. \n            Use @context in the TabWrapperContent to render the tab header within your custom wrapper. \n            This is most useful with tooltips, which must wrap the entire content they refer to.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "TabWrapperContent",
            "ParentTag": "MudTabPanel"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'TabWrapperContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTabPanel.TabWrapperContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1652197212,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudTabPanel.TabWrapperContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Tab content wrapper of component. It is used to wrap the content of a tab heading in a user supplied div or component. \n            Use @context in the TabWrapperContent to render the tab header within your custom wrapper. \n            This is most useful with tooltips, which must wrap the entire content they refer to.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "TabWrapperContent",
            "ParentTag": "MudBlazor.MudTabPanel"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'TabWrapperContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudTabPanel.TabWrapperContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1000194107,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudThemeProvider",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudThemeProvider"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Theme",
            "TypeName": "MudBlazor.MudTheme",
            "Documentation": "\n            <summary>\n            The theme used by the application.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Theme"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DefaultScrollbar",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n             If true, will not apply MudBlazor styled scrollbar and use browser default. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DefaultScrollbar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsDarkMode",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The active palette of the theme.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsDarkMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsDarkModeChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Invoked when the dark mode changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsDarkModeChanged",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudThemeProvider"
        }
      },
      {
        "HashCode": 1187474408,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudThemeProvider",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudThemeProvider"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Theme",
            "TypeName": "MudBlazor.MudTheme",
            "Documentation": "\n            <summary>\n            The theme used by the application.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Theme"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DefaultScrollbar",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n             If true, will not apply MudBlazor styled scrollbar and use browser default. \n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DefaultScrollbar"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsDarkMode",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            The active palette of the theme.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsDarkMode"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsDarkModeChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Invoked when the dark mode changes.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "IsDarkModeChanged",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudThemeProvider",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1972838257,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudToolBar",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudToolBar"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact padding will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableGutters",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables gutter padding.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableGutters"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudToolBar"
        }
      },
      {
        "HashCode": -330050504,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudToolBar",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudToolBar"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Dense",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, compact padding will be used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Dense"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisableGutters",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, disables gutter padding.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "DisableGutters"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudToolBar",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 131082001,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudToolBar.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudToolBar"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudToolBar.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 919494814,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.MudToolBar.ChildContent",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            Child content of component.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "MudBlazor.MudToolBar"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.MudToolBar.ChildContent",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1871522459,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudToolBarSpacer",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudToolBarSpacer"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudToolBarSpacer"
        }
      },
      {
        "HashCode": -2001129022,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudToolBarSpacer",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudToolBarSpacer"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudToolBarSpacer",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1683325634,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTreeViewItemToggleButton",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTreeViewItemToggleButton"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Visible",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, displays the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Visible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Expanded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Determens when to flip the expanded icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Expanded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Loading",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, displays the loading icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Loading"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Called whenever expanded changed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandedChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LoadingIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The loading icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LoadingIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LoadingIconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the loading. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LoadingIconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandedIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The expand/collapse icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandedIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandedIconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the expand/collapse. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandedIconColor"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTreeViewItemToggleButton"
        }
      },
      {
        "HashCode": -403552766,
        "Kind": "Components.Component",
        "Name": "MudBlazor.MudTreeViewItemToggleButton",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTreeViewItemToggleButton"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Visible",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, displays the button.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Visible"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Expanded",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Determens when to flip the expanded icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Expanded"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Loading",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            If true, displays the loading icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Loading"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandedChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "\n            <summary>\n            Called whenever expanded changed.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandedChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LoadingIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The loading icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LoadingIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LoadingIconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the loading. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LoadingIconColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandedIcon",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The expand/collapse icon.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandedIcon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ExpandedIconColor",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The color of the expand/collapse. It supports the theme colors.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpandedIconColor"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.MudTreeViewItemToggleButton",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -512976473,
        "Kind": "Components.Component",
        "Name": "MudBlazor._Imports",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "_Imports"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor._Imports"
        }
      },
      {
        "HashCode": 1790453783,
        "Kind": "Components.Component",
        "Name": "MudBlazor._Imports",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor._Imports"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor._Imports",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1422636705,
        "Kind": "Components.Component",
        "Name": "MudBlazor.Charts.Bar",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Bar"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "InputData",
            "TypeName": "System.Double[]",
            "Metadata": {
              "Common.PropertyName": "InputData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputLabels",
            "TypeName": "System.String[]",
            "Metadata": {
              "Common.PropertyName": "InputLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "XAxisLabels",
            "TypeName": "System.String[]",
            "Metadata": {
              "Common.PropertyName": "XAxisLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartSeries",
            "TypeName": "System.Collections.Generic.List<MudBlazor.ChartSeries>",
            "Metadata": {
              "Common.PropertyName": "ChartSeries"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartOptions",
            "TypeName": "MudBlazor.ChartOptions",
            "Metadata": {
              "Common.PropertyName": "ChartOptions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CustomGraphics",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            RenderFragment for costumization inside the chart's svg.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CustomGraphics",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartType",
            "TypeName": "MudBlazor.ChartType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Type of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChartType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Width",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Width of the chart, end with % or px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Width"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Height of the chart, end with % or px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LegendPosition",
            "TypeName": "MudBlazor.Position",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The placement direction of the legend if used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LegendPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndex",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Selected index of a portion of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndexChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Selected index of a portion of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndexChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.Charts.Bar"
        }
      },
      {
        "HashCode": 1704484526,
        "Kind": "Components.Component",
        "Name": "MudBlazor.Charts.Bar",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.Charts.Bar"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "InputData",
            "TypeName": "System.Double[]",
            "Metadata": {
              "Common.PropertyName": "InputData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputLabels",
            "TypeName": "System.String[]",
            "Metadata": {
              "Common.PropertyName": "InputLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "XAxisLabels",
            "TypeName": "System.String[]",
            "Metadata": {
              "Common.PropertyName": "XAxisLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartSeries",
            "TypeName": "System.Collections.Generic.List<MudBlazor.ChartSeries>",
            "Metadata": {
              "Common.PropertyName": "ChartSeries"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartOptions",
            "TypeName": "MudBlazor.ChartOptions",
            "Metadata": {
              "Common.PropertyName": "ChartOptions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CustomGraphics",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            RenderFragment for costumization inside the chart's svg.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CustomGraphics",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartType",
            "TypeName": "MudBlazor.ChartType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Type of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChartType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Width",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Width of the chart, end with % or px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Width"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Height of the chart, end with % or px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LegendPosition",
            "TypeName": "MudBlazor.Position",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The placement direction of the legend if used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LegendPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndex",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Selected index of a portion of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndexChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Selected index of a portion of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndexChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.Charts.Bar",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -512099623,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Charts.Bar.CustomGraphics",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            RenderFragment for costumization inside the chart's svg.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CustomGraphics",
            "ParentTag": "Bar"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Charts.Bar.CustomGraphics",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 332520360,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Charts.Bar.CustomGraphics",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            RenderFragment for costumization inside the chart's svg.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CustomGraphics",
            "ParentTag": "MudBlazor.Charts.Bar"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Charts.Bar.CustomGraphics",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1213243705,
        "Kind": "Components.Component",
        "Name": "MudBlazor.Charts.Donut",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Donut"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "InputData",
            "TypeName": "System.Double[]",
            "Metadata": {
              "Common.PropertyName": "InputData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputLabels",
            "TypeName": "System.String[]",
            "Metadata": {
              "Common.PropertyName": "InputLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "XAxisLabels",
            "TypeName": "System.String[]",
            "Metadata": {
              "Common.PropertyName": "XAxisLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartSeries",
            "TypeName": "System.Collections.Generic.List<MudBlazor.ChartSeries>",
            "Metadata": {
              "Common.PropertyName": "ChartSeries"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartOptions",
            "TypeName": "MudBlazor.ChartOptions",
            "Metadata": {
              "Common.PropertyName": "ChartOptions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CustomGraphics",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            RenderFragment for costumization inside the chart's svg.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CustomGraphics",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartType",
            "TypeName": "MudBlazor.ChartType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Type of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChartType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Width",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Width of the chart, end with % or px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Width"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Height of the chart, end with % or px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LegendPosition",
            "TypeName": "MudBlazor.Position",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The placement direction of the legend if used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LegendPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndex",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Selected index of a portion of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndexChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Selected index of a portion of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndexChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.Charts.Donut"
        }
      },
      {
        "HashCode": -994364816,
        "Kind": "Components.Component",
        "Name": "MudBlazor.Charts.Donut",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.Charts.Donut"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "InputData",
            "TypeName": "System.Double[]",
            "Metadata": {
              "Common.PropertyName": "InputData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputLabels",
            "TypeName": "System.String[]",
            "Metadata": {
              "Common.PropertyName": "InputLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "XAxisLabels",
            "TypeName": "System.String[]",
            "Metadata": {
              "Common.PropertyName": "XAxisLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartSeries",
            "TypeName": "System.Collections.Generic.List<MudBlazor.ChartSeries>",
            "Metadata": {
              "Common.PropertyName": "ChartSeries"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartOptions",
            "TypeName": "MudBlazor.ChartOptions",
            "Metadata": {
              "Common.PropertyName": "ChartOptions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CustomGraphics",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            RenderFragment for costumization inside the chart's svg.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CustomGraphics",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartType",
            "TypeName": "MudBlazor.ChartType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Type of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChartType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Width",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Width of the chart, end with % or px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Width"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Height of the chart, end with % or px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LegendPosition",
            "TypeName": "MudBlazor.Position",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The placement direction of the legend if used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LegendPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndex",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Selected index of a portion of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndexChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Selected index of a portion of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndexChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.Charts.Donut",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 497097632,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Charts.Donut.CustomGraphics",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            RenderFragment for costumization inside the chart's svg.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CustomGraphics",
            "ParentTag": "Donut"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Charts.Donut.CustomGraphics",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 368360416,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Charts.Donut.CustomGraphics",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            RenderFragment for costumization inside the chart's svg.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CustomGraphics",
            "ParentTag": "MudBlazor.Charts.Donut"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Charts.Donut.CustomGraphics",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -279577983,
        "Kind": "Components.Component",
        "Name": "MudBlazor.Charts.Line",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Line"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "InputData",
            "TypeName": "System.Double[]",
            "Metadata": {
              "Common.PropertyName": "InputData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputLabels",
            "TypeName": "System.String[]",
            "Metadata": {
              "Common.PropertyName": "InputLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "XAxisLabels",
            "TypeName": "System.String[]",
            "Metadata": {
              "Common.PropertyName": "XAxisLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartSeries",
            "TypeName": "System.Collections.Generic.List<MudBlazor.ChartSeries>",
            "Metadata": {
              "Common.PropertyName": "ChartSeries"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartOptions",
            "TypeName": "MudBlazor.ChartOptions",
            "Metadata": {
              "Common.PropertyName": "ChartOptions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CustomGraphics",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            RenderFragment for costumization inside the chart's svg.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CustomGraphics",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartType",
            "TypeName": "MudBlazor.ChartType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Type of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChartType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Width",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Width of the chart, end with % or px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Width"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Height of the chart, end with % or px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LegendPosition",
            "TypeName": "MudBlazor.Position",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The placement direction of the legend if used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LegendPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndex",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Selected index of a portion of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndexChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Selected index of a portion of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndexChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.Charts.Line"
        }
      },
      {
        "HashCode": 474597152,
        "Kind": "Components.Component",
        "Name": "MudBlazor.Charts.Line",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.Charts.Line"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "InputData",
            "TypeName": "System.Double[]",
            "Metadata": {
              "Common.PropertyName": "InputData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputLabels",
            "TypeName": "System.String[]",
            "Metadata": {
              "Common.PropertyName": "InputLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "XAxisLabels",
            "TypeName": "System.String[]",
            "Metadata": {
              "Common.PropertyName": "XAxisLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartSeries",
            "TypeName": "System.Collections.Generic.List<MudBlazor.ChartSeries>",
            "Metadata": {
              "Common.PropertyName": "ChartSeries"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartOptions",
            "TypeName": "MudBlazor.ChartOptions",
            "Metadata": {
              "Common.PropertyName": "ChartOptions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CustomGraphics",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            RenderFragment for costumization inside the chart's svg.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CustomGraphics",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartType",
            "TypeName": "MudBlazor.ChartType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Type of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChartType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Width",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Width of the chart, end with % or px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Width"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Height of the chart, end with % or px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LegendPosition",
            "TypeName": "MudBlazor.Position",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The placement direction of the legend if used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LegendPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndex",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Selected index of a portion of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndexChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Selected index of a portion of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndexChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.Charts.Line",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 778886067,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Charts.Line.CustomGraphics",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            RenderFragment for costumization inside the chart's svg.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CustomGraphics",
            "ParentTag": "Line"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Charts.Line.CustomGraphics",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1171609835,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Charts.Line.CustomGraphics",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            RenderFragment for costumization inside the chart's svg.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CustomGraphics",
            "ParentTag": "MudBlazor.Charts.Line"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Charts.Line.CustomGraphics",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1516821951,
        "Kind": "Components.Component",
        "Name": "MudBlazor.Charts.Pie",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Pie"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "InputData",
            "TypeName": "System.Double[]",
            "Metadata": {
              "Common.PropertyName": "InputData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputLabels",
            "TypeName": "System.String[]",
            "Metadata": {
              "Common.PropertyName": "InputLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "XAxisLabels",
            "TypeName": "System.String[]",
            "Metadata": {
              "Common.PropertyName": "XAxisLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartSeries",
            "TypeName": "System.Collections.Generic.List<MudBlazor.ChartSeries>",
            "Metadata": {
              "Common.PropertyName": "ChartSeries"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartOptions",
            "TypeName": "MudBlazor.ChartOptions",
            "Metadata": {
              "Common.PropertyName": "ChartOptions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CustomGraphics",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            RenderFragment for costumization inside the chart's svg.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CustomGraphics",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartType",
            "TypeName": "MudBlazor.ChartType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Type of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChartType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Width",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Width of the chart, end with % or px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Width"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Height of the chart, end with % or px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LegendPosition",
            "TypeName": "MudBlazor.Position",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The placement direction of the legend if used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LegendPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndex",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Selected index of a portion of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndexChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Selected index of a portion of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndexChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.Charts.Pie"
        }
      },
      {
        "HashCode": -121098335,
        "Kind": "Components.Component",
        "Name": "MudBlazor.Charts.Pie",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.Charts.Pie"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "InputData",
            "TypeName": "System.Double[]",
            "Metadata": {
              "Common.PropertyName": "InputData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputLabels",
            "TypeName": "System.String[]",
            "Metadata": {
              "Common.PropertyName": "InputLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "XAxisLabels",
            "TypeName": "System.String[]",
            "Metadata": {
              "Common.PropertyName": "XAxisLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartSeries",
            "TypeName": "System.Collections.Generic.List<MudBlazor.ChartSeries>",
            "Metadata": {
              "Common.PropertyName": "ChartSeries"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartOptions",
            "TypeName": "MudBlazor.ChartOptions",
            "Metadata": {
              "Common.PropertyName": "ChartOptions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CustomGraphics",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            RenderFragment for costumization inside the chart's svg.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CustomGraphics",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartType",
            "TypeName": "MudBlazor.ChartType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Type of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChartType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Width",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Width of the chart, end with % or px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Width"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Height of the chart, end with % or px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LegendPosition",
            "TypeName": "MudBlazor.Position",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The placement direction of the legend if used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LegendPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndex",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Selected index of a portion of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndexChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Selected index of a portion of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndexChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.Charts.Pie",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 501786839,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Charts.Pie.CustomGraphics",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            RenderFragment for costumization inside the chart's svg.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CustomGraphics",
            "ParentTag": "Pie"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Charts.Pie.CustomGraphics",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 888564257,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Charts.Pie.CustomGraphics",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            RenderFragment for costumization inside the chart's svg.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CustomGraphics",
            "ParentTag": "MudBlazor.Charts.Pie"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Charts.Pie.CustomGraphics",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -770254298,
        "Kind": "Components.Component",
        "Name": "MudBlazor.Charts.Legend",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Legend"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Data",
            "TypeName": "System.Collections.Generic.List<MudBlazor.Charts.SVG.Models.SvgLegend>",
            "Metadata": {
              "Common.PropertyName": "Data"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputData",
            "TypeName": "System.Double[]",
            "Metadata": {
              "Common.PropertyName": "InputData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputLabels",
            "TypeName": "System.String[]",
            "Metadata": {
              "Common.PropertyName": "InputLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "XAxisLabels",
            "TypeName": "System.String[]",
            "Metadata": {
              "Common.PropertyName": "XAxisLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartSeries",
            "TypeName": "System.Collections.Generic.List<MudBlazor.ChartSeries>",
            "Metadata": {
              "Common.PropertyName": "ChartSeries"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartOptions",
            "TypeName": "MudBlazor.ChartOptions",
            "Metadata": {
              "Common.PropertyName": "ChartOptions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CustomGraphics",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            RenderFragment for costumization inside the chart's svg.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CustomGraphics",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartType",
            "TypeName": "MudBlazor.ChartType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Type of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChartType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Width",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Width of the chart, end with % or px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Width"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Height of the chart, end with % or px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LegendPosition",
            "TypeName": "MudBlazor.Position",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The placement direction of the legend if used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LegendPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndex",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Selected index of a portion of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndexChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Selected index of a portion of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndexChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.Charts.Legend"
        }
      },
      {
        "HashCode": 1367626322,
        "Kind": "Components.Component",
        "Name": "MudBlazor.Charts.Legend",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.Charts.Legend"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Data",
            "TypeName": "System.Collections.Generic.List<MudBlazor.Charts.SVG.Models.SvgLegend>",
            "Metadata": {
              "Common.PropertyName": "Data"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputData",
            "TypeName": "System.Double[]",
            "Metadata": {
              "Common.PropertyName": "InputData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "InputLabels",
            "TypeName": "System.String[]",
            "Metadata": {
              "Common.PropertyName": "InputLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "XAxisLabels",
            "TypeName": "System.String[]",
            "Metadata": {
              "Common.PropertyName": "XAxisLabels"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartSeries",
            "TypeName": "System.Collections.Generic.List<MudBlazor.ChartSeries>",
            "Metadata": {
              "Common.PropertyName": "ChartSeries"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartOptions",
            "TypeName": "MudBlazor.ChartOptions",
            "Metadata": {
              "Common.PropertyName": "ChartOptions"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "CustomGraphics",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "\n            <summary>\n            RenderFragment for costumization inside the chart's svg.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "CustomGraphics",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChartType",
            "TypeName": "MudBlazor.ChartType",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The Type of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ChartType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Width",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Width of the chart, end with % or px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Width"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Height",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The Height of the chart, end with % or px.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Height"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "LegendPosition",
            "TypeName": "MudBlazor.Position",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            The placement direction of the legend if used.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "LegendPosition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndex",
            "TypeName": "System.Int32",
            "Documentation": "\n            <summary>\n            Selected index of a portion of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndex"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SelectedIndexChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "\n            <summary>\n            Selected index of a portion of the chart.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SelectedIndexChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User class names, separated by space.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Style",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            User styles, applied on top of the component's own classes and styles.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Style"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Tag",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Use Tag to attach any user data object to the component for your convenience.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Tag"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "UserAttributes",
            "TypeName": "System.Collections.Generic.Dictionary<System.String, System.Object>",
            "Documentation": "\n            <summary>\n            UserAttributes carries all attributes you add to the component that don't match any of its parameters.\n            They will be splatted onto the underlying HTML tag.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "UserAttributes"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.Charts.Legend",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2081104965,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Charts.Legend.CustomGraphics",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            RenderFragment for costumization inside the chart's svg.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CustomGraphics",
            "ParentTag": "Legend"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Charts.Legend.CustomGraphics",
          "Components.IsSpecialKind": "Components.ChildContent"
        }
      },
      {
        "HashCode": 1394036883,
        "Kind": "Components.ChildContent",
        "Name": "MudBlazor.Charts.Legend.CustomGraphics",
        "AssemblyName": "MudBlazor",
        "Documentation": "\n            <summary>\n            RenderFragment for costumization inside the chart's svg.\n            </summary>\n        ",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CustomGraphics",
            "ParentTag": "MudBlazor.Charts.Legend"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Common.TypeName": "MudBlazor.Charts.Legend.CustomGraphics",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1876817744,
        "Kind": "Components.Component",
        "Name": "MudBlazor.Charts.Filters",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Filters"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.Charts.Filters"
        }
      },
      {
        "HashCode": -1025010496,
        "Kind": "Components.Component",
        "Name": "MudBlazor.Charts.Filters",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.Charts.Filters"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.Charts.Filters",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1519170230,
        "Kind": "Components.Component",
        "Name": "MudBlazor.Internal.MudInputAdornment",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudInputAdornment"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Edge",
            "TypeName": "MudBlazor.Edge",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "Edge"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AriaLabel",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "AriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Metadata": {
              "Common.PropertyName": "AdornmentClick",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.Internal.MudInputAdornment"
        }
      },
      {
        "HashCode": 1776486662,
        "Kind": "Components.Component",
        "Name": "MudBlazor.Internal.MudInputAdornment",
        "AssemblyName": "MudBlazor",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.Internal.MudInputAdornment"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Class",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Class"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Text",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Text"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Icon",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Icon"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Edge",
            "TypeName": "MudBlazor.Edge",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "Edge"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Size",
            "TypeName": "MudBlazor.Size",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "Size"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Color",
            "TypeName": "MudBlazor.Color",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "Color"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AriaLabel",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "AriaLabel"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdornmentClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Metadata": {
              "Common.PropertyName": "AdornmentClick",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.Internal.MudInputAdornment",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2051996734,
        "Kind": "Components.Component",
        "Name": "MudBlazor.ThemeManager.MudThemeManager",
        "AssemblyName": "MudBlazor.ThemeManager",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudThemeManager"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Open",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Open"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OpenChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Metadata": {
              "Common.PropertyName": "OpenChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Theme",
            "TypeName": "MudBlazor.ThemeManager.ThemeManagerTheme",
            "Metadata": {
              "Common.PropertyName": "Theme"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColorPickerView",
            "TypeName": "MudBlazor.ColorPickerView",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "ColorPickerView"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ThemeChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.ThemeManager.ThemeManagerTheme>",
            "Metadata": {
              "Common.PropertyName": "ThemeChanged",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.ThemeManager.MudThemeManager"
        }
      },
      {
        "HashCode": -427277953,
        "Kind": "Components.Component",
        "Name": "MudBlazor.ThemeManager.MudThemeManager",
        "AssemblyName": "MudBlazor.ThemeManager",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.ThemeManager.MudThemeManager"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Open",
            "TypeName": "System.Boolean",
            "Metadata": {
              "Common.PropertyName": "Open"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OpenChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Metadata": {
              "Common.PropertyName": "OpenChanged",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Theme",
            "TypeName": "MudBlazor.ThemeManager.ThemeManagerTheme",
            "Metadata": {
              "Common.PropertyName": "Theme"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColorPickerView",
            "TypeName": "MudBlazor.ColorPickerView",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "ColorPickerView"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ThemeChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.ThemeManager.ThemeManagerTheme>",
            "Metadata": {
              "Common.PropertyName": "ThemeChanged",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.ThemeManager.MudThemeManager",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 445537760,
        "Kind": "Components.Component",
        "Name": "MudBlazor.ThemeManager.MudThemeManagerButton",
        "AssemblyName": "MudBlazor.ThemeManager",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudThemeManagerButton"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.ThemeManager.MudThemeManagerButton"
        }
      },
      {
        "HashCode": 1876528340,
        "Kind": "Components.Component",
        "Name": "MudBlazor.ThemeManager.MudThemeManagerButton",
        "AssemblyName": "MudBlazor.ThemeManager",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.ThemeManager.MudThemeManagerButton"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OnClick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Metadata": {
              "Common.PropertyName": "OnClick",
              "Components.EventCallback": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.ThemeManager.MudThemeManagerButton",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1035929276,
        "Kind": "Components.Component",
        "Name": "MudBlazor.ThemeManager.MudThemeManagerColorItem",
        "AssemblyName": "MudBlazor.ThemeManager",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudThemeManagerColorItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ThemeColor",
            "TypeName": "MudBlazor.Utilities.MudColor",
            "Metadata": {
              "Common.PropertyName": "ThemeColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColorType",
            "TypeName": "MudBlazor.ThemeManager.ThemePaletteColor",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "ColorType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColorPickerView",
            "TypeName": "MudBlazor.ColorPickerView",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "ColorPickerView"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.ThemeManager.MudThemeManagerColorItem"
        }
      },
      {
        "HashCode": -180401295,
        "Kind": "Components.Component",
        "Name": "MudBlazor.ThemeManager.MudThemeManagerColorItem",
        "AssemblyName": "MudBlazor.ThemeManager",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.ThemeManager.MudThemeManagerColorItem"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ThemeColor",
            "TypeName": "MudBlazor.Utilities.MudColor",
            "Metadata": {
              "Common.PropertyName": "ThemeColor"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColorType",
            "TypeName": "MudBlazor.ThemeManager.ThemePaletteColor",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "ColorType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ColorPickerView",
            "TypeName": "MudBlazor.ColorPickerView",
            "IsEnum": true,
            "Metadata": {
              "Common.PropertyName": "ColorPickerView"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.ThemeManager.MudThemeManagerColorItem",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1788644881,
        "Kind": "Components.Component",
        "Name": "MudBlazor.ThemeManager._Imports",
        "AssemblyName": "MudBlazor.ThemeManager",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "_Imports"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.ThemeManager._Imports"
        }
      },
      {
        "HashCode": -1891279071,
        "Kind": "Components.Component",
        "Name": "MudBlazor.ThemeManager._Imports",
        "AssemblyName": "MudBlazor.ThemeManager",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.ThemeManager._Imports"
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.IComponent",
          "Common.TypeName": "MudBlazor.ThemeManager._Imports",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -75651768,
        "Kind": "Components.EventHandler",
        "Name": "onfocus",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onfocus' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocus",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocus:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocus:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onfocus",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "Sets the '@onfocus' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onfocus"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocus' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onfocus' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.FocusEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -906180890,
        "Kind": "Components.EventHandler",
        "Name": "onblur",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onblur' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onblur",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onblur:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onblur:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onblur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "Sets the '@onblur' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onblur"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onblur' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onblur' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.FocusEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1308181406,
        "Kind": "Components.EventHandler",
        "Name": "onfocusin",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onfocusin' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocusin",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocusin:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocusin:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onfocusin",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "Sets the '@onfocusin' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onfocusin"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocusin' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onfocusin' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.FocusEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 2107881736,
        "Kind": "Components.EventHandler",
        "Name": "onfocusout",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onfocusout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocusout",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocusout:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocusout:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onfocusout",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "Sets the '@onfocusout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onfocusout"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocusout' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onfocusout' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.FocusEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1827103128,
        "Kind": "Components.EventHandler",
        "Name": "onmouseover",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmouseover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseover",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseover:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseover:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmouseover",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onmouseover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmouseover"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseover' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmouseover' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -365478544,
        "Kind": "Components.EventHandler",
        "Name": "onmouseout",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmouseout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseout",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseout:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseout:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmouseout",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onmouseout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmouseout"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseout' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmouseout' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 2092881484,
        "Kind": "Components.EventHandler",
        "Name": "onmousemove",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmousemove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousemove",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousemove:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousemove:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmousemove",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onmousemove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmousemove"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousemove' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmousemove' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -40518823,
        "Kind": "Components.EventHandler",
        "Name": "onmousedown",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmousedown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousedown",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousedown:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousedown:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmousedown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onmousedown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmousedown"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousedown' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmousedown' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -10845692,
        "Kind": "Components.EventHandler",
        "Name": "onmouseup",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmouseup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseup",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseup:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseup:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmouseup",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onmouseup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmouseup"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseup' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmouseup' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1656956659,
        "Kind": "Components.EventHandler",
        "Name": "onclick",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onclick",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onclick:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onclick:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onclick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onclick"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onclick' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onclick' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1609460994,
        "Kind": "Components.EventHandler",
        "Name": "ondblclick",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondblclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondblclick",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondblclick:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondblclick:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondblclick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@ondblclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondblclick"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondblclick' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondblclick' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -403046586,
        "Kind": "Components.EventHandler",
        "Name": "onwheel",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onwheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onwheel",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onwheel:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onwheel:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onwheel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs>",
            "Documentation": "Sets the '@onwheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onwheel"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onwheel' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onwheel' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.WheelEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1439504526,
        "Kind": "Components.EventHandler",
        "Name": "onmousewheel",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmousewheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousewheel",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousewheel:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousewheel:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmousewheel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs>",
            "Documentation": "Sets the '@onmousewheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmousewheel"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousewheel' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmousewheel' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.WheelEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1573575974,
        "Kind": "Components.EventHandler",
        "Name": "oncontextmenu",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncontextmenu' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncontextmenu",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncontextmenu:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncontextmenu:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncontextmenu",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@oncontextmenu' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncontextmenu"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncontextmenu' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncontextmenu' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 726518430,
        "Kind": "Components.EventHandler",
        "Name": "ondrag",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondrag' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondrag",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondrag:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondrag:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondrag",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondrag' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondrag"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondrag' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondrag' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 26291712,
        "Kind": "Components.EventHandler",
        "Name": "ondragend",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondragend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragend",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragend:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragend:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondragend",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondragend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondragend"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragend' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondragend' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1784907627,
        "Kind": "Components.EventHandler",
        "Name": "ondragenter",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondragenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragenter",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragenter:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragenter:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondragenter",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondragenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondragenter"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragenter' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondragenter' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 491045766,
        "Kind": "Components.EventHandler",
        "Name": "ondragleave",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondragleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragleave",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragleave:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragleave:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondragleave",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondragleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondragleave"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragleave' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondragleave' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1151564696,
        "Kind": "Components.EventHandler",
        "Name": "ondragover",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondragover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragover",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragover:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragover:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondragover",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondragover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondragover"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragover' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondragover' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1094973361,
        "Kind": "Components.EventHandler",
        "Name": "ondragstart",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondragstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragstart",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragstart:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragstart:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondragstart",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondragstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondragstart"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragstart' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondragstart' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 516875132,
        "Kind": "Components.EventHandler",
        "Name": "ondrop",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondrop' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondrop",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondrop:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondrop:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondrop",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondrop' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondrop"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondrop' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondrop' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -769069912,
        "Kind": "Components.EventHandler",
        "Name": "onkeydown",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onkeydown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeydown",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeydown:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeydown:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onkeydown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "Sets the '@onkeydown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onkeydown"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeydown' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onkeydown' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.KeyboardEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1712579997,
        "Kind": "Components.EventHandler",
        "Name": "onkeyup",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onkeyup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeyup",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeyup:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeyup:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onkeyup",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "Sets the '@onkeyup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onkeyup"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeyup' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onkeyup' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.KeyboardEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 947768421,
        "Kind": "Components.EventHandler",
        "Name": "onkeypress",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onkeypress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeypress",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeypress:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeypress:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onkeypress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "Sets the '@onkeypress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onkeypress"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeypress' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onkeypress' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.KeyboardEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1223640342,
        "Kind": "Components.EventHandler",
        "Name": "onchange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onchange' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onchange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onchange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onchange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onchange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "Sets the '@onchange' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onchange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onchange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onchange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.ChangeEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1122813029,
        "Kind": "Components.EventHandler",
        "Name": "oninput",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oninput' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oninput",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oninput:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oninput:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oninput",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "Sets the '@oninput' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oninput"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oninput' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oninput' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.ChangeEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -885808151,
        "Kind": "Components.EventHandler",
        "Name": "oninvalid",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oninvalid' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oninvalid",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oninvalid:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oninvalid:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oninvalid",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@oninvalid' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oninvalid"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oninvalid' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oninvalid' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1509059605,
        "Kind": "Components.EventHandler",
        "Name": "onreset",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onreset' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onreset",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onreset:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onreset:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onreset",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onreset' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onreset"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onreset' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onreset' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1998110419,
        "Kind": "Components.EventHandler",
        "Name": "onselect",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onselect' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselect",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselect:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselect:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onselect",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onselect' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onselect"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselect' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onselect' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -694331116,
        "Kind": "Components.EventHandler",
        "Name": "onselectstart",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onselectstart' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselectstart",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselectstart:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselectstart:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onselectstart",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onselectstart' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onselectstart"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselectstart' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onselectstart' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1403357852,
        "Kind": "Components.EventHandler",
        "Name": "onselectionchange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onselectionchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselectionchange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselectionchange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselectionchange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onselectionchange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onselectionchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onselectionchange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselectionchange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onselectionchange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 2037278784,
        "Kind": "Components.EventHandler",
        "Name": "onsubmit",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onsubmit' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onsubmit",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onsubmit:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onsubmit:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onsubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onsubmit' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onsubmit"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onsubmit' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onsubmit' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -157337620,
        "Kind": "Components.EventHandler",
        "Name": "onbeforecopy",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onbeforecopy' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforecopy",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforecopy:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforecopy:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onbeforecopy",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onbeforecopy' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onbeforecopy"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforecopy' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onbeforecopy' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1034760335,
        "Kind": "Components.EventHandler",
        "Name": "onbeforecut",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onbeforecut' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforecut",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforecut:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforecut:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onbeforecut",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onbeforecut' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onbeforecut"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforecut' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onbeforecut' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 509502077,
        "Kind": "Components.EventHandler",
        "Name": "onbeforepaste",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onbeforepaste' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforepaste",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforepaste:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforepaste:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onbeforepaste",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onbeforepaste' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onbeforepaste"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforepaste' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onbeforepaste' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 2114003487,
        "Kind": "Components.EventHandler",
        "Name": "oncopy",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncopy' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncopy",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncopy:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncopy:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncopy",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>",
            "Documentation": "Sets the '@oncopy' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncopy"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncopy' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncopy' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ClipboardEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 620875981,
        "Kind": "Components.EventHandler",
        "Name": "oncut",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncut' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncut",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncut:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncut:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncut",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>",
            "Documentation": "Sets the '@oncut' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncut"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncut' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncut' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ClipboardEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1876187886,
        "Kind": "Components.EventHandler",
        "Name": "onpaste",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpaste' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpaste",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpaste:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpaste:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpaste",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>",
            "Documentation": "Sets the '@onpaste' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpaste"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpaste' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpaste' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ClipboardEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 382840188,
        "Kind": "Components.EventHandler",
        "Name": "ontouchcancel",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontouchcancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchcancel",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchcancel:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchcancel:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontouchcancel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Documentation": "Sets the '@ontouchcancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontouchcancel"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchcancel' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontouchcancel' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.TouchEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -61267442,
        "Kind": "Components.EventHandler",
        "Name": "ontouchend",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontouchend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchend",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchend:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchend:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontouchend",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Documentation": "Sets the '@ontouchend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontouchend"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchend' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontouchend' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.TouchEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -758640664,
        "Kind": "Components.EventHandler",
        "Name": "ontouchmove",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontouchmove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchmove",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchmove:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchmove:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontouchmove",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Documentation": "Sets the '@ontouchmove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontouchmove"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchmove' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontouchmove' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.TouchEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1893385738,
        "Kind": "Components.EventHandler",
        "Name": "ontouchstart",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontouchstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchstart",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchstart:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchstart:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontouchstart",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Documentation": "Sets the '@ontouchstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontouchstart"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchstart' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontouchstart' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.TouchEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1834688253,
        "Kind": "Components.EventHandler",
        "Name": "ontouchenter",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontouchenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchenter",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchenter:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchenter:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontouchenter",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Documentation": "Sets the '@ontouchenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontouchenter"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchenter' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontouchenter' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.TouchEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 2133841959,
        "Kind": "Components.EventHandler",
        "Name": "ontouchleave",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontouchleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchleave",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchleave:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchleave:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontouchleave",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Documentation": "Sets the '@ontouchleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontouchleave"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchleave' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontouchleave' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.TouchEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 385414530,
        "Kind": "Components.EventHandler",
        "Name": "ongotpointercapture",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ongotpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ongotpointercapture",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ongotpointercapture:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ongotpointercapture:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ongotpointercapture",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@ongotpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ongotpointercapture"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ongotpointercapture' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ongotpointercapture' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 605992076,
        "Kind": "Components.EventHandler",
        "Name": "onlostpointercapture",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onlostpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onlostpointercapture",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onlostpointercapture:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onlostpointercapture:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onlostpointercapture",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onlostpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onlostpointercapture"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onlostpointercapture' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onlostpointercapture' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1272347359,
        "Kind": "Components.EventHandler",
        "Name": "onpointercancel",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointercancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointercancel",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointercancel:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointercancel:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointercancel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointercancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointercancel"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointercancel' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointercancel' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1365103663,
        "Kind": "Components.EventHandler",
        "Name": "onpointerdown",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerdown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerdown",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerdown:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerdown:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerdown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointerdown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerdown"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerdown' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerdown' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1763519283,
        "Kind": "Components.EventHandler",
        "Name": "onpointerenter",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerenter",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerenter:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerenter:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerenter",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointerenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerenter"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerenter' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerenter' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1895591791,
        "Kind": "Components.EventHandler",
        "Name": "onpointerleave",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerleave",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerleave:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerleave:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerleave",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointerleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerleave"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerleave' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerleave' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1441684654,
        "Kind": "Components.EventHandler",
        "Name": "onpointermove",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointermove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointermove",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointermove:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointermove:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointermove",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointermove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointermove"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointermove' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointermove' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -208082342,
        "Kind": "Components.EventHandler",
        "Name": "onpointerout",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerout",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerout:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerout:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerout",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointerout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerout"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerout' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerout' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1278983977,
        "Kind": "Components.EventHandler",
        "Name": "onpointerover",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerover",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerover:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerover:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerover",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointerover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerover"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerover' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerover' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 2063411004,
        "Kind": "Components.EventHandler",
        "Name": "onpointerup",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerup",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerup:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerup:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerup",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointerup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerup"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerup' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerup' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1528395170,
        "Kind": "Components.EventHandler",
        "Name": "oncanplay",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncanplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncanplay",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncanplay:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncanplay:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncanplay",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@oncanplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncanplay"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncanplay' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncanplay' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -956267906,
        "Kind": "Components.EventHandler",
        "Name": "oncanplaythrough",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncanplaythrough' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncanplaythrough",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncanplaythrough:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncanplaythrough:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncanplaythrough",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@oncanplaythrough' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncanplaythrough"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncanplaythrough' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncanplaythrough' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -619419061,
        "Kind": "Components.EventHandler",
        "Name": "oncuechange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncuechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncuechange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncuechange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncuechange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncuechange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@oncuechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncuechange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncuechange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncuechange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -626684762,
        "Kind": "Components.EventHandler",
        "Name": "ondurationchange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondurationchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondurationchange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondurationchange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondurationchange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondurationchange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@ondurationchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondurationchange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondurationchange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondurationchange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -531372695,
        "Kind": "Components.EventHandler",
        "Name": "onemptied",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onemptied' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onemptied",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onemptied:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onemptied:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onemptied",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onemptied' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onemptied"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onemptied' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onemptied' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1367718379,
        "Kind": "Components.EventHandler",
        "Name": "onpause",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpause' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpause",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpause:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpause:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpause",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onpause' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpause"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpause' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpause' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1362589462,
        "Kind": "Components.EventHandler",
        "Name": "onplay",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onplay",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onplay:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onplay:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onplay",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onplay"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onplay' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onplay' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1248680259,
        "Kind": "Components.EventHandler",
        "Name": "onplaying",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onplaying' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onplaying",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onplaying:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onplaying:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onplaying",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onplaying' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onplaying"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onplaying' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onplaying' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1123614847,
        "Kind": "Components.EventHandler",
        "Name": "onratechange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onratechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onratechange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onratechange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onratechange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onratechange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onratechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onratechange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onratechange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onratechange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1253881428,
        "Kind": "Components.EventHandler",
        "Name": "onseeked",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onseeked' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onseeked",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onseeked:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onseeked:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onseeked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onseeked' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onseeked"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onseeked' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onseeked' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1340186358,
        "Kind": "Components.EventHandler",
        "Name": "onseeking",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onseeking' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onseeking",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onseeking:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onseeking:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onseeking",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onseeking' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onseeking"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onseeking' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onseeking' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1320737479,
        "Kind": "Components.EventHandler",
        "Name": "onstalled",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onstalled' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onstalled",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onstalled:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onstalled:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onstalled",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onstalled' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onstalled"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onstalled' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onstalled' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1952962596,
        "Kind": "Components.EventHandler",
        "Name": "onstop",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onstop' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onstop",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onstop:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onstop:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onstop",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onstop' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onstop"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onstop' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onstop' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1800240964,
        "Kind": "Components.EventHandler",
        "Name": "onsuspend",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onsuspend' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onsuspend",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onsuspend:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onsuspend:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onsuspend",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onsuspend' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onsuspend"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onsuspend' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onsuspend' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 723722702,
        "Kind": "Components.EventHandler",
        "Name": "ontimeupdate",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontimeupdate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontimeupdate",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontimeupdate:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontimeupdate:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontimeupdate",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@ontimeupdate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontimeupdate"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontimeupdate' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontimeupdate' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 523773126,
        "Kind": "Components.EventHandler",
        "Name": "onvolumechange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onvolumechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onvolumechange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onvolumechange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onvolumechange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onvolumechange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onvolumechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onvolumechange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onvolumechange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onvolumechange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 548045117,
        "Kind": "Components.EventHandler",
        "Name": "onwaiting",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onwaiting' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onwaiting",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onwaiting:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onwaiting:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onwaiting",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onwaiting' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onwaiting"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onwaiting' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onwaiting' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -393647311,
        "Kind": "Components.EventHandler",
        "Name": "onloadstart",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onloadstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadstart",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadstart:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadstart:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onloadstart",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>",
            "Documentation": "Sets the '@onloadstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onloadstart"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadstart' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onloadstart' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ProgressEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1667927109,
        "Kind": "Components.EventHandler",
        "Name": "ontimeout",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontimeout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontimeout",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontimeout:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontimeout:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontimeout",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>",
            "Documentation": "Sets the '@ontimeout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontimeout"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontimeout' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontimeout' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ProgressEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1419129376,
        "Kind": "Components.EventHandler",
        "Name": "onabort",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onabort' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onabort",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onabort:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onabort:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onabort",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>",
            "Documentation": "Sets the '@onabort' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onabort"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onabort' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onabort' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ProgressEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1269631045,
        "Kind": "Components.EventHandler",
        "Name": "onload",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onload' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onload",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onload:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onload:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onload",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>",
            "Documentation": "Sets the '@onload' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onload"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onload' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onload' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ProgressEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1307672655,
        "Kind": "Components.EventHandler",
        "Name": "onloadend",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onloadend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadend",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadend:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadend:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onloadend",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>",
            "Documentation": "Sets the '@onloadend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onloadend"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadend' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onloadend' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ProgressEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1931450991,
        "Kind": "Components.EventHandler",
        "Name": "onprogress",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onprogress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onprogress",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onprogress:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onprogress:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onprogress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>",
            "Documentation": "Sets the '@onprogress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onprogress"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onprogress' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onprogress' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ProgressEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 273167920,
        "Kind": "Components.EventHandler",
        "Name": "onerror",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onerror' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ErrorEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onerror",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onerror:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onerror:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onerror",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ErrorEventArgs>",
            "Documentation": "Sets the '@onerror' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ErrorEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onerror"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onerror' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onerror' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ErrorEventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -254188894,
        "Kind": "Components.EventHandler",
        "Name": "onactivate",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onactivate",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onactivate:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onactivate:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onactivate",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onactivate"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onactivate' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onactivate' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 736534607,
        "Kind": "Components.EventHandler",
        "Name": "onbeforeactivate",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onbeforeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforeactivate",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforeactivate:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforeactivate:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onbeforeactivate",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onbeforeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onbeforeactivate"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforeactivate' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onbeforeactivate' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -576418864,
        "Kind": "Components.EventHandler",
        "Name": "onbeforedeactivate",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onbeforedeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforedeactivate",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforedeactivate:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforedeactivate:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onbeforedeactivate",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onbeforedeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onbeforedeactivate"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforedeactivate' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onbeforedeactivate' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 92070366,
        "Kind": "Components.EventHandler",
        "Name": "ondeactivate",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondeactivate",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondeactivate:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondeactivate:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondeactivate",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@ondeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondeactivate"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondeactivate' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondeactivate' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -898670711,
        "Kind": "Components.EventHandler",
        "Name": "onended",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onended' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onended",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onended:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onended:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onended",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onended' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onended"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onended' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onended' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 910123926,
        "Kind": "Components.EventHandler",
        "Name": "onfullscreenchange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onfullscreenchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfullscreenchange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfullscreenchange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfullscreenchange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onfullscreenchange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onfullscreenchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onfullscreenchange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfullscreenchange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onfullscreenchange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1130440834,
        "Kind": "Components.EventHandler",
        "Name": "onfullscreenerror",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onfullscreenerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfullscreenerror",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfullscreenerror:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfullscreenerror:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onfullscreenerror",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onfullscreenerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onfullscreenerror"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfullscreenerror' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onfullscreenerror' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1663078782,
        "Kind": "Components.EventHandler",
        "Name": "onloadeddata",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onloadeddata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadeddata",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadeddata:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadeddata:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onloadeddata",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onloadeddata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onloadeddata"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadeddata' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onloadeddata' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -2134752199,
        "Kind": "Components.EventHandler",
        "Name": "onloadedmetadata",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onloadedmetadata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadedmetadata",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadedmetadata:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadedmetadata:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onloadedmetadata",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onloadedmetadata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onloadedmetadata"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadedmetadata' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onloadedmetadata' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -390229012,
        "Kind": "Components.EventHandler",
        "Name": "onpointerlockchange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerlockchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerlockchange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerlockchange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerlockchange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerlockchange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onpointerlockchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerlockchange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerlockchange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerlockchange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1741970455,
        "Kind": "Components.EventHandler",
        "Name": "onpointerlockerror",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerlockerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerlockerror",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerlockerror:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerlockerror:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerlockerror",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onpointerlockerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerlockerror"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerlockerror' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerlockerror' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 1942743627,
        "Kind": "Components.EventHandler",
        "Name": "onreadystatechange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onreadystatechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onreadystatechange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onreadystatechange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onreadystatechange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onreadystatechange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onreadystatechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onreadystatechange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onreadystatechange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onreadystatechange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": 2105737803,
        "Kind": "Components.EventHandler",
        "Name": "onscroll",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onscroll' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onscroll",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onscroll:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onscroll:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onscroll",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onscroll' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onscroll"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onscroll' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onscroll' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -633917869,
        "Kind": "Components.EventHandler",
        "Name": "ontoggle",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontoggle' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontoggle",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontoggle:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontoggle:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontoggle",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@ontoggle' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontoggle"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontoggle' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontoggle' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers"
        }
      },
      {
        "HashCode": -1984669477,
        "Kind": "Components.EventHandler",
        "Name": "onmouseenter",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmouseenter' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseenter",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseenter:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseenter:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmouseenter",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onmouseenter' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmouseenter"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseenter' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmouseenter' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "MudBlazor.Events.EventHandlers"
        }
      },
      {
        "HashCode": 1150331954,
        "Kind": "Components.EventHandler",
        "Name": "onmouseleave",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmouseleave' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseleave",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseleave:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseleave:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmouseleave",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onmouseleave' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmouseleave"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseleave' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmouseleave' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "MudBlazor.Events.EventHandlers"
        }
      },
      {
        "HashCode": 863767719,
        "Kind": "Components.Splat",
        "Name": "Attributes",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Merges a collection of attributes into the current element or component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@attributes",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Splat",
            "Name": "@attributes",
            "TypeName": "System.Object",
            "Documentation": "Merges a collection of attributes into the current element or component.",
            "Metadata": {
              "Common.PropertyName": "Attributes",
              "Common.DirectiveAttribute": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Splat",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Attributes"
        }
      },
      {
        "HashCode": 721180916,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.Razor",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting elements containing attributes with URL expected values.\n            </summary>\n            <remarks>Resolves URLs starting with '~/' (relative to the application's 'webroot' setting) that are not\n            targeted by other <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" />s. Runs prior to other <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" />s to ensure\n            application-relative URLs are resolved.</remarks>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "itemid",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "href",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "applet",
            "Attributes": [
              {
                "Name": "archive",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "area",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "href",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "audio",
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "base",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "href",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "blockquote",
            "Attributes": [
              {
                "Name": "cite",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "formaction",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "del",
            "Attributes": [
              {
                "Name": "cite",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "embed",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "form",
            "Attributes": [
              {
                "Name": "action",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "html",
            "Attributes": [
              {
                "Name": "manifest",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "iframe",
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "img",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "img",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "srcset",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "formaction",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "ins",
            "Attributes": [
              {
                "Name": "cite",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "href",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "menuitem",
            "Attributes": [
              {
                "Name": "icon",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "object",
            "Attributes": [
              {
                "Name": "archive",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "object",
            "Attributes": [
              {
                "Name": "data",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "q",
            "Attributes": [
              {
                "Name": "cite",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "source",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "source",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "srcset",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "track",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "video",
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "video",
            "Attributes": [
              {
                "Name": "poster",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper"
        }
      },
      {
        "HashCode": 640215686,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;a&gt; elements.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-action"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-controller"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-area"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-page"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-page-handler"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-fragment"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-host"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-protocol"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-route"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-all-route-data"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-route-",
                "NameComparison": 1
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-action",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the action method.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Page\" /> is non-<c>null</c>.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-controller",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the controller.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Page\" /> is non-<c>null</c>.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Controller"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-area",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the area.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> is non-<c>null</c>.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Area"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-page",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the page.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Action\" />, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Controller\" />\n            is non-<c>null</c>.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Page"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-page-handler",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the page handler.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Action\" />, or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Controller\" />\n            is non-<c>null</c>.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "PageHandler"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-protocol",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The protocol for the URL, such as \"http\" or \"https\".\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Protocol"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-host",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The host name.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Host"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fragment",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The URL fragment name.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Fragment"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-route",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Name of the route.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if one of <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Action\" />, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Controller\" />, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Area\" />\n            or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Page\" /> is non-<c>null</c>.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Route"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-all-route-data",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.String>",
            "IndexerNamePrefix": "asp-route-",
            "IndexerTypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional parameters for the route.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RouteValues"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper"
        }
      },
      {
        "HashCode": -1910956490,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> implementation targeting &lt;cache&gt; elements.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "cache"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "priority",
            "TypeName": "Microsoft.Extensions.Caching.Memory.CacheItemPriority?",
            "Documentation": "\n            <summary>\n            Gets or sets the <see cref=\"T:Microsoft.Extensions.Caching.Memory.CacheItemPriority\" /> policy for the cache entry.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Priority"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a <see cref=\"T:System.String\" /> to vary the cached result by.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryBy"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-header",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a comma-delimited set of HTTP request headers to vary the cached result by.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryByHeader"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-query",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a comma-delimited set of query parameters to vary the cached result by.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryByQuery"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-route",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a comma-delimited set of route data parameters to vary the cached result by.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryByRoute"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-cookie",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a comma-delimited set of cookie names to vary the cached result by.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryByCookie"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-user",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or sets a value that determines if the cached result is to be varied by the Identity for the logged in\n            <see cref=\"P:Microsoft.AspNetCore.Http.HttpContext.User\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryByUser"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-culture",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or sets a value that determines if the cached result is to be varied by request culture.\n            <para>\n            Setting this to <c>true</c> would result in the result to be varied by <see cref=\"P:System.Globalization.CultureInfo.CurrentCulture\" />\n            and <see cref=\"P:System.Globalization.CultureInfo.CurrentUICulture\" />.\n            </para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryByCulture"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "expires-on",
            "TypeName": "System.DateTimeOffset?",
            "Documentation": "\n            <summary>\n            Gets or sets the exact <see cref=\"T:System.DateTimeOffset\" /> the cache entry should be evicted.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpiresOn"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "expires-after",
            "TypeName": "System.TimeSpan?",
            "Documentation": "\n            <summary>\n            Gets or sets the duration, from the time the cache entry was added, when it should be evicted.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpiresAfter"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "expires-sliding",
            "TypeName": "System.TimeSpan?",
            "Documentation": "\n            <summary>\n            Gets or sets the duration from last access that the cache entry should be evicted.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpiresSliding"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "enabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or sets the value which determines if the tag helper is enabled or not.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper"
        }
      },
      {
        "HashCode": 969691472,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            A <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> that renders a Razor component.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "component",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "params",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "IndexerNamePrefix": "param-",
            "IndexerTypeName": "System.Object",
            "Documentation": "\n            <summary>\n            Gets or sets values for component parameters.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Parameters"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "type",
            "TypeName": "System.Type",
            "Documentation": "\n            <summary>\n            Gets or sets the component type. This value is required.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ComponentType"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "render-mode",
            "TypeName": "Microsoft.AspNetCore.Mvc.Rendering.RenderMode",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            Gets or sets the <see cref=\"T:Microsoft.AspNetCore.Mvc.Rendering.RenderMode\" />\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RenderMode"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper"
        }
      },
      {
        "HashCode": 2101598101,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> implementation targeting &lt;distributed-cache&gt; elements.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "distributed-cache",
            "Attributes": [
              {
                "Name": "name"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "name",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a unique name to discriminate cached entries.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a <see cref=\"T:System.String\" /> to vary the cached result by.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryBy"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-header",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a comma-delimited set of HTTP request headers to vary the cached result by.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryByHeader"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-query",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a comma-delimited set of query parameters to vary the cached result by.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryByQuery"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-route",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a comma-delimited set of route data parameters to vary the cached result by.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryByRoute"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-cookie",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets a comma-delimited set of cookie names to vary the cached result by.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryByCookie"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-user",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or sets a value that determines if the cached result is to be varied by the Identity for the logged in\n            <see cref=\"P:Microsoft.AspNetCore.Http.HttpContext.User\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryByUser"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-culture",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or sets a value that determines if the cached result is to be varied by request culture.\n            <para>\n            Setting this to <c>true</c> would result in the result to be varied by <see cref=\"P:System.Globalization.CultureInfo.CurrentCulture\" />\n            and <see cref=\"P:System.Globalization.CultureInfo.CurrentUICulture\" />.\n            </para>\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "VaryByCulture"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "expires-on",
            "TypeName": "System.DateTimeOffset?",
            "Documentation": "\n            <summary>\n            Gets or sets the exact <see cref=\"T:System.DateTimeOffset\" /> the cache entry should be evicted.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpiresOn"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "expires-after",
            "TypeName": "System.TimeSpan?",
            "Documentation": "\n            <summary>\n            Gets or sets the duration, from the time the cache entry was added, when it should be evicted.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpiresAfter"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "expires-sliding",
            "TypeName": "System.TimeSpan?",
            "Documentation": "\n            <summary>\n            Gets or sets the duration from last access that the cache entry should be evicted.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ExpiresSliding"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "enabled",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Gets or sets the value which determines if the tag helper is enabled or not.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper"
        }
      },
      {
        "HashCode": -696402586,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;environment&gt; elements that conditionally renders\n            content based on the current value of <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\n            If the environment is not listed in the specified <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Names\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Include\" />,\n            or if it is in <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Exclude\" />, the content will not be rendered.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "environment"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "names",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma separated list of environment names in which the content should be rendered.\n            If the current environment is also in the <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Exclude\" /> list, the content will not be rendered.\n            </summary>\n            <remarks>\n            The specified environment names are compared case insensitively to the current value of\n            <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Names"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "include",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma separated list of environment names in which the content should be rendered.\n            If the current environment is also in the <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Exclude\" /> list, the content will not be rendered.\n            </summary>\n            <remarks>\n            The specified environment names are compared case insensitively to the current value of\n            <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Include"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "exclude",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma separated list of environment names in which the content will not be rendered.\n            </summary>\n            <remarks>\n            The specified environment names are compared case insensitively to the current value of\n            <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Exclude"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper"
        }
      },
      {
        "HashCode": 885307500,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;button&gt; elements and &lt;input&gt; elements with\n            their <c>type</c> attribute set to <c>image</c> or <c>submit</c>.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-action"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-controller"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-area"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-page"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-page-handler"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-fragment"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-route"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-all-route-data"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-route-",
                "NameComparison": 1
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-action"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-controller"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-area"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-page"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-page-handler"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-fragment"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-route"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-all-route-data"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-route-",
                "NameComparison": 1
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-action"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-controller"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-area"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-page"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-page-handler"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-fragment"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-route"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-all-route-data"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-route-",
                "NameComparison": 1
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-action",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the action method.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-controller",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the controller.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Controller"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-area",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the area.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Area"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-page",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the page.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Page"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-page-handler",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the page handler.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PageHandler"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fragment",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the URL fragment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Fragment"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-route",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Name of the route.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Action\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Controller\" /> is non-<c>null</c>.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Route"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-all-route-data",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.String>",
            "IndexerNamePrefix": "asp-route-",
            "IndexerTypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional parameters for the route.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RouteValues"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper"
        }
      },
      {
        "HashCode": 1753743183,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;form&gt; elements.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "form"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-action",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the action method.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-controller",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the controller.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Controller"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-area",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the area.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Area"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-page",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the page.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Page"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-page-handler",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the page handler.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PageHandler"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-antiforgery",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Whether the antiforgery token should be generated.\n            </summary>\n            <value>Defaults to <c>false</c> if user provides an <c>action</c> attribute\n            or if the <c>method</c> is <see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.FormMethod.Get\" />; <c>true</c> otherwise.</value>\n        ",
            "Metadata": {
              "Common.PropertyName": "Antiforgery"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fragment",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Gets or sets the URL fragment.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Fragment"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-route",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Name of the route.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Action\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Controller\" /> is non-<c>null</c>.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Route"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-all-route-data",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.String>",
            "IndexerNamePrefix": "asp-route-",
            "IndexerTypeName": "System.String",
            "Documentation": "\n            <summary>\n            Additional parameters for the route.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "RouteValues"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper"
        }
      },
      {
        "HashCode": 550285363,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;img&gt; elements that supports file versioning.\n            </summary>\n            <remarks>\n            The tag helper won't process for cases with just the 'src' attribute.\n            </remarks>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "img",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-append-version"
              },
              {
                "Name": "src"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "src",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Source of the image.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Src"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-append-version",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Value indicating if file version should be appended to the src urls.\n            </summary>\n            <remarks>\n            If <c>true</c> then a query string \"v\" with the encoded content of the file is added.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "AppendVersion"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper"
        }
      },
      {
        "HashCode": -637058581,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;input&gt; elements with an <c>asp-for</c> attribute.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-for"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-for",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression",
            "Documentation": "\n            <summary>\n            An expression to be evaluated against the current model.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-format",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The format string (see https://msdn.microsoft.com/en-us/library/txafckwd.aspx) used to format the\n            <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.For\" /> result. Sets the generated \"value\" attribute to that formatted string.\n            </summary>\n            <remarks>\n            Not used if the provided (see <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.InputTypeName\" />) or calculated \"type\" attribute value is\n            <c>checkbox</c>, <c>password</c>, or <c>radio</c>. That is, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Format\" /> is used when calling\n            <see cref=\"M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GenerateTextBox(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.Object,System.String,System.Object)\" />.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Format"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "type",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The type of the &lt;input&gt; element.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases. Also used to determine the <see cref=\"T:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator\" />\n            helper to call and the default <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Format\" /> value. A default <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Format\" /> is not calculated\n            if the provided (see <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.InputTypeName\" />) or calculated \"type\" attribute value is <c>checkbox</c>,\n            <c>hidden</c>, <c>password</c>, or <c>radio</c>.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "InputTypeName"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "name",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the &lt;input&gt; element.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases. Also used to determine whether <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.For\" /> is\n            valid with an empty <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.Name\" />.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The value of the &lt;input&gt; element.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases. Also used to determine the generated \"checked\" attribute\n            if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.InputTypeName\" /> is \"radio\". Must not be <c>null</c> in that case.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper"
        }
      },
      {
        "HashCode": -865802750,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;label&gt; elements with an <c>asp-for</c> attribute.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "label",
            "Attributes": [
              {
                "Name": "asp-for"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-for",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression",
            "Documentation": "\n            <summary>\n            An expression to be evaluated against the current model.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper"
        }
      },
      {
        "HashCode": -788836766,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;link&gt; elements that supports fallback href paths.\n            </summary>\n            <remarks>\n            The tag helper won't process for cases with just the 'href' attribute.\n            </remarks>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-href-include"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-href-exclude"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-fallback-href"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-fallback-href-include"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-fallback-href-exclude"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-fallback-test-class"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-fallback-test-property"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-fallback-test-value"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-append-version"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Address of the linked resource.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-href-include",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma separated list of globbed file patterns of CSS stylesheets to load.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HrefInclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-href-exclude",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma separated list of globbed file patterns of CSS stylesheets to exclude from loading.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.HrefInclude\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "HrefExclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-href",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The URL of a CSS stylesheet to fallback to in the case the primary one fails.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FallbackHref"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-suppress-fallback-integrity",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Boolean value that determines if an integrity hash will be compared with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SuppressFallbackIntegrity"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-append-version",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Value indicating if file version should be appended to the href urls.\n            </summary>\n            <remarks>\n            If <c>true</c> then a query string \"v\" with the encoded content of the file is added.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "AppendVersion"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-href-include",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma separated list of globbed file patterns of CSS stylesheets to fallback to in the case the primary\n            one fails.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FallbackHrefInclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-href-exclude",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma separated list of globbed file patterns of CSS stylesheets to exclude from the fallback list, in\n            the case the primary one fails.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FallbackHrefExclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-test-class",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The class name defined in the stylesheet to use for the fallback test.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestProperty\" /> and <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestValue\" />,\n            and either <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FallbackTestClass"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-test-property",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The CSS property name to use for the fallback test.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestClass\" /> and <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestValue\" />,\n            and either <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FallbackTestProperty"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-test-value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The CSS property value to use for the fallback test.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestClass\" /> and <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestProperty\" />,\n            and either <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FallbackTestValue"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper"
        }
      },
      {
        "HashCode": -90168567,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;option&gt; elements.\n            </summary>\n            <remarks>\n            This <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> works in conjunction with <see cref=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper\" />. It reads elements\n            content but does not modify that content. The only modification it makes is to add a <c>selected</c> attribute\n            in some cases.\n            </remarks>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "option"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "value",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Specifies a value for the &lt;option&gt; element.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper"
        }
      },
      {
        "HashCode": 136804552,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            Renders a partial view.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "partial",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "name"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "name",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name or path of the partial view that is rendered to the response.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "for",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression",
            "Documentation": "\n            <summary>\n            An expression to be evaluated against the current model. Cannot be used together with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.Model\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "model",
            "TypeName": "System.Object",
            "Documentation": "\n            <summary>\n            The model to pass into the partial view. Cannot be used together with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.For\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Model"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "optional",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            When optional, executing the tag helper will no-op if the view cannot be located.\n            Otherwise will throw stating the view could not be found.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Optional"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "fallback-name",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            View to lookup if the view specified by <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.Name\" /> cannot be located.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FallbackName"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "view-data",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary",
            "IndexerNamePrefix": "view-data-",
            "IndexerTypeName": "System.Object",
            "Documentation": "\n            <summary>\n            A <see cref=\"T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\" /> to pass into the partial view.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "ViewData"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper"
        }
      },
      {
        "HashCode": 680794473,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            A <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> that saves the state of Razor components rendered on the page up to that point.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "persist-component-state",
            "TagStructure": 2
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "persist-mode",
            "TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.PersistenceMode?",
            "Documentation": "\n            <summary>\n            Gets or sets the <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper.PersistenceMode\" /> for the state to persist.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "PersistenceMode"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper"
        }
      },
      {
        "HashCode": -2085280929,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;script&gt; elements that supports fallback src paths.\n            </summary>\n            <remarks>\n            The tag helper won't process for cases with just the 'src' attribute.\n            </remarks>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-src-include"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-src-exclude"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-fallback-src"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-fallback-src-include"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-fallback-src-exclude"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-fallback-test"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-append-version"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "src",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            Address of the external script to use.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Src"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-src-include",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma separated list of globbed file patterns of JavaScript scripts to load.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SrcInclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-src-exclude",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma separated list of globbed file patterns of JavaScript scripts to exclude from loading.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.SrcInclude\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SrcExclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-src",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The URL of a Script tag to fallback to in the case the primary one fails.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FallbackSrc"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-suppress-fallback-integrity",
            "TypeName": "System.Boolean",
            "Documentation": "\n            <summary>\n            Boolean value that determines if an integrity hash will be compared with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackSrc\" /> value.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "SuppressFallbackIntegrity"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-append-version",
            "TypeName": "System.Boolean?",
            "Documentation": "\n            <summary>\n            Value indicating if file version should be appended to src urls.\n            </summary>\n            <remarks>\n            A query string \"v\" with the encoded content of the file is added.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "AppendVersion"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-src-include",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma separated list of globbed file patterns of JavaScript scripts to fallback to in the case the\n            primary one fails.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FallbackSrcInclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-src-exclude",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            A comma separated list of globbed file patterns of JavaScript scripts to exclude from the fallback list, in\n            the case the primary one fails.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackSrcInclude\" />.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FallbackSrcExclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-test",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The script method defined in the primary script to use for the fallback test.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "FallbackTestExpression"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper"
        }
      },
      {
        "HashCode": 1372250445,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;select&gt; elements with <c>asp-for</c> and/or\n            <c>asp-items</c> attribute(s).\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "select",
            "Attributes": [
              {
                "Name": "asp-for"
              }
            ]
          },
          {
            "TagName": "select",
            "Attributes": [
              {
                "Name": "asp-items"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-for",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression",
            "Documentation": "\n            <summary>\n            An expression to be evaluated against the current model.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-items",
            "TypeName": "System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>",
            "Documentation": "\n            <summary>\n            A collection of <see cref=\"T:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem\" /> objects used to populate the &lt;select&gt; element with\n            &lt;optgroup&gt; and &lt;option&gt; elements.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "Items"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "name",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the &lt;input&gt; element.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases. Also used to determine whether <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.For\" /> is\n            valid with an empty <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.Name\" />.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper"
        }
      },
      {
        "HashCode": 828468065,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;textarea&gt; elements with an <c>asp-for</c> attribute.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "textarea",
            "Attributes": [
              {
                "Name": "asp-for"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-for",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression",
            "Documentation": "\n            <summary>\n            An expression to be evaluated against the current model.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "name",
            "TypeName": "System.String",
            "Documentation": "\n            <summary>\n            The name of the &lt;input&gt; element.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases. Also used to determine whether <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper.For\" /> is\n            valid with an empty <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.Name\" />.\n            </remarks>\n        ",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper"
        }
      },
      {
        "HashCode": -961912636,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting any HTML element with an <c>asp-validation-for</c>\n            attribute.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "span",
            "Attributes": [
              {
                "Name": "asp-validation-for"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-validation-for",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression",
            "Documentation": "\n            <summary>\n            Gets an expression to be evaluated against the current model.\n            </summary>\n        ",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper"
        }
      },
      {
        "HashCode": -330697272,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting any HTML element with an <c>asp-validation-summary</c>\n            attribute.\n            </summary>\n        ",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "div",
            "Attributes": [
              {
                "Name": "asp-validation-summary"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-validation-summary",
            "TypeName": "Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary",
            "IsEnum": true,
            "Documentation": "\n            <summary>\n            If <see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary.All\" /> or <see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary.ModelOnly\" />, appends a validation\n            summary. Otherwise (<see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary.None\" />, the default), this tag helper does nothing.\n            </summary>\n            <exception cref=\"T:System.ArgumentException\">\n            Thrown if setter is called with an undefined <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper.ValidationSummary\" /> value e.g.\n            <c>(ValidationSummary)23</c>.\n            </exception>\n        ",
            "Metadata": {
              "Common.PropertyName": "ValidationSummary"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "ITagHelper",
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper"
        }
      },
      {
        "HashCode": -657737141,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to an attribute and a change event, based on the naming of the bind attribute. For example: <code>@bind-value=\"...\"</code> and <code>@bind-value:event=\"onchange\"</code> will assign the current value of the expression to the 'value' attribute, and assign a delegate that attempts to set the value to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@bind-",
                "NameComparison": 1,
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-...",
            "TypeName": "System.Collections.Generic.Dictionary<string, object>",
            "IndexerNamePrefix": "@bind-",
            "IndexerTypeName": "System.Object",
            "Documentation": "Binds the provided expression to an attribute and a change event, based on the naming of the bind attribute. For example: <code>@bind-value=\"...\"</code> and <code>@bind-value:event=\"onchange\"</code> will assign the current value of the expression to the 'value' attribute, and assign a delegate that attempts to set the value to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the corresponding bind attribute. For example: <code>@bind-value:format=\"...\"</code> will apply a format string to the value specified in <code>@bind-value=\"...\"</code>. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-...' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.Fallback": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Bind"
        }
      },
      {
        "HashCode": -1119188173,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "False",
          "Components.Bind.Format": null,
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": -2087113141,
        "Kind": "Components.Bind",
        "Name": "Bind_value",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "@bind-value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-value",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind_value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "False",
          "Components.Bind.Format": null,
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": 1329053916,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'checked' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "checkbox",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'checked' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_checked"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_checked"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-checked",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_checked"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "checked",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "False",
          "Components.Bind.Format": null,
          "Components.Bind.TypeAttribute": "checkbox",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": -1880481328,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "text",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "False",
          "Components.Bind.Format": null,
          "Components.Bind.TypeAttribute": "text",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": -531980505,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "number",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.Format": null,
          "Components.Bind.TypeAttribute": "number",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": 569590843,
        "Kind": "Components.Bind",
        "Name": "Bind_value",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "number",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-value",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind_value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.Format": null,
          "Components.Bind.TypeAttribute": "number",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": -1601658773,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "date",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.Format": "yyyy-MM-dd",
          "Components.Bind.TypeAttribute": "date",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": -921455411,
        "Kind": "Components.Bind",
        "Name": "Bind_value",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "date",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-value",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind_value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.Format": "yyyy-MM-dd",
          "Components.Bind.TypeAttribute": "date",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": 1188303982,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "datetime-local",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.Format": "yyyy-MM-ddTHH:mm:ss",
          "Components.Bind.TypeAttribute": "datetime-local",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": -635830132,
        "Kind": "Components.Bind",
        "Name": "Bind_value",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "datetime-local",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-value",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind_value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.Format": "yyyy-MM-ddTHH:mm:ss",
          "Components.Bind.TypeAttribute": "datetime-local",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": 1931975695,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "month",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.Format": "yyyy-MM",
          "Components.Bind.TypeAttribute": "month",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": 1729541585,
        "Kind": "Components.Bind",
        "Name": "Bind_value",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "month",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-value",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind_value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.Format": "yyyy-MM",
          "Components.Bind.TypeAttribute": "month",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": 1166731548,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "time",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.Format": "HH:mm:ss",
          "Components.Bind.TypeAttribute": "time",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": 372567596,
        "Kind": "Components.Bind",
        "Name": "Bind_value",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "time",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-value",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind_value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.Format": "HH:mm:ss",
          "Components.Bind.TypeAttribute": "time",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": 677344642,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "select",
            "Attributes": [
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "False",
          "Components.Bind.Format": null,
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": 1055705976,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "textarea",
            "Attributes": [
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Common.ClassifyAttributesOnly": "True",
          "Components.Bind.ValueAttribute": "value",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.IsInvariantCulture": "False",
          "Components.Bind.Format": null,
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes"
        }
      },
      {
        "HashCode": -117575399,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputCheckbox",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox"
        }
      },
      {
        "HashCode": -586016001,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1372638108,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputDate",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>"
        }
      },
      {
        "HashCode": 1026823249,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputDate",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -458420273,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputNumber",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>"
        }
      },
      {
        "HashCode": -1810379128,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputNumber",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1917951076,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputRadioGroup",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>"
        }
      },
      {
        "HashCode": 143649415,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1939397747,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputSelect",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>"
        }
      },
      {
        "HashCode": 602106045,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputSelect",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -165778212,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputText",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputText",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputText"
        }
      },
      {
        "HashCode": -546439606,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputText",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputText",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputText",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 338366891,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputTextArea",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputTextArea"
        }
      },
      {
        "HashCode": -313178628,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1415259032,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudBooleanInput<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBooleanInput",
            "Attributes": [
              {
                "Name": "@bind-Checked",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Checked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Checked"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Checked",
          "Components.Bind.ChangeAttribute": "CheckedChanged",
          "Common.TypeName": "MudBlazor.MudBooleanInput<T>"
        }
      },
      {
        "HashCode": -823044297,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudBooleanInput<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudBooleanInput",
            "Attributes": [
              {
                "Name": "@bind-Checked",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Checked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Checked"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Checked",
          "Components.Bind.ChangeAttribute": "CheckedChanged",
          "Common.TypeName": "MudBlazor.MudBooleanInput<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -402113057,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudAutocomplete<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudAutocomplete",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudAutocomplete<T>"
        }
      },
      {
        "HashCode": 1802369528,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudAutocomplete<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudAutocomplete",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudAutocomplete<T>"
        }
      },
      {
        "HashCode": 1925530135,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudAutocomplete<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudAutocomplete",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudAutocomplete<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1582517837,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudAutocomplete<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudAutocomplete",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudAutocomplete<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2048674989,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudToggleIconButton",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Toggled' property and a change event delegate to the 'ToggledChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudToggleIconButton",
            "Attributes": [
              {
                "Name": "@bind-Toggled",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Toggled",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Toggled' property and a change event delegate to the 'ToggledChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Toggled"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Toggled",
          "Components.Bind.ChangeAttribute": "ToggledChanged",
          "Common.TypeName": "MudBlazor.MudToggleIconButton"
        }
      },
      {
        "HashCode": -804362528,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudToggleIconButton",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Toggled' property and a change event delegate to the 'ToggledChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudToggleIconButton",
            "Attributes": [
              {
                "Name": "@bind-Toggled",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Toggled",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Toggled' property and a change event delegate to the 'ToggledChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Toggled"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Toggled",
          "Components.Bind.ChangeAttribute": "ToggledChanged",
          "Common.TypeName": "MudBlazor.MudToggleIconButton",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1289669570,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudCarousel<TData>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudCarousel",
            "Attributes": [
              {
                "Name": "@bind-SelectedIndex",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedIndex",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedIndex"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedIndex",
          "Components.Bind.ChangeAttribute": "SelectedIndexChanged",
          "Common.TypeName": "MudBlazor.MudCarousel<TData>"
        }
      },
      {
        "HashCode": -80797408,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudCarousel<TData>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudCarousel",
            "Attributes": [
              {
                "Name": "@bind-SelectedIndex",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedIndex",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedIndex"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedIndex",
          "Components.Bind.ChangeAttribute": "SelectedIndexChanged",
          "Common.TypeName": "MudBlazor.MudCarousel<TData>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1294600017,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudCheckBox<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudCheckBox",
            "Attributes": [
              {
                "Name": "@bind-Checked",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Checked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Checked"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Checked",
          "Components.Bind.ChangeAttribute": "CheckedChanged",
          "Common.TypeName": "MudBlazor.MudCheckBox<T>"
        }
      },
      {
        "HashCode": -71610887,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudCheckBox<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudCheckBox",
            "Attributes": [
              {
                "Name": "@bind-Checked",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Checked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Checked"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Checked",
          "Components.Bind.ChangeAttribute": "CheckedChanged",
          "Common.TypeName": "MudBlazor.MudCheckBox<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1205105733,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudChipSet",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedChip' property and a change event delegate to the 'SelectedChipChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudChipSet",
            "Attributes": [
              {
                "Name": "@bind-SelectedChip",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedChip",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.MudChip>",
            "Documentation": "Binds the provided expression to the 'SelectedChip' property and a change event delegate to the 'SelectedChipChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedChip"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedChip",
          "Components.Bind.ChangeAttribute": "SelectedChipChanged",
          "Common.TypeName": "MudBlazor.MudChipSet"
        }
      },
      {
        "HashCode": -1121782754,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudChipSet",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedChips' property and a change event delegate to the 'SelectedChipsChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudChipSet",
            "Attributes": [
              {
                "Name": "@bind-SelectedChips",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedChips",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.MudChip[]>",
            "Documentation": "Binds the provided expression to the 'SelectedChips' property and a change event delegate to the 'SelectedChipsChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedChips"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedChips",
          "Components.Bind.ChangeAttribute": "SelectedChipsChanged",
          "Common.TypeName": "MudBlazor.MudChipSet"
        }
      },
      {
        "HashCode": 1128676545,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudChipSet",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedValues' property and a change event delegate to the 'SelectedValuesChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudChipSet",
            "Attributes": [
              {
                "Name": "@bind-SelectedValues",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedValues",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.ICollection<System.Object>>",
            "Documentation": "Binds the provided expression to the 'SelectedValues' property and a change event delegate to the 'SelectedValuesChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedValues"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedValues",
          "Components.Bind.ChangeAttribute": "SelectedValuesChanged",
          "Common.TypeName": "MudBlazor.MudChipSet"
        }
      },
      {
        "HashCode": 922630197,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudChipSet",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedChip' property and a change event delegate to the 'SelectedChipChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudChipSet",
            "Attributes": [
              {
                "Name": "@bind-SelectedChip",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedChip",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.MudChip>",
            "Documentation": "Binds the provided expression to the 'SelectedChip' property and a change event delegate to the 'SelectedChipChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedChip"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedChip",
          "Components.Bind.ChangeAttribute": "SelectedChipChanged",
          "Common.TypeName": "MudBlazor.MudChipSet",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 713703276,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudChipSet",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedChips' property and a change event delegate to the 'SelectedChipsChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudChipSet",
            "Attributes": [
              {
                "Name": "@bind-SelectedChips",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedChips",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.MudChip[]>",
            "Documentation": "Binds the provided expression to the 'SelectedChips' property and a change event delegate to the 'SelectedChipsChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedChips"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedChips",
          "Components.Bind.ChangeAttribute": "SelectedChipsChanged",
          "Common.TypeName": "MudBlazor.MudChipSet",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 313288833,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudChipSet",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedValues' property and a change event delegate to the 'SelectedValuesChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudChipSet",
            "Attributes": [
              {
                "Name": "@bind-SelectedValues",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedValues",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.ICollection<System.Object>>",
            "Documentation": "Binds the provided expression to the 'SelectedValues' property and a change event delegate to the 'SelectedValuesChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedValues"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedValues",
          "Components.Bind.ChangeAttribute": "SelectedValuesChanged",
          "Common.TypeName": "MudBlazor.MudChipSet",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1940149191,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudCollapse",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudCollapse",
            "Attributes": [
              {
                "Name": "@bind-Expanded",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Expanded",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Expanded"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Expanded",
          "Components.Bind.ChangeAttribute": "ExpandedChanged",
          "Common.TypeName": "MudBlazor.MudCollapse"
        }
      },
      {
        "HashCode": -425029165,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudCollapse",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudCollapse",
            "Attributes": [
              {
                "Name": "@bind-Expanded",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Expanded",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Expanded"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Expanded",
          "Components.Bind.ChangeAttribute": "ExpandedChanged",
          "Common.TypeName": "MudBlazor.MudCollapse",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1581147625,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudColorPicker",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudColorPicker",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.Utilities.MudColor>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudColorPicker"
        }
      },
      {
        "HashCode": 1102601931,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudColorPicker",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudColorPicker",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudColorPicker"
        }
      },
      {
        "HashCode": 1033457259,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudColorPicker",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudColorPicker",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.Utilities.MudColor>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudColorPicker",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1207148622,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudColorPicker",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudColorPicker",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudColorPicker",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2112618460,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.Column<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Column",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.Column<T>"
        }
      },
      {
        "HashCode": 304376924,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.Column<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Hidden' property and a change event delegate to the 'HiddenChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Column",
            "Attributes": [
              {
                "Name": "@bind-Hidden",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Hidden",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Hidden' property and a change event delegate to the 'HiddenChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Hidden"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Hidden",
          "Components.Bind.ChangeAttribute": "HiddenChanged",
          "Common.TypeName": "MudBlazor.Column<T>"
        }
      },
      {
        "HashCode": -1682581362,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.Column<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.Column",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.Column<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1675863118,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.Column<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Hidden' property and a change event delegate to the 'HiddenChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.Column",
            "Attributes": [
              {
                "Name": "@bind-Hidden",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Hidden",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Hidden' property and a change event delegate to the 'HiddenChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Hidden"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Hidden",
          "Components.Bind.ChangeAttribute": "HiddenChanged",
          "Common.TypeName": "MudBlazor.Column<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1870920633,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudDataGrid<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDataGrid",
            "Attributes": [
              {
                "Name": "@bind-SelectedItem",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedItem",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedItem"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedItem",
          "Components.Bind.ChangeAttribute": "SelectedItemChanged",
          "Common.TypeName": "MudBlazor.MudDataGrid<T>"
        }
      },
      {
        "HashCode": -99270457,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudDataGrid<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedItems' property and a change event delegate to the 'SelectedItemsChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDataGrid",
            "Attributes": [
              {
                "Name": "@bind-SelectedItems",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedItems",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.HashSet<T>>",
            "Documentation": "Binds the provided expression to the 'SelectedItems' property and a change event delegate to the 'SelectedItemsChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedItems"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedItems",
          "Components.Bind.ChangeAttribute": "SelectedItemsChanged",
          "Common.TypeName": "MudBlazor.MudDataGrid<T>"
        }
      },
      {
        "HashCode": 662483024,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudDataGrid<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDataGrid",
            "Attributes": [
              {
                "Name": "@bind-SelectedItem",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedItem",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedItem"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedItem",
          "Components.Bind.ChangeAttribute": "SelectedItemChanged",
          "Common.TypeName": "MudBlazor.MudDataGrid<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -611399076,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudDataGrid<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedItems' property and a change event delegate to the 'SelectedItemsChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDataGrid",
            "Attributes": [
              {
                "Name": "@bind-SelectedItems",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedItems",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.HashSet<T>>",
            "Documentation": "Binds the provided expression to the 'SelectedItems' property and a change event delegate to the 'SelectedItemsChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedItems"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedItems",
          "Components.Bind.ChangeAttribute": "SelectedItemsChanged",
          "Common.TypeName": "MudBlazor.MudDataGrid<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 800101985,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudDatePicker",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Date' property and a change event delegate to the 'DateChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDatePicker",
            "Attributes": [
              {
                "Name": "@bind-Date",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Date",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.DateTime?>",
            "Documentation": "Binds the provided expression to the 'Date' property and a change event delegate to the 'DateChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Date"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Date",
          "Components.Bind.ChangeAttribute": "DateChanged",
          "Common.TypeName": "MudBlazor.MudDatePicker"
        }
      },
      {
        "HashCode": -1300203684,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudDatePicker",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'PickerMonth' property and a change event delegate to the 'PickerMonthChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDatePicker",
            "Attributes": [
              {
                "Name": "@bind-PickerMonth",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-PickerMonth",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.DateTime?>",
            "Documentation": "Binds the provided expression to the 'PickerMonth' property and a change event delegate to the 'PickerMonthChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "PickerMonth"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "PickerMonth",
          "Components.Bind.ChangeAttribute": "PickerMonthChanged",
          "Common.TypeName": "MudBlazor.MudDatePicker"
        }
      },
      {
        "HashCode": 1369108629,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudDatePicker",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDatePicker",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudDatePicker"
        }
      },
      {
        "HashCode": 454360263,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudDatePicker",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Date' property and a change event delegate to the 'DateChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDatePicker",
            "Attributes": [
              {
                "Name": "@bind-Date",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Date",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.DateTime?>",
            "Documentation": "Binds the provided expression to the 'Date' property and a change event delegate to the 'DateChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Date"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Date",
          "Components.Bind.ChangeAttribute": "DateChanged",
          "Common.TypeName": "MudBlazor.MudDatePicker",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1156641298,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudDatePicker",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'PickerMonth' property and a change event delegate to the 'PickerMonthChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDatePicker",
            "Attributes": [
              {
                "Name": "@bind-PickerMonth",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-PickerMonth",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.DateTime?>",
            "Documentation": "Binds the provided expression to the 'PickerMonth' property and a change event delegate to the 'PickerMonthChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "PickerMonth"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "PickerMonth",
          "Components.Bind.ChangeAttribute": "PickerMonthChanged",
          "Common.TypeName": "MudBlazor.MudDatePicker",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1804606454,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudDatePicker",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDatePicker",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudDatePicker",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1358641428,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudDateRangePicker",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'DateRange' property and a change event delegate to the 'DateRangeChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDateRangePicker",
            "Attributes": [
              {
                "Name": "@bind-DateRange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-DateRange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.DateRange>",
            "Documentation": "Binds the provided expression to the 'DateRange' property and a change event delegate to the 'DateRangeChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "DateRange"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "DateRange",
          "Components.Bind.ChangeAttribute": "DateRangeChanged",
          "Common.TypeName": "MudBlazor.MudDateRangePicker"
        }
      },
      {
        "HashCode": 540953868,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudDateRangePicker",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'PickerMonth' property and a change event delegate to the 'PickerMonthChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDateRangePicker",
            "Attributes": [
              {
                "Name": "@bind-PickerMonth",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-PickerMonth",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.DateTime?>",
            "Documentation": "Binds the provided expression to the 'PickerMonth' property and a change event delegate to the 'PickerMonthChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "PickerMonth"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "PickerMonth",
          "Components.Bind.ChangeAttribute": "PickerMonthChanged",
          "Common.TypeName": "MudBlazor.MudDateRangePicker"
        }
      },
      {
        "HashCode": -1192264633,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudDateRangePicker",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDateRangePicker",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudDateRangePicker"
        }
      },
      {
        "HashCode": -436568880,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudDateRangePicker",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'DateRange' property and a change event delegate to the 'DateRangeChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDateRangePicker",
            "Attributes": [
              {
                "Name": "@bind-DateRange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-DateRange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.DateRange>",
            "Documentation": "Binds the provided expression to the 'DateRange' property and a change event delegate to the 'DateRangeChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "DateRange"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "DateRange",
          "Components.Bind.ChangeAttribute": "DateRangeChanged",
          "Common.TypeName": "MudBlazor.MudDateRangePicker",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 180524054,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudDateRangePicker",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'PickerMonth' property and a change event delegate to the 'PickerMonthChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDateRangePicker",
            "Attributes": [
              {
                "Name": "@bind-PickerMonth",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-PickerMonth",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.DateTime?>",
            "Documentation": "Binds the provided expression to the 'PickerMonth' property and a change event delegate to the 'PickerMonthChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "PickerMonth"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "PickerMonth",
          "Components.Bind.ChangeAttribute": "PickerMonthChanged",
          "Common.TypeName": "MudBlazor.MudDateRangePicker",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 674275446,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudDateRangePicker",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDateRangePicker",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudDateRangePicker",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1555781819,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudDialog",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'IsVisible' property and a change event delegate to the 'IsVisibleChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDialog",
            "Attributes": [
              {
                "Name": "@bind-IsVisible",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-IsVisible",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'IsVisible' property and a change event delegate to the 'IsVisibleChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "IsVisible"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "IsVisible",
          "Components.Bind.ChangeAttribute": "IsVisibleChanged",
          "Common.TypeName": "MudBlazor.MudDialog"
        }
      },
      {
        "HashCode": -1387550412,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudDialog",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'IsVisible' property and a change event delegate to the 'IsVisibleChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDialog",
            "Attributes": [
              {
                "Name": "@bind-IsVisible",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-IsVisible",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'IsVisible' property and a change event delegate to the 'IsVisibleChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "IsVisible"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "IsVisible",
          "Components.Bind.ChangeAttribute": "IsVisibleChanged",
          "Common.TypeName": "MudBlazor.MudDialog",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 180237947,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudDrawer",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Open' property and a change event delegate to the 'OpenChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDrawer",
            "Attributes": [
              {
                "Name": "@bind-Open",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Open",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Open' property and a change event delegate to the 'OpenChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Open"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Open",
          "Components.Bind.ChangeAttribute": "OpenChanged",
          "Common.TypeName": "MudBlazor.MudDrawer"
        }
      },
      {
        "HashCode": -286730286,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudDrawer",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Open' property and a change event delegate to the 'OpenChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDrawer",
            "Attributes": [
              {
                "Name": "@bind-Open",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Open",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Open' property and a change event delegate to the 'OpenChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Open"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Open",
          "Components.Bind.ChangeAttribute": "OpenChanged",
          "Common.TypeName": "MudBlazor.MudDrawer",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2039656301,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudElement",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Ref' property and a change event delegate to the 'RefChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudElement",
            "Attributes": [
              {
                "Name": "@bind-Ref",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Ref",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ElementReference>",
            "Documentation": "Binds the provided expression to the 'Ref' property and a change event delegate to the 'RefChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Ref"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Ref",
          "Components.Bind.ChangeAttribute": "RefChanged",
          "Common.TypeName": "MudBlazor.MudElement"
        }
      },
      {
        "HashCode": 1682181108,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudElement",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Ref' property and a change event delegate to the 'RefChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudElement",
            "Attributes": [
              {
                "Name": "@bind-Ref",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Ref",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ElementReference>",
            "Documentation": "Binds the provided expression to the 'Ref' property and a change event delegate to the 'RefChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Ref"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Ref",
          "Components.Bind.ChangeAttribute": "RefChanged",
          "Common.TypeName": "MudBlazor.MudElement",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -726718071,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudExpansionPanel",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'IsExpanded' property and a change event delegate to the 'IsExpandedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudExpansionPanel",
            "Attributes": [
              {
                "Name": "@bind-IsExpanded",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-IsExpanded",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'IsExpanded' property and a change event delegate to the 'IsExpandedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "IsExpanded"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "IsExpanded",
          "Components.Bind.ChangeAttribute": "IsExpandedChanged",
          "Common.TypeName": "MudBlazor.MudExpansionPanel"
        }
      },
      {
        "HashCode": -149588669,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudExpansionPanel",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'IsExpanded' property and a change event delegate to the 'IsExpandedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudExpansionPanel",
            "Attributes": [
              {
                "Name": "@bind-IsExpanded",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-IsExpanded",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'IsExpanded' property and a change event delegate to the 'IsExpandedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "IsExpanded"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "IsExpanded",
          "Components.Bind.ChangeAttribute": "IsExpandedChanged",
          "Common.TypeName": "MudBlazor.MudExpansionPanel",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1624450632,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudForm",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'IsValid' property and a change event delegate to the 'IsValidChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudForm",
            "Attributes": [
              {
                "Name": "@bind-IsValid",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-IsValid",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'IsValid' property and a change event delegate to the 'IsValidChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "IsValid"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "IsValid",
          "Components.Bind.ChangeAttribute": "IsValidChanged",
          "Common.TypeName": "MudBlazor.MudForm"
        }
      },
      {
        "HashCode": -2015059446,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudForm",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'IsTouched' property and a change event delegate to the 'IsTouchedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudForm",
            "Attributes": [
              {
                "Name": "@bind-IsTouched",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-IsTouched",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'IsTouched' property and a change event delegate to the 'IsTouchedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "IsTouched"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "IsTouched",
          "Components.Bind.ChangeAttribute": "IsTouchedChanged",
          "Common.TypeName": "MudBlazor.MudForm"
        }
      },
      {
        "HashCode": 1781690690,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudForm",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Errors' property and a change event delegate to the 'ErrorsChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudForm",
            "Attributes": [
              {
                "Name": "@bind-Errors",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Errors",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String[]>",
            "Documentation": "Binds the provided expression to the 'Errors' property and a change event delegate to the 'ErrorsChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Errors"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Errors",
          "Components.Bind.ChangeAttribute": "ErrorsChanged",
          "Common.TypeName": "MudBlazor.MudForm"
        }
      },
      {
        "HashCode": -327283885,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudForm",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'IsValid' property and a change event delegate to the 'IsValidChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudForm",
            "Attributes": [
              {
                "Name": "@bind-IsValid",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-IsValid",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'IsValid' property and a change event delegate to the 'IsValidChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "IsValid"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "IsValid",
          "Components.Bind.ChangeAttribute": "IsValidChanged",
          "Common.TypeName": "MudBlazor.MudForm",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1607911210,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudForm",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'IsTouched' property and a change event delegate to the 'IsTouchedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudForm",
            "Attributes": [
              {
                "Name": "@bind-IsTouched",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-IsTouched",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'IsTouched' property and a change event delegate to the 'IsTouchedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "IsTouched"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "IsTouched",
          "Components.Bind.ChangeAttribute": "IsTouchedChanged",
          "Common.TypeName": "MudBlazor.MudForm",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1724499999,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudForm",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Errors' property and a change event delegate to the 'ErrorsChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudForm",
            "Attributes": [
              {
                "Name": "@bind-Errors",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Errors",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String[]>",
            "Documentation": "Binds the provided expression to the 'Errors' property and a change event delegate to the 'ErrorsChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Errors"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Errors",
          "Components.Bind.ChangeAttribute": "ErrorsChanged",
          "Common.TypeName": "MudBlazor.MudForm",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -860389938,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudHidden",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'IsHidden' property and a change event delegate to the 'IsHiddenChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudHidden",
            "Attributes": [
              {
                "Name": "@bind-IsHidden",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-IsHidden",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'IsHidden' property and a change event delegate to the 'IsHiddenChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "IsHidden"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "IsHidden",
          "Components.Bind.ChangeAttribute": "IsHiddenChanged",
          "Common.TypeName": "MudBlazor.MudHidden"
        }
      },
      {
        "HashCode": 1698391034,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudHidden",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'IsHidden' property and a change event delegate to the 'IsHiddenChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudHidden",
            "Attributes": [
              {
                "Name": "@bind-IsHidden",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-IsHidden",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'IsHidden' property and a change event delegate to the 'IsHiddenChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "IsHidden"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "IsHidden",
          "Components.Bind.ChangeAttribute": "IsHiddenChanged",
          "Common.TypeName": "MudBlazor.MudHidden",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1232163707,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudInput<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudInput",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudInput<T>"
        }
      },
      {
        "HashCode": 190639570,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudInput<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudInput",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudInput<T>"
        }
      },
      {
        "HashCode": -2048051474,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudInput<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudInput",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudInput<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -624796434,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudInput<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudInput",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudInput<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1034509363,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudInputString",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudInputString",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudInputString"
        }
      },
      {
        "HashCode": -2003333817,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudInputString",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudInputString",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudInputString"
        }
      },
      {
        "HashCode": -1150858921,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudInputString",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudInputString",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudInputString",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 769100908,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudInputString",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudInputString",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudInputString",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2107857468,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudRangeInput<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudRangeInput",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudRangeInput<T>"
        }
      },
      {
        "HashCode": -1719610208,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudRangeInput<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudRangeInput",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.Range<T>>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudRangeInput<T>"
        }
      },
      {
        "HashCode": 987712368,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudRangeInput<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudRangeInput",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudRangeInput<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1426535727,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudRangeInput<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudRangeInput",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.Range<T>>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudRangeInput<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1497199451,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudList",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudList",
            "Attributes": [
              {
                "Name": "@bind-SelectedItem",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedItem",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.MudListItem>",
            "Documentation": "Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedItem"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedItem",
          "Components.Bind.ChangeAttribute": "SelectedItemChanged",
          "Common.TypeName": "MudBlazor.MudList"
        }
      },
      {
        "HashCode": 361336882,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudList",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedValue' property and a change event delegate to the 'SelectedValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudList",
            "Attributes": [
              {
                "Name": "@bind-SelectedValue",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedValue",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Object>",
            "Documentation": "Binds the provided expression to the 'SelectedValue' property and a change event delegate to the 'SelectedValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedValue"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedValue",
          "Components.Bind.ChangeAttribute": "SelectedValueChanged",
          "Common.TypeName": "MudBlazor.MudList"
        }
      },
      {
        "HashCode": -1991845480,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudList",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudList",
            "Attributes": [
              {
                "Name": "@bind-SelectedItem",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedItem",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.MudListItem>",
            "Documentation": "Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedItem"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedItem",
          "Components.Bind.ChangeAttribute": "SelectedItemChanged",
          "Common.TypeName": "MudBlazor.MudList",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1241887776,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudList",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedValue' property and a change event delegate to the 'SelectedValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudList",
            "Attributes": [
              {
                "Name": "@bind-SelectedValue",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedValue",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Object>",
            "Documentation": "Binds the provided expression to the 'SelectedValue' property and a change event delegate to the 'SelectedValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedValue"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedValue",
          "Components.Bind.ChangeAttribute": "SelectedValueChanged",
          "Common.TypeName": "MudBlazor.MudList",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 231969453,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudListItem",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudListItem",
            "Attributes": [
              {
                "Name": "@bind-Expanded",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Expanded",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Expanded"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Expanded",
          "Components.Bind.ChangeAttribute": "ExpandedChanged",
          "Common.TypeName": "MudBlazor.MudListItem"
        }
      },
      {
        "HashCode": 1806431982,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudListItem",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudListItem",
            "Attributes": [
              {
                "Name": "@bind-Expanded",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Expanded",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Expanded"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Expanded",
          "Components.Bind.ChangeAttribute": "ExpandedChanged",
          "Common.TypeName": "MudBlazor.MudListItem",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -157982567,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudMask",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudMask",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudMask"
        }
      },
      {
        "HashCode": -1711056450,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudMask",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudMask",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudMask"
        }
      },
      {
        "HashCode": -1791794298,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudMask",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudMask",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudMask",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1334023335,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudMask",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudMask",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudMask",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 2130213055,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudMessageBox",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'IsVisible' property and a change event delegate to the 'IsVisibleChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudMessageBox",
            "Attributes": [
              {
                "Name": "@bind-IsVisible",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-IsVisible",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'IsVisible' property and a change event delegate to the 'IsVisibleChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "IsVisible"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "IsVisible",
          "Components.Bind.ChangeAttribute": "IsVisibleChanged",
          "Common.TypeName": "MudBlazor.MudMessageBox"
        }
      },
      {
        "HashCode": -107311379,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudMessageBox",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'IsVisible' property and a change event delegate to the 'IsVisibleChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudMessageBox",
            "Attributes": [
              {
                "Name": "@bind-IsVisible",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-IsVisible",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'IsVisible' property and a change event delegate to the 'IsVisibleChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "IsVisible"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "IsVisible",
          "Components.Bind.ChangeAttribute": "IsVisibleChanged",
          "Common.TypeName": "MudBlazor.MudMessageBox",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -41307855,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudNavGroup",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudNavGroup",
            "Attributes": [
              {
                "Name": "@bind-Expanded",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Expanded",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Expanded"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Expanded",
          "Components.Bind.ChangeAttribute": "ExpandedChanged",
          "Common.TypeName": "MudBlazor.MudNavGroup"
        }
      },
      {
        "HashCode": 1190934629,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudNavGroup",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudNavGroup",
            "Attributes": [
              {
                "Name": "@bind-Expanded",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Expanded",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Expanded"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Expanded",
          "Components.Bind.ChangeAttribute": "ExpandedChanged",
          "Common.TypeName": "MudBlazor.MudNavGroup",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -203594852,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudNumericField<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudNumericField",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudNumericField<T>"
        }
      },
      {
        "HashCode": -1447301313,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudNumericField<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudNumericField",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudNumericField<T>"
        }
      },
      {
        "HashCode": 169622283,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudNumericField<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudNumericField",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudNumericField<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1281748708,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudNumericField<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudNumericField",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudNumericField<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1850203699,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudOverlay",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudOverlay",
            "Attributes": [
              {
                "Name": "@bind-Visible",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Visible",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Visible"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Visible",
          "Components.Bind.ChangeAttribute": "VisibleChanged",
          "Common.TypeName": "MudBlazor.MudOverlay"
        }
      },
      {
        "HashCode": 1390565126,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudOverlay",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudOverlay",
            "Attributes": [
              {
                "Name": "@bind-Visible",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Visible",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Visible"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Visible",
          "Components.Bind.ChangeAttribute": "VisibleChanged",
          "Common.TypeName": "MudBlazor.MudOverlay",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -188444811,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudPagination",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Selected' property and a change event delegate to the 'SelectedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudPagination",
            "Attributes": [
              {
                "Name": "@bind-Selected",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Selected",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'Selected' property and a change event delegate to the 'SelectedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Selected"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Selected",
          "Components.Bind.ChangeAttribute": "SelectedChanged",
          "Common.TypeName": "MudBlazor.MudPagination"
        }
      },
      {
        "HashCode": -828566065,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudPagination",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Selected' property and a change event delegate to the 'SelectedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudPagination",
            "Attributes": [
              {
                "Name": "@bind-Selected",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Selected",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'Selected' property and a change event delegate to the 'SelectedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Selected"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Selected",
          "Components.Bind.ChangeAttribute": "SelectedChanged",
          "Common.TypeName": "MudBlazor.MudPagination",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1509428171,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudPicker<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudPicker",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudPicker<T>"
        }
      },
      {
        "HashCode": -2074052968,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudPicker<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudPicker",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudPicker<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1406234759,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudRadioGroup<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedOption' property and a change event delegate to the 'SelectedOptionChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudRadioGroup",
            "Attributes": [
              {
                "Name": "@bind-SelectedOption",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedOption",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'SelectedOption' property and a change event delegate to the 'SelectedOptionChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedOption"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedOption",
          "Components.Bind.ChangeAttribute": "SelectedOptionChanged",
          "Common.TypeName": "MudBlazor.MudRadioGroup<T>"
        }
      },
      {
        "HashCode": -1995732762,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudRadioGroup<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedOption' property and a change event delegate to the 'SelectedOptionChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudRadioGroup",
            "Attributes": [
              {
                "Name": "@bind-SelectedOption",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedOption",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'SelectedOption' property and a change event delegate to the 'SelectedOptionChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedOption"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedOption",
          "Components.Bind.ChangeAttribute": "SelectedOptionChanged",
          "Common.TypeName": "MudBlazor.MudRadioGroup<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1310099668,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudRating",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedValue' property and a change event delegate to the 'SelectedValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudRating",
            "Attributes": [
              {
                "Name": "@bind-SelectedValue",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedValue",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'SelectedValue' property and a change event delegate to the 'SelectedValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedValue"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedValue",
          "Components.Bind.ChangeAttribute": "SelectedValueChanged",
          "Common.TypeName": "MudBlazor.MudRating"
        }
      },
      {
        "HashCode": -1603631406,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudRating",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedValue' property and a change event delegate to the 'SelectedValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudRating",
            "Attributes": [
              {
                "Name": "@bind-SelectedValue",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedValue",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'SelectedValue' property and a change event delegate to the 'SelectedValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedValue"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedValue",
          "Components.Bind.ChangeAttribute": "SelectedValueChanged",
          "Common.TypeName": "MudBlazor.MudRating",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 767937303,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudSelect<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedValues' property and a change event delegate to the 'SelectedValuesChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudSelect",
            "Attributes": [
              {
                "Name": "@bind-SelectedValues",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedValues",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.IEnumerable<T>>",
            "Documentation": "Binds the provided expression to the 'SelectedValues' property and a change event delegate to the 'SelectedValuesChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedValues"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedValues",
          "Components.Bind.ChangeAttribute": "SelectedValuesChanged",
          "Common.TypeName": "MudBlazor.MudSelect<T>"
        }
      },
      {
        "HashCode": -21239303,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudSelect<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudSelect",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudSelect<T>"
        }
      },
      {
        "HashCode": 1747755642,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudSelect<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudSelect",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudSelect<T>"
        }
      },
      {
        "HashCode": -1688313146,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudSelect<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedValues' property and a change event delegate to the 'SelectedValuesChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudSelect",
            "Attributes": [
              {
                "Name": "@bind-SelectedValues",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedValues",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.IEnumerable<T>>",
            "Documentation": "Binds the provided expression to the 'SelectedValues' property and a change event delegate to the 'SelectedValuesChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedValues"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedValues",
          "Components.Bind.ChangeAttribute": "SelectedValuesChanged",
          "Common.TypeName": "MudBlazor.MudSelect<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 92796081,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudSelect<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudSelect",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudSelect<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1949007550,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudSelect<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudSelect",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudSelect<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -768310611,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudSlider<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudSlider",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudSlider<T>"
        }
      },
      {
        "HashCode": 1869943404,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudSlider<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudSlider",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudSlider<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 722180500,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudSwitch<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudSwitch",
            "Attributes": [
              {
                "Name": "@bind-Checked",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Checked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Checked"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Checked",
          "Components.Bind.ChangeAttribute": "CheckedChanged",
          "Common.TypeName": "MudBlazor.MudSwitch<T>"
        }
      },
      {
        "HashCode": -1667948515,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudSwitch<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudSwitch",
            "Attributes": [
              {
                "Name": "@bind-Checked",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Checked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Checked"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Checked",
          "Components.Bind.ChangeAttribute": "CheckedChanged",
          "Common.TypeName": "MudBlazor.MudSwitch<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1623168185,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudColumn<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudColumn",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudColumn<T>"
        }
      },
      {
        "HashCode": -734918730,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudColumn<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudColumn",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudColumn<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 970492932,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudSortableColumn<T, ModelType>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudSortableColumn",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudSortableColumn<T, ModelType>"
        }
      },
      {
        "HashCode": 298237490,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudSortableColumn<T, ModelType>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudSortableColumn",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudSortableColumn<T, ModelType>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1636122696,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTable<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTable",
            "Attributes": [
              {
                "Name": "@bind-SelectedItem",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedItem",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedItem"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedItem",
          "Components.Bind.ChangeAttribute": "SelectedItemChanged",
          "Common.TypeName": "MudBlazor.MudTable<T>"
        }
      },
      {
        "HashCode": -653220451,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTable<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedItems' property and a change event delegate to the 'SelectedItemsChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTable",
            "Attributes": [
              {
                "Name": "@bind-SelectedItems",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedItems",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.HashSet<T>>",
            "Documentation": "Binds the provided expression to the 'SelectedItems' property and a change event delegate to the 'SelectedItemsChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedItems"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedItems",
          "Components.Bind.ChangeAttribute": "SelectedItemsChanged",
          "Common.TypeName": "MudBlazor.MudTable<T>"
        }
      },
      {
        "HashCode": -1717073385,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTable<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'RowsPerPage' property and a change event delegate to the 'RowsPerPageChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTable",
            "Attributes": [
              {
                "Name": "@bind-RowsPerPage",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-RowsPerPage",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'RowsPerPage' property and a change event delegate to the 'RowsPerPageChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "RowsPerPage"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "RowsPerPage",
          "Components.Bind.ChangeAttribute": "RowsPerPageChanged",
          "Common.TypeName": "MudBlazor.MudTable<T>"
        }
      },
      {
        "HashCode": -833044973,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTable<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTable",
            "Attributes": [
              {
                "Name": "@bind-SelectedItem",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedItem",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedItem"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedItem",
          "Components.Bind.ChangeAttribute": "SelectedItemChanged",
          "Common.TypeName": "MudBlazor.MudTable<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1102912791,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTable<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedItems' property and a change event delegate to the 'SelectedItemsChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTable",
            "Attributes": [
              {
                "Name": "@bind-SelectedItems",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedItems",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.HashSet<T>>",
            "Documentation": "Binds the provided expression to the 'SelectedItems' property and a change event delegate to the 'SelectedItemsChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedItems"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedItems",
          "Components.Bind.ChangeAttribute": "SelectedItemsChanged",
          "Common.TypeName": "MudBlazor.MudTable<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1294078824,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTable<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'RowsPerPage' property and a change event delegate to the 'RowsPerPageChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTable",
            "Attributes": [
              {
                "Name": "@bind-RowsPerPage",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-RowsPerPage",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'RowsPerPage' property and a change event delegate to the 'RowsPerPageChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "RowsPerPage"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "RowsPerPage",
          "Components.Bind.ChangeAttribute": "RowsPerPageChanged",
          "Common.TypeName": "MudBlazor.MudTable<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1589039097,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTableSortLabel<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SortDirection' property and a change event delegate to the 'SortDirectionChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTableSortLabel",
            "Attributes": [
              {
                "Name": "@bind-SortDirection",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SortDirection",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.SortDirection>",
            "IsEnum": true,
            "Documentation": "Binds the provided expression to the 'SortDirection' property and a change event delegate to the 'SortDirectionChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SortDirection"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SortDirection",
          "Components.Bind.ChangeAttribute": "SortDirectionChanged",
          "Common.TypeName": "MudBlazor.MudTableSortLabel<T>"
        }
      },
      {
        "HashCode": -514695037,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTableSortLabel<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SortDirection' property and a change event delegate to the 'SortDirectionChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTableSortLabel",
            "Attributes": [
              {
                "Name": "@bind-SortDirection",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SortDirection",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.SortDirection>",
            "IsEnum": true,
            "Documentation": "Binds the provided expression to the 'SortDirection' property and a change event delegate to the 'SortDirectionChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SortDirection"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SortDirection",
          "Components.Bind.ChangeAttribute": "SortDirectionChanged",
          "Common.TypeName": "MudBlazor.MudTableSortLabel<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1724220949,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTr",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'IsChecked' property and a change event delegate to the 'IsCheckedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTr",
            "Attributes": [
              {
                "Name": "@bind-IsChecked",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-IsChecked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'IsChecked' property and a change event delegate to the 'IsCheckedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "IsChecked"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "IsChecked",
          "Components.Bind.ChangeAttribute": "IsCheckedChanged",
          "Common.TypeName": "MudBlazor.MudTr"
        }
      },
      {
        "HashCode": 1612344094,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTr",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'IsChecked' property and a change event delegate to the 'IsCheckedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTr",
            "Attributes": [
              {
                "Name": "@bind-IsChecked",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-IsChecked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'IsChecked' property and a change event delegate to the 'IsCheckedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "IsChecked"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "IsChecked",
          "Components.Bind.ChangeAttribute": "IsCheckedChanged",
          "Common.TypeName": "MudBlazor.MudTr",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1711073582,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudDynamicTabs",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'ActivePanelIndex' property and a change event delegate to the 'ActivePanelIndexChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudDynamicTabs",
            "Attributes": [
              {
                "Name": "@bind-ActivePanelIndex",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-ActivePanelIndex",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'ActivePanelIndex' property and a change event delegate to the 'ActivePanelIndexChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ActivePanelIndex"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "ActivePanelIndex",
          "Components.Bind.ChangeAttribute": "ActivePanelIndexChanged",
          "Common.TypeName": "MudBlazor.MudDynamicTabs"
        }
      },
      {
        "HashCode": 1623283487,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudDynamicTabs",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'ActivePanelIndex' property and a change event delegate to the 'ActivePanelIndexChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudDynamicTabs",
            "Attributes": [
              {
                "Name": "@bind-ActivePanelIndex",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-ActivePanelIndex",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'ActivePanelIndex' property and a change event delegate to the 'ActivePanelIndexChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ActivePanelIndex"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "ActivePanelIndex",
          "Components.Bind.ChangeAttribute": "ActivePanelIndexChanged",
          "Common.TypeName": "MudBlazor.MudDynamicTabs",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -969097157,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTabs",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'ActivePanelIndex' property and a change event delegate to the 'ActivePanelIndexChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTabs",
            "Attributes": [
              {
                "Name": "@bind-ActivePanelIndex",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-ActivePanelIndex",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'ActivePanelIndex' property and a change event delegate to the 'ActivePanelIndexChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ActivePanelIndex"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "ActivePanelIndex",
          "Components.Bind.ChangeAttribute": "ActivePanelIndexChanged",
          "Common.TypeName": "MudBlazor.MudTabs"
        }
      },
      {
        "HashCode": 1043347143,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTabs",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'ActivePanelIndex' property and a change event delegate to the 'ActivePanelIndexChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTabs",
            "Attributes": [
              {
                "Name": "@bind-ActivePanelIndex",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-ActivePanelIndex",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'ActivePanelIndex' property and a change event delegate to the 'ActivePanelIndexChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ActivePanelIndex"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "ActivePanelIndex",
          "Components.Bind.ChangeAttribute": "ActivePanelIndexChanged",
          "Common.TypeName": "MudBlazor.MudTabs",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -313915880,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTextField<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTextField",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudTextField<T>"
        }
      },
      {
        "HashCode": -1689916023,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTextField<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTextField",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudTextField<T>"
        }
      },
      {
        "HashCode": 1076754686,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTextField<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTextField",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudTextField<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -602478108,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTextField<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTextField",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<T>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudTextField<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1631477587,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTextFieldString",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTextFieldString",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudTextFieldString"
        }
      },
      {
        "HashCode": -1191632403,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTextFieldString",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTextFieldString",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudTextFieldString"
        }
      },
      {
        "HashCode": 1743549721,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTextFieldString",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTextFieldString",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudTextFieldString",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1769700267,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTextFieldString",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTextFieldString",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Value",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Common.TypeName": "MudBlazor.MudTextFieldString",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1623692009,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.BaseMudThemeProvider",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'IsDarkMode' property and a change event delegate to the 'IsDarkModeChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "BaseMudThemeProvider",
            "Attributes": [
              {
                "Name": "@bind-IsDarkMode",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-IsDarkMode",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'IsDarkMode' property and a change event delegate to the 'IsDarkModeChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "IsDarkMode"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "IsDarkMode",
          "Components.Bind.ChangeAttribute": "IsDarkModeChanged",
          "Common.TypeName": "MudBlazor.BaseMudThemeProvider"
        }
      },
      {
        "HashCode": 1950373670,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.BaseMudThemeProvider",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'IsDarkMode' property and a change event delegate to the 'IsDarkModeChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.BaseMudThemeProvider",
            "Attributes": [
              {
                "Name": "@bind-IsDarkMode",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-IsDarkMode",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'IsDarkMode' property and a change event delegate to the 'IsDarkModeChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "IsDarkMode"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "IsDarkMode",
          "Components.Bind.ChangeAttribute": "IsDarkModeChanged",
          "Common.TypeName": "MudBlazor.BaseMudThemeProvider",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -445435709,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTimeline",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTimeline",
            "Attributes": [
              {
                "Name": "@bind-SelectedIndex",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedIndex",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedIndex"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedIndex",
          "Components.Bind.ChangeAttribute": "SelectedIndexChanged",
          "Common.TypeName": "MudBlazor.MudTimeline"
        }
      },
      {
        "HashCode": 136380707,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTimeline",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTimeline",
            "Attributes": [
              {
                "Name": "@bind-SelectedIndex",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedIndex",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedIndex"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedIndex",
          "Components.Bind.ChangeAttribute": "SelectedIndexChanged",
          "Common.TypeName": "MudBlazor.MudTimeline",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -317024424,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTimePicker",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Time' property and a change event delegate to the 'TimeChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTimePicker",
            "Attributes": [
              {
                "Name": "@bind-Time",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Time",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.TimeSpan?>",
            "Documentation": "Binds the provided expression to the 'Time' property and a change event delegate to the 'TimeChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Time"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Time",
          "Components.Bind.ChangeAttribute": "TimeChanged",
          "Common.TypeName": "MudBlazor.MudTimePicker"
        }
      },
      {
        "HashCode": -2044613616,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTimePicker",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTimePicker",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudTimePicker"
        }
      },
      {
        "HashCode": -1670595514,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTimePicker",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Time' property and a change event delegate to the 'TimeChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTimePicker",
            "Attributes": [
              {
                "Name": "@bind-Time",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Time",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.TimeSpan?>",
            "Documentation": "Binds the provided expression to the 'Time' property and a change event delegate to the 'TimeChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Time"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Time",
          "Components.Bind.ChangeAttribute": "TimeChanged",
          "Common.TypeName": "MudBlazor.MudTimePicker",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1431780745,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTimePicker",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTimePicker",
            "Attributes": [
              {
                "Name": "@bind-Text",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Text",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Text' property and a change event delegate to the 'TextChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Text"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Text",
          "Components.Bind.ChangeAttribute": "TextChanged",
          "Common.TypeName": "MudBlazor.MudTimePicker",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -9361710,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTooltip",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'IsVisible' property and a change event delegate to the 'IsVisibleChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTooltip",
            "Attributes": [
              {
                "Name": "@bind-IsVisible",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-IsVisible",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'IsVisible' property and a change event delegate to the 'IsVisibleChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "IsVisible"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "IsVisible",
          "Components.Bind.ChangeAttribute": "IsVisibleChanged",
          "Common.TypeName": "MudBlazor.MudTooltip"
        }
      },
      {
        "HashCode": -327343149,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTooltip",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'IsVisible' property and a change event delegate to the 'IsVisibleChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTooltip",
            "Attributes": [
              {
                "Name": "@bind-IsVisible",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-IsVisible",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'IsVisible' property and a change event delegate to the 'IsVisibleChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "IsVisible"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "IsVisible",
          "Components.Bind.ChangeAttribute": "IsVisibleChanged",
          "Common.TypeName": "MudBlazor.MudTooltip",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1126734265,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTreeViewItem<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTreeViewItem",
            "Attributes": [
              {
                "Name": "@bind-Expanded",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Expanded",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Expanded"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Expanded",
          "Components.Bind.ChangeAttribute": "ExpandedChanged",
          "Common.TypeName": "MudBlazor.MudTreeViewItem<T>"
        }
      },
      {
        "HashCode": -843306328,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTreeViewItem<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Activated' property and a change event delegate to the 'ActivatedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTreeViewItem",
            "Attributes": [
              {
                "Name": "@bind-Activated",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Activated",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Activated' property and a change event delegate to the 'ActivatedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Activated"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Activated",
          "Components.Bind.ChangeAttribute": "ActivatedChanged",
          "Common.TypeName": "MudBlazor.MudTreeViewItem<T>"
        }
      },
      {
        "HashCode": 1353540426,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTreeViewItem<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Selected' property and a change event delegate to the 'SelectedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTreeViewItem",
            "Attributes": [
              {
                "Name": "@bind-Selected",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Selected",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Selected' property and a change event delegate to the 'SelectedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Selected"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Selected",
          "Components.Bind.ChangeAttribute": "SelectedChanged",
          "Common.TypeName": "MudBlazor.MudTreeViewItem<T>"
        }
      },
      {
        "HashCode": 1342028278,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTreeViewItem<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTreeViewItem",
            "Attributes": [
              {
                "Name": "@bind-Expanded",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Expanded",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Expanded"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Expanded",
          "Components.Bind.ChangeAttribute": "ExpandedChanged",
          "Common.TypeName": "MudBlazor.MudTreeViewItem<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 90964677,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTreeViewItem<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Activated' property and a change event delegate to the 'ActivatedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTreeViewItem",
            "Attributes": [
              {
                "Name": "@bind-Activated",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Activated",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Activated' property and a change event delegate to the 'ActivatedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Activated"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Activated",
          "Components.Bind.ChangeAttribute": "ActivatedChanged",
          "Common.TypeName": "MudBlazor.MudTreeViewItem<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -904109759,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTreeViewItem<T>",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Selected' property and a change event delegate to the 'SelectedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTreeViewItem",
            "Attributes": [
              {
                "Name": "@bind-Selected",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Selected",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Selected' property and a change event delegate to the 'SelectedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Selected"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Selected",
          "Components.Bind.ChangeAttribute": "SelectedChanged",
          "Common.TypeName": "MudBlazor.MudTreeViewItem<T>",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -1229270197,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudChart",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudChart",
            "Attributes": [
              {
                "Name": "@bind-SelectedIndex",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedIndex",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedIndex"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedIndex",
          "Components.Bind.ChangeAttribute": "SelectedIndexChanged",
          "Common.TypeName": "MudBlazor.MudChart"
        }
      },
      {
        "HashCode": 2087521052,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudChart",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudChart",
            "Attributes": [
              {
                "Name": "@bind-SelectedIndex",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedIndex",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedIndex"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedIndex",
          "Components.Bind.ChangeAttribute": "SelectedIndexChanged",
          "Common.TypeName": "MudBlazor.MudChart",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -2125258112,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudThemeProvider",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'IsDarkMode' property and a change event delegate to the 'IsDarkModeChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudThemeProvider",
            "Attributes": [
              {
                "Name": "@bind-IsDarkMode",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-IsDarkMode",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'IsDarkMode' property and a change event delegate to the 'IsDarkModeChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "IsDarkMode"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "IsDarkMode",
          "Components.Bind.ChangeAttribute": "IsDarkModeChanged",
          "Common.TypeName": "MudBlazor.MudThemeProvider"
        }
      },
      {
        "HashCode": -1185376369,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudThemeProvider",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'IsDarkMode' property and a change event delegate to the 'IsDarkModeChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudThemeProvider",
            "Attributes": [
              {
                "Name": "@bind-IsDarkMode",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-IsDarkMode",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'IsDarkMode' property and a change event delegate to the 'IsDarkModeChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "IsDarkMode"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "IsDarkMode",
          "Components.Bind.ChangeAttribute": "IsDarkModeChanged",
          "Common.TypeName": "MudBlazor.MudThemeProvider",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1254626350,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTreeViewItemToggleButton",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudTreeViewItemToggleButton",
            "Attributes": [
              {
                "Name": "@bind-Expanded",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Expanded",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Expanded"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Expanded",
          "Components.Bind.ChangeAttribute": "ExpandedChanged",
          "Common.TypeName": "MudBlazor.MudTreeViewItemToggleButton"
        }
      },
      {
        "HashCode": 89342329,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.MudTreeViewItemToggleButton",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.MudTreeViewItemToggleButton",
            "Attributes": [
              {
                "Name": "@bind-Expanded",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Expanded",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Expanded"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Expanded",
          "Components.Bind.ChangeAttribute": "ExpandedChanged",
          "Common.TypeName": "MudBlazor.MudTreeViewItemToggleButton",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": -69399791,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.Charts.Bar",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Bar",
            "Attributes": [
              {
                "Name": "@bind-SelectedIndex",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedIndex",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedIndex"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedIndex",
          "Components.Bind.ChangeAttribute": "SelectedIndexChanged",
          "Common.TypeName": "MudBlazor.Charts.Bar"
        }
      },
      {
        "HashCode": -987113486,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.Charts.Bar",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.Charts.Bar",
            "Attributes": [
              {
                "Name": "@bind-SelectedIndex",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedIndex",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedIndex"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedIndex",
          "Components.Bind.ChangeAttribute": "SelectedIndexChanged",
          "Common.TypeName": "MudBlazor.Charts.Bar",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 794576593,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.Charts.Donut",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Donut",
            "Attributes": [
              {
                "Name": "@bind-SelectedIndex",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedIndex",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedIndex"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedIndex",
          "Components.Bind.ChangeAttribute": "SelectedIndexChanged",
          "Common.TypeName": "MudBlazor.Charts.Donut"
        }
      },
      {
        "HashCode": -216668206,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.Charts.Donut",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.Charts.Donut",
            "Attributes": [
              {
                "Name": "@bind-SelectedIndex",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedIndex",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedIndex"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedIndex",
          "Components.Bind.ChangeAttribute": "SelectedIndexChanged",
          "Common.TypeName": "MudBlazor.Charts.Donut",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1987078900,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.Charts.Line",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Line",
            "Attributes": [
              {
                "Name": "@bind-SelectedIndex",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedIndex",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedIndex"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedIndex",
          "Components.Bind.ChangeAttribute": "SelectedIndexChanged",
          "Common.TypeName": "MudBlazor.Charts.Line"
        }
      },
      {
        "HashCode": -1411639860,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.Charts.Line",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.Charts.Line",
            "Attributes": [
              {
                "Name": "@bind-SelectedIndex",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedIndex",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedIndex"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedIndex",
          "Components.Bind.ChangeAttribute": "SelectedIndexChanged",
          "Common.TypeName": "MudBlazor.Charts.Line",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 316586634,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.Charts.Pie",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Pie",
            "Attributes": [
              {
                "Name": "@bind-SelectedIndex",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedIndex",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedIndex"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedIndex",
          "Components.Bind.ChangeAttribute": "SelectedIndexChanged",
          "Common.TypeName": "MudBlazor.Charts.Pie"
        }
      },
      {
        "HashCode": -1989006994,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.Charts.Pie",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.Charts.Pie",
            "Attributes": [
              {
                "Name": "@bind-SelectedIndex",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedIndex",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedIndex"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedIndex",
          "Components.Bind.ChangeAttribute": "SelectedIndexChanged",
          "Common.TypeName": "MudBlazor.Charts.Pie",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 6946521,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.Charts.Legend",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Legend",
            "Attributes": [
              {
                "Name": "@bind-SelectedIndex",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedIndex",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedIndex"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedIndex",
          "Components.Bind.ChangeAttribute": "SelectedIndexChanged",
          "Common.TypeName": "MudBlazor.Charts.Legend"
        }
      },
      {
        "HashCode": 973263968,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.Charts.Legend",
        "AssemblyName": "MudBlazor",
        "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.Charts.Legend",
            "Attributes": [
              {
                "Name": "@bind-SelectedIndex",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-SelectedIndex",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Int32>",
            "Documentation": "Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "SelectedIndex"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "SelectedIndex",
          "Components.Bind.ChangeAttribute": "SelectedIndexChanged",
          "Common.TypeName": "MudBlazor.Charts.Legend",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 866282012,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.ThemeManager.MudThemeManager",
        "AssemblyName": "MudBlazor.ThemeManager",
        "Documentation": "Binds the provided expression to the 'Open' property and a change event delegate to the 'OpenChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudThemeManager",
            "Attributes": [
              {
                "Name": "@bind-Open",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Open",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Open' property and a change event delegate to the 'OpenChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Open"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Open",
          "Components.Bind.ChangeAttribute": "OpenChanged",
          "Common.TypeName": "MudBlazor.ThemeManager.MudThemeManager"
        }
      },
      {
        "HashCode": 1244767174,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.ThemeManager.MudThemeManager",
        "AssemblyName": "MudBlazor.ThemeManager",
        "Documentation": "Binds the provided expression to the 'Theme' property and a change event delegate to the 'ThemeChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudThemeManager",
            "Attributes": [
              {
                "Name": "@bind-Theme",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Theme",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.ThemeManager.ThemeManagerTheme>",
            "Documentation": "Binds the provided expression to the 'Theme' property and a change event delegate to the 'ThemeChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Theme"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Theme",
          "Components.Bind.ChangeAttribute": "ThemeChanged",
          "Common.TypeName": "MudBlazor.ThemeManager.MudThemeManager"
        }
      },
      {
        "HashCode": 122759786,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.ThemeManager.MudThemeManager",
        "AssemblyName": "MudBlazor.ThemeManager",
        "Documentation": "Binds the provided expression to the 'Open' property and a change event delegate to the 'OpenChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.ThemeManager.MudThemeManager",
            "Attributes": [
              {
                "Name": "@bind-Open",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Open",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Open' property and a change event delegate to the 'OpenChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Open"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Open",
          "Components.Bind.ChangeAttribute": "OpenChanged",
          "Common.TypeName": "MudBlazor.ThemeManager.MudThemeManager",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 1852661005,
        "Kind": "Components.Bind",
        "Name": "MudBlazor.ThemeManager.MudThemeManager",
        "AssemblyName": "MudBlazor.ThemeManager",
        "Documentation": "Binds the provided expression to the 'Theme' property and a change event delegate to the 'ThemeChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "MudBlazor.ThemeManager.MudThemeManager",
            "Attributes": [
              {
                "Name": "@bind-Theme",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Theme",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<MudBlazor.ThemeManager.ThemeManagerTheme>",
            "Documentation": "Binds the provided expression to the 'Theme' property and a change event delegate to the 'ThemeChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Theme"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.Bind.ValueAttribute": "Theme",
          "Components.Bind.ChangeAttribute": "ThemeChanged",
          "Common.TypeName": "MudBlazor.ThemeManager.MudThemeManager",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch"
        }
      },
      {
        "HashCode": 766905924,
        "Kind": "Components.Ref",
        "Name": "Ref",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Populates the specified field or property with a reference to the element or component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ref",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Ref",
            "Name": "@ref",
            "TypeName": "System.Object",
            "Documentation": "Populates the specified field or property with a reference to the element or component.",
            "Metadata": {
              "Common.PropertyName": "Ref",
              "Common.DirectiveAttribute": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Ref",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Ref"
        }
      },
      {
        "HashCode": 516455432,
        "Kind": "Components.Key",
        "Name": "Key",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Ensures that the component or element will be preserved across renders if (and only if) the supplied key value matches.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@key",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Key",
            "Name": "@key",
            "TypeName": "System.Object",
            "Documentation": "Ensures that the component or element will be preserved across renders if (and only if) the supplied key value matches.",
            "Metadata": {
              "Common.PropertyName": "Key",
              "Common.DirectiveAttribute": "True"
            }
          }
        ],
        "Metadata": {
          "Runtime.Name": "Components.None",
          "Components.IsSpecialKind": "Components.Key",
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Key"
        }
      }
    ],
    "CSharpLanguageVersion": 1000
  },
  "RootNamespace": "BlazorMLWebApp",
  "Documents": [
    {
      "FilePath": "c:\\Users\\yoshi\\Documents\\Repository\\Blazor\\BlazorMLWebApp\\Pages\\FormExample.razor",
      "TargetPath": "Pages\\FormExample.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\yoshi\\Documents\\Repository\\Blazor\\BlazorMLWebApp\\_Imports.razor",
      "TargetPath": "_Imports.razor",
      "FileKind": "componentImport"
    },
    {
      "FilePath": "c:\\Users\\yoshi\\Documents\\Repository\\Blazor\\BlazorMLWebApp\\Pages\\Index.razor",
      "TargetPath": "Pages\\Index.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\yoshi\\Documents\\Repository\\Blazor\\BlazorMLWebApp\\Pages\\Error.cshtml",
      "TargetPath": "Pages\\Error.cshtml",
      "FileKind": "mvc"
    },
    {
      "FilePath": "c:\\Users\\yoshi\\Documents\\Repository\\Blazor\\BlazorMLWebApp\\Shared\\MainLayout.razor",
      "TargetPath": "Shared\\MainLayout.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\yoshi\\Documents\\Repository\\Blazor\\BlazorMLWebApp\\Pages\\ImageClassification.razor",
      "TargetPath": "Pages\\ImageClassification.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\yoshi\\Documents\\Repository\\Blazor\\BlazorMLWebApp\\Pages\\Counter.razor",
      "TargetPath": "Pages\\Counter.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\yoshi\\Documents\\Repository\\Blazor\\BlazorMLWebApp\\Pages\\FileUpload.razor",
      "TargetPath": "Pages\\FileUpload.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\yoshi\\Documents\\Repository\\Blazor\\BlazorMLWebApp\\Pages\\FetchData.razor",
      "TargetPath": "Pages\\FetchData.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\yoshi\\Documents\\Repository\\Blazor\\BlazorMLWebApp\\Shared\\NavMenu.razor",
      "TargetPath": "Shared\\NavMenu.razor",
      "FileKind": "component"
    },
    {
      "FilePath": "c:\\Users\\yoshi\\Documents\\Repository\\Blazor\\BlazorMLWebApp\\Pages\\_Host.cshtml",
      "TargetPath": "Pages\\_Host.cshtml",
      "FileKind": "mvc"
    },
    {
      "FilePath": "c:\\Users\\yoshi\\Documents\\Repository\\Blazor\\BlazorMLWebApp\\Pages\\_Layout.cshtml",
      "TargetPath": "Pages\\_Layout.cshtml",
      "FileKind": "mvc"
    },
    {
      "FilePath": "c:\\Users\\yoshi\\Documents\\Repository\\Blazor\\BlazorMLWebApp\\App.razor",
      "TargetPath": "App.razor",
      "FileKind": "component"
    }
  ],
  "SerializationFormat": "0.2"
}